{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"1_overview/","text":"Note This website is a work in progress. The shimming-toolbox is open-source Matlab software package enabling a variety of MRI shimming (magnetic field homogenization) techniques such as static and real-time shimming for use with standard manufacturer-supplied gradient/shim coils or with custom \"multi-coil\" arrays. Note TODO: Add simple flowchart","title":"Index"},{"location":"1_overview/flowchart/","text":"Flowchart The flowchart describes the different ways the toolbox can be used to shim.","title":"Flowchart"},{"location":"1_overview/flowchart/#flowchart","text":"The flowchart describes the different ways the toolbox can be used to shim.","title":"Flowchart"},{"location":"2_getting_started/1_installation/","text":"Installation Before running this software you will need to install the following dependencies: - MATLAB version 2019B or later - Optimization toolbox - Image processing toolbox - dcm2niix - SCT v 4.0.0 To install, download (or git clone ) this repository and add this folder (with sub-folders) to the Matlab path. Start Matlab via the Terminal in order to load the shell environment variable that will be needed to launch UNIX-based software (e.g. FSL Prelude). Note For the command line start, MATLAB also needs to exist within the system path, e.g. For MacOS, add the following lines (adapted to refer to your version of MATLAB) to ~/.bash_profile export PATH=$PATH:/Applications/MATLAB_R2020a.app/bin/ After Matlab has started, add update the environment to access all the functions by running: cd <PATH_SHIMMINGTOOLBOX> startup.m","title":"Installation"},{"location":"2_getting_started/1_installation/#installation","text":"Before running this software you will need to install the following dependencies: - MATLAB version 2019B or later - Optimization toolbox - Image processing toolbox - dcm2niix - SCT v 4.0.0 To install, download (or git clone ) this repository and add this folder (with sub-folders) to the Matlab path. Start Matlab via the Terminal in order to load the shell environment variable that will be needed to launch UNIX-based software (e.g. FSL Prelude). Note For the command line start, MATLAB also needs to exist within the system path, e.g. For MacOS, add the following lines (adapted to refer to your version of MATLAB) to ~/.bash_profile export PATH=$PATH:/Applications/MATLAB_R2020a.app/bin/ After Matlab has started, add update the environment to access all the functions by running: cd <PATH_SHIMMINGTOOLBOX> startup.m","title":"Installation"},{"location":"2_getting_started/2_getting_started/","text":"Getting started (from scratch) To use this library for optimizing a given shim system, that system needs to be defined. This definition occurs via two distinct classes: ShimSpecs( ) System specifications: This is essentially a struct container which defines system parameters concerning amplifier, DAC, etc. and ShimOpt( ) Shim optimization: This class contains a number of methods used to optimize the shim currents for a given field map Both are abstract classes, meaning they cannot, in themselves, be instantiated as objects. Rather, each specific shim system will require corresponding subclasses that inherit from these two templates. For example, ShimSpecs_Greg and ShimOpt_Greg refer to the 8-channel \"AC/DC\" 3T neck coil. If you would like to register a new shim system, create a new folder Shim_MyNewShim. Within it, place and rename copies of the abstract classes in the folder Shim_Template/ . Shim reference (aka \"calibration\") maps Prior to optimizing any shim currents, some experimental data is needed: These reference maps relate the longitudinal magnetic field (delta B0) generated by each shim element to the input current (in A). TODO: Procedure for creating calibration maps. (Also see: Topfer et al. MRM 2016) Once this experimental gradient-echo data is available, one need needs to provide the paths to the DICOM images and to define the corresponding experimental currents used in ShimOpt_MyNewShim.declarecalibrationparameters()... TODO cont... List of available maps: - UNF: https://drive.google.com/drive/folders/1DSCTeh9qRCgS55fWLGtsNeYdq8DsRyMg Download map and copy it under $PATH_SHIMMINGTOOLBOX/data/ Interfacing with hardware: ShimUse( ) and ShimCom( ) The class ShimUse() provides the generic user interface for the shim experiment and should not depend on the specific shim system. It does, however, require the prior definition of concrete ShimSpecs, ShimOpt, and ShimCom subclasses: ShimCom() defines the lower-level communication methods with the shim hardware (e.g. ShimCom.getchanneloutput() and ShimCom.setandloadallshims() ). It is another abstract class, and each shim system requires a corresponding subclass (e.g. ShimCom_MyNewShim() which both inherits from ShimCom() , and defines, for itself, the abstract methods of ShimCom() . SOP Experimental How-to Control room Connect sensor probe to station Plug the optic-to-serial-to-usb (PICTURE) to the computer. If you are running macOS, you might need to install this driver . In the terminal, change to the home directory and open matlab Copy the file shim_params_template.m to shim_params.m and edit shim_params.m according to your setup. Launch experiment by instantiating a ShimUse object with the desired parameters: Shims = ShimUse( shim_params ) See example: shimming-toolbox/example/XXX Class definitions Other classes pertaining to shimming: ProbeTracking( ) Dynamic tracking of resonance offsets (for now: only subject respiration vis-a-vis the respiratory probe...). For the documentation, in the Matlab command prompt type: doc [class name]","title":"Getting started"},{"location":"2_getting_started/2_getting_started/#getting-started","text":"(from scratch) To use this library for optimizing a given shim system, that system needs to be defined. This definition occurs via two distinct classes: ShimSpecs( ) System specifications: This is essentially a struct container which defines system parameters concerning amplifier, DAC, etc. and ShimOpt( ) Shim optimization: This class contains a number of methods used to optimize the shim currents for a given field map Both are abstract classes, meaning they cannot, in themselves, be instantiated as objects. Rather, each specific shim system will require corresponding subclasses that inherit from these two templates. For example, ShimSpecs_Greg and ShimOpt_Greg refer to the 8-channel \"AC/DC\" 3T neck coil. If you would like to register a new shim system, create a new folder Shim_MyNewShim. Within it, place and rename copies of the abstract classes in the folder Shim_Template/ .","title":"Getting started"},{"location":"2_getting_started/2_getting_started/#shim-reference-aka-calibration-maps","text":"Prior to optimizing any shim currents, some experimental data is needed: These reference maps relate the longitudinal magnetic field (delta B0) generated by each shim element to the input current (in A). TODO: Procedure for creating calibration maps. (Also see: Topfer et al. MRM 2016) Once this experimental gradient-echo data is available, one need needs to provide the paths to the DICOM images and to define the corresponding experimental currents used in ShimOpt_MyNewShim.declarecalibrationparameters()... TODO cont... List of available maps: - UNF: https://drive.google.com/drive/folders/1DSCTeh9qRCgS55fWLGtsNeYdq8DsRyMg Download map and copy it under $PATH_SHIMMINGTOOLBOX/data/","title":"Shim reference (aka \"calibration\") maps"},{"location":"2_getting_started/2_getting_started/#interfacing-with-hardware-shimuse-and-shimcom","text":"The class ShimUse() provides the generic user interface for the shim experiment and should not depend on the specific shim system. It does, however, require the prior definition of concrete ShimSpecs, ShimOpt, and ShimCom subclasses: ShimCom() defines the lower-level communication methods with the shim hardware (e.g. ShimCom.getchanneloutput() and ShimCom.setandloadallshims() ). It is another abstract class, and each shim system requires a corresponding subclass (e.g. ShimCom_MyNewShim() which both inherits from ShimCom() , and defines, for itself, the abstract methods of ShimCom() .","title":"Interfacing with hardware: ShimUse( ) and ShimCom( )"},{"location":"2_getting_started/2_getting_started/#sop","text":"Experimental How-to Control room Connect sensor probe to station Plug the optic-to-serial-to-usb (PICTURE) to the computer. If you are running macOS, you might need to install this driver . In the terminal, change to the home directory and open matlab Copy the file shim_params_template.m to shim_params.m and edit shim_params.m according to your setup. Launch experiment by instantiating a ShimUse object with the desired parameters: Shims = ShimUse( shim_params ) See example: shimming-toolbox/example/XXX","title":"SOP"},{"location":"2_getting_started/2_getting_started/#class-definitions","text":"Other classes pertaining to shimming: ProbeTracking( ) Dynamic tracking of resonance offsets (for now: only subject respiration vis-a-vis the respiratory probe...). For the documentation, in the Matlab command prompt type: doc [class name]","title":"Class definitions"},{"location":"2_getting_started/3_help/","text":"Help If you need help using the shimming-toolbox , please contact the developer team via a Github issue .","title":"Help"},{"location":"2_getting_started/3_help/#help","text":"If you need help using the shimming-toolbox , please contact the developer team via a Github issue .","title":"Help"},{"location":"3_contributing/contributing_guidelines/","text":"How to contribute Introduction Programming guidelines Fixing a bug Adding a new feature Commit changes to your branch Submit a pull request Code Review Introduction You can contribute to this repos by opening a Pull Request. Direct push to the master branch is forbidden. If your are new to git or github, the following articles may help you: See Using Pull Requests for more information about Pull Requests. See Fork A Repo for an introduction to forking a repository. See Creating branches for an introduction on branching within GitHub. See Refining patches using git for an introduction to cleaning up git branches. Programming guidelines When contributing to the library, for maintainability, please follow the programming guidelines for Matlab by Richard Johnson. For information on object-oriented programming in Matlab, this quick overview by Kevin P Murphy is excellent. A number of classes are defined as handle as opposed to value classes. For more info on this important distinction, see the Matlab documentation. Fixing a bug In most cases, pull requests for bug fixes should be based on the master branch. Indicate issue number in the commit (see commit section below) Do not close the issue yourself. The issue will be automatically closed when changes are pushed to master. Bug reporting template For issues that are not straight forward, please use the template to structure the bug report: Title: [BUG] Summary of the issue. ex:\"[BUG] sct_image command crashes when cropping image.\" Environment: Specify what OS and software version you are using. Step to reproduce: List all the steps that caused the issue. Expected results: Actual results: Data that caused the issue: Adding a new feature In most cases, pull requests for new features should be based on the master branch. It is important to write a good commit message explaining why the feature is needed. We prefer that the information is in the commit message, so that anyone that want to know two years later why a particular feature can easily find out. It does no harm to provide the same information in the pull request (if the pull request consists of a single commit, the commit message will be added to the pull request automatically). With few exceptions, it is mandatory to write a new test case that tests the feature. The test case is needed to ensure that the features does not stop working in the future. If you are implementing a new feature, also update the documentation to describe the feature. Make sure to cite any papers, algorithms or articles that can help understand the implementation of the feature. Feature request template When proposing a new feature, a discussion will be conducted around the feature. Here a good way to present the new feature in the github issues. Title: [FEATURE] Summary of the feature. Motivation: Explain why the feature is needed. Use Case: Explain how the feature will be used, provide all the necessary steps. Expected Outcome: What will the outcome be. Citation: Provide references to any theoretical work to help the reader better understand the feature. Commit changes to your branch Here are some tips to help the review go smoothly and quickly. Keep it short. Keep the changes less then 50 lines. Focus on committing 1 logical change at a time. Write a verbose commit message. Detailed explanation of a good commit message Correct any code style suggested by an analyser on your changes. Matlab Code Checker . Commit message Title The title should be short (50 chars or less), and should explicitly summarize the changes. If it solves an issue, add at the end: \"fixes #ISSUE_NUMBER\". The message should be preceded by one of the following flags: BUG: - a change made to fix a runtime issue (crash, segmentation fault, exception, incorrect result) REF: - refactoring (edits that don't impact the execution, renaming files, etc.) OPT: - a performance improvement, optimization, enhancement BIN: - any change related to binary files (should rarely be used) NEW: - new functionality added to the project (e.g., new function) DOC: - changes not related to the code (comments, documentation, etc.). TEST: - any change related to the testing (e.g., .travis, etc.) An example commit title might be: BUG: Re-ordering of 4th dimension when apply transformation on 4D scans (fixes #1635) ```` ### Description Add more detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together. Further paragraphs come after blank lines. Bullet points are okay, too Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here Solves #1020 ``` Submit a pull request Title The title should be short (50 chars or less), and should explicitly summarize the purpose of the PR. Labels To help prioritize the request, add labels that describe the type and impact of the change. A change can have multiple types if it is appropriate but would have only 1 impact label. Such as bug documentation fix:patch . See label definitions on how to categorize the issue and pull request. TODO: ADD AN EXAMPLE WITH LINK TO PR Code Review What is code review? Any changes submitted to the master branch will go through code review. For a pull request to be accepted: At least 1 member should approve the changes. TravisCI must pass successfully Reviewing members are: * @jcohenadad * @rtopfer * @po09i","title":"How to contribute"},{"location":"3_contributing/contributing_guidelines/#how-to-contribute","text":"Introduction Programming guidelines Fixing a bug Adding a new feature Commit changes to your branch Submit a pull request Code Review","title":"How to contribute"},{"location":"3_contributing/contributing_guidelines/#introduction","text":"You can contribute to this repos by opening a Pull Request. Direct push to the master branch is forbidden. If your are new to git or github, the following articles may help you: See Using Pull Requests for more information about Pull Requests. See Fork A Repo for an introduction to forking a repository. See Creating branches for an introduction on branching within GitHub. See Refining patches using git for an introduction to cleaning up git branches.","title":"Introduction"},{"location":"3_contributing/contributing_guidelines/#programming-guidelines","text":"When contributing to the library, for maintainability, please follow the programming guidelines for Matlab by Richard Johnson. For information on object-oriented programming in Matlab, this quick overview by Kevin P Murphy is excellent. A number of classes are defined as handle as opposed to value classes. For more info on this important distinction, see the Matlab documentation.","title":"Programming guidelines"},{"location":"3_contributing/contributing_guidelines/#fixing-a-bug","text":"In most cases, pull requests for bug fixes should be based on the master branch. Indicate issue number in the commit (see commit section below) Do not close the issue yourself. The issue will be automatically closed when changes are pushed to master.","title":"Fixing a bug"},{"location":"3_contributing/contributing_guidelines/#bug-reporting-template","text":"For issues that are not straight forward, please use the template to structure the bug report: Title: [BUG] Summary of the issue. ex:\"[BUG] sct_image command crashes when cropping image.\" Environment: Specify what OS and software version you are using. Step to reproduce: List all the steps that caused the issue. Expected results: Actual results: Data that caused the issue:","title":"Bug reporting template"},{"location":"3_contributing/contributing_guidelines/#adding-a-new-feature","text":"In most cases, pull requests for new features should be based on the master branch. It is important to write a good commit message explaining why the feature is needed. We prefer that the information is in the commit message, so that anyone that want to know two years later why a particular feature can easily find out. It does no harm to provide the same information in the pull request (if the pull request consists of a single commit, the commit message will be added to the pull request automatically). With few exceptions, it is mandatory to write a new test case that tests the feature. The test case is needed to ensure that the features does not stop working in the future. If you are implementing a new feature, also update the documentation to describe the feature. Make sure to cite any papers, algorithms or articles that can help understand the implementation of the feature.","title":"Adding a new feature"},{"location":"3_contributing/contributing_guidelines/#feature-request-template","text":"When proposing a new feature, a discussion will be conducted around the feature. Here a good way to present the new feature in the github issues. Title: [FEATURE] Summary of the feature. Motivation: Explain why the feature is needed. Use Case: Explain how the feature will be used, provide all the necessary steps. Expected Outcome: What will the outcome be. Citation: Provide references to any theoretical work to help the reader better understand the feature.","title":"Feature request template"},{"location":"3_contributing/contributing_guidelines/#commit-changes-to-your-branch","text":"Here are some tips to help the review go smoothly and quickly. Keep it short. Keep the changes less then 50 lines. Focus on committing 1 logical change at a time. Write a verbose commit message. Detailed explanation of a good commit message Correct any code style suggested by an analyser on your changes. Matlab Code Checker .","title":"Commit changes to your branch"},{"location":"3_contributing/contributing_guidelines/#commit-message","text":"","title":"Commit message"},{"location":"3_contributing/contributing_guidelines/#title","text":"The title should be short (50 chars or less), and should explicitly summarize the changes. If it solves an issue, add at the end: \"fixes #ISSUE_NUMBER\". The message should be preceded by one of the following flags: BUG: - a change made to fix a runtime issue (crash, segmentation fault, exception, incorrect result) REF: - refactoring (edits that don't impact the execution, renaming files, etc.) OPT: - a performance improvement, optimization, enhancement BIN: - any change related to binary files (should rarely be used) NEW: - new functionality added to the project (e.g., new function) DOC: - changes not related to the code (comments, documentation, etc.). TEST: - any change related to the testing (e.g., .travis, etc.) An example commit title might be: BUG: Re-ordering of 4th dimension when apply transformation on 4D scans (fixes #1635) ```` ### Description Add more detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together. Further paragraphs come after blank lines. Bullet points are okay, too Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here Solves #1020 ```","title":"Title"},{"location":"3_contributing/contributing_guidelines/#submit-a-pull-request","text":"","title":"Submit a pull request"},{"location":"3_contributing/contributing_guidelines/#title_1","text":"The title should be short (50 chars or less), and should explicitly summarize the purpose of the PR.","title":"Title"},{"location":"3_contributing/contributing_guidelines/#labels","text":"To help prioritize the request, add labels that describe the type and impact of the change. A change can have multiple types if it is appropriate but would have only 1 impact label. Such as bug documentation fix:patch . See label definitions on how to categorize the issue and pull request. TODO: ADD AN EXAMPLE WITH LINK TO PR","title":"Labels"},{"location":"3_contributing/contributing_guidelines/#code-review","text":"What is code review? Any changes submitted to the master branch will go through code review. For a pull request to be accepted: At least 1 member should approve the changes. TravisCI must pass successfully Reviewing members are: * @jcohenadad * @rtopfer * @po09i","title":"Code Review"},{"location":"3_contributing/contributors/","text":"Contributors List of contributors.","title":"Contributors"},{"location":"3_contributing/contributors/#contributors","text":"List of contributors.","title":"Contributors"},{"location":"3_contributing/api_documentation/%2Bimutils/dicom_to_nifti/","text":"imutils.dicom_to_nifti Filetype: MATLAB\u00ae function Synopsis: DICOM_TO_NIFTI converts dicoms into niftis with dcm2bids output dicom_to_nifti( unsortedDicomDir, niftiPath ) The input unsortedDicomDir is a path to a folder containing either be \".dcm\" or \".IMA\". The input iftiPath is a folder for the output. The output will be niftis in seperate folders according to their acquisition names that are in niftiPath . Attributes nInputs : 2 nOutputs : 0","title":"imutils.dicom_to_nifti"},{"location":"3_contributing/api_documentation/%2Bimutils/dicom_to_nifti/#imutilsdicom_to_nifti","text":"Filetype: MATLAB\u00ae function Synopsis: DICOM_TO_NIFTI converts dicoms into niftis with dcm2bids output dicom_to_nifti( unsortedDicomDir, niftiPath ) The input unsortedDicomDir is a path to a folder containing either be \".dcm\" or \".IMA\". The input iftiPath is a folder for the output. The output will be niftis in seperate folders according to their acquisition names that are in niftiPath .","title":"imutils.dicom_to_nifti"},{"location":"3_contributing/api_documentation/%2Bimutils/dicom_to_nifti/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/%2Bimutils/get_nii_coordinates/","text":"imutils.get_nii_coordinates Filetype: MATLAB\u00ae function Synopsis: GET_NII_COORDINATES Return voxel position \"world-coordinates\" in mm [x, y, z] = get_nii_coordinates( niiFile ) [x, y, z] = get_nii_coordinates( niiInfo ) Returns x, y, z : three 3-D arrays of voxel positions in mm. The single input can be given either as: niiFile \u2014A path string to the NIfTI file of interest; or, niiInfo \u2014A struct of the form niiInfo = niftiinfo( niiFile ) NOTE The function is implemented as [i, j, k] = ndgrid( [0:niiInfo.ImageSize(1)-1], [0:niiInfo.ImageSize(2)-1], [0:niiInfo.ImageSize(3)-1] ) ; [x, y, z] = niiInfo.Transform.transformPointsForward( i, j, k ) ; TODO * function should be further tested. Attributes nInputs : 1 nOutputs : 3","title":"imutils.get_nii_coordinates"},{"location":"3_contributing/api_documentation/%2Bimutils/get_nii_coordinates/#imutilsget_nii_coordinates","text":"Filetype: MATLAB\u00ae function Synopsis: GET_NII_COORDINATES Return voxel position \"world-coordinates\" in mm [x, y, z] = get_nii_coordinates( niiFile ) [x, y, z] = get_nii_coordinates( niiInfo ) Returns x, y, z : three 3-D arrays of voxel positions in mm. The single input can be given either as: niiFile \u2014A path string to the NIfTI file of interest; or, niiInfo \u2014A struct of the form niiInfo = niftiinfo( niiFile ) NOTE The function is implemented as [i, j, k] = ndgrid( [0:niiInfo.ImageSize(1)-1], [0:niiInfo.ImageSize(2)-1], [0:niiInfo.ImageSize(3)-1] ) ; [x, y, z] = niiInfo.Transform.transformPointsForward( i, j, k ) ; TODO * function should be further tested.","title":"imutils.get_nii_coordinates"},{"location":"3_contributing/api_documentation/%2Bimutils/get_nii_coordinates/#attributes","text":"nInputs : 1 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/%2Bimutils/load_niftis/","text":"imutils.load_niftis Filetype: MATLAB\u00ae function Synopsis: LOAD_NIFTIS Load a nifti acquisition from dcm2bids [niftis, info, json] = load_niftis(path) If path is a folder containing niftis, directly output niftis. If path is a folder containing acquisitions, ask the user for which acquisition. The output niftis is a 5d matlab vector stored according to (x,y,z,repetitions,echo) The output info and json are the corresponding header information stored as (echoes) TODO : Currently, not all files will work, need to be more thorough when looking for echoes, acquistions, and channels. Attributes nInputs : 1 nOutputs : 3","title":"imutils.load_niftis"},{"location":"3_contributing/api_documentation/%2Bimutils/load_niftis/#imutilsload_niftis","text":"Filetype: MATLAB\u00ae function Synopsis: LOAD_NIFTIS Load a nifti acquisition from dcm2bids [niftis, info, json] = load_niftis(path) If path is a folder containing niftis, directly output niftis. If path is a folder containing acquisitions, ask the user for which acquisition. The output niftis is a 5d matlab vector stored according to (x,y,z,repetitions,echo) The output info and json are the corresponding header information stored as (echoes) TODO : Currently, not all files will work, need to be more thorough when looking for echoes, acquistions, and channels.","title":"imutils.load_niftis"},{"location":"3_contributing/api_documentation/%2Bimutils/load_niftis/#attributes","text":"nInputs : 1 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/%2Bimutils/read_nii/","text":"imutils.read_nii Filetype: MATLAB\u00ae function Synopsis: READ_NII Load NIfTI image, header, and (if present) the accompanying .json sidecar [img, info] = read_nii( niiFile ) [img, info, json] = read_nii( niiFile, options ) The input niiFile is the path to the NIfTI image as a string scalar or character vector. When called with 2 output arguments, the function is equivalent short-hand for info = niftiinfo( niiFile ); img = niftiread( info ) The function checks the niiFile parent-folder for the presence of a sidecar (an identically named file, but with a .json file extension). When such a file exists, the 3rd output is returned as a struct via json = jsondecode( fileread( jsonFile ) ); otherwise, json = [] . OPTIONS The function accepts an options struct of parameters (for now, only one) as a 2nd argument for which the .rescale field can be assigned: options.rescale Effect 'off' Rescaling disabled 'basic' Rescale according to nii header info 'auto' [default] Rescale and convert to physical units when possible NOTE For now, the sole effect of 'auto' is to convert Siemens raw phase images to physical units (radians), which requires converting from their original integer type (between [0,4095]) to a 32-bit \"single\" float (between [-pi,pi)). The json sidecar must be available to verify the Manufacturer and ImageType entries. Otherwise, and for all other image inputs 'auto' reverts to 'basic' . Attributes nInputs : 2 nOutputs : 3","title":"imutils.read_nii"},{"location":"3_contributing/api_documentation/%2Bimutils/read_nii/#imutilsread_nii","text":"Filetype: MATLAB\u00ae function Synopsis: READ_NII Load NIfTI image, header, and (if present) the accompanying .json sidecar [img, info] = read_nii( niiFile ) [img, info, json] = read_nii( niiFile, options ) The input niiFile is the path to the NIfTI image as a string scalar or character vector. When called with 2 output arguments, the function is equivalent short-hand for info = niftiinfo( niiFile ); img = niftiread( info ) The function checks the niiFile parent-folder for the presence of a sidecar (an identically named file, but with a .json file extension). When such a file exists, the 3rd output is returned as a struct via json = jsondecode( fileread( jsonFile ) ); otherwise, json = [] . OPTIONS The function accepts an options struct of parameters (for now, only one) as a 2nd argument for which the .rescale field can be assigned: options.rescale Effect 'off' Rescaling disabled 'basic' Rescale according to nii header info 'auto' [default] Rescale and convert to physical units when possible NOTE For now, the sole effect of 'auto' is to convert Siemens raw phase images to physical units (radians), which requires converting from their original integer type (between [0,4095]) to a 32-bit \"single\" float (between [-pi,pi)). The json sidecar must be available to verify the Manufacturer and ImageType entries. Otherwise, and for all other image inputs 'auto' reverts to 'basic' .","title":"imutils.read_nii"},{"location":"3_contributing/api_documentation/%2Bimutils/read_nii/#attributes","text":"nInputs : 2 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/","text":"ShimCom_Greg Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication for the 8-channel AC/DC neck coil ....... Usage Shims = ShimCom_Greg( ) Shims contains fields .Cmd .ComPort .Data .Params ========================================================================= ShimCom_Greg is a ShimCom subclass. ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom_Greg doc ShimCom_Greg Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimCom Properties Cmd Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom ComPort Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Data Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Params Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Specs Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Methods currenttostring Synopsis : CURRENTTOSTRING Scale current (float in amperes) to uint16, convert to string, and if the resulting length is < 5, pad with leading '0': Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, current OutputNames : current DefiningClass : ShimCom_Greg calibratedac Synopsis : CALIBRATEDAC CALIBRATEDAC Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isCalibrationSuccesful, isChannelCalibrationSuccesful DefiningClass : ShimCom_Greg sendcmd Synopsis : SENDCMD Transmits command from client to shim microcontroller Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, command OutputNames : isSendOk DefiningClass : ShimCom_Greg getallchanneloutputs Synopsis : GETALLCHANNELSOUTPUTS ChannelOutputs = GETALLCHANNELOUTPUTS( Shim ) ChannelOutputs has fields .current [units: A] .voltage [units: mV] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom_Greg getchanneloutput Synopsis : GETCHANNELOUTPUT [ChannelOutput] = getchanneloutput( Shim , [], iChannel ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, ~, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom_Greg closecomport Synopsis : CLOSECOMPORT Close serial communication port Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Greg opencomport Synopsis : OPENCOMPORT Open serial communication port & reset Arduino Board Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Greg resetallshims Synopsis : RESETALLSHIMS Shim currents reset to 0 A Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Greg setandrampallshims Synopsis : SETANDRAMPALLSHIMS [] = SETANDRAMPALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) by ramping current up over 1.0 s Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_Greg setandloadallshims Synopsis : SETANDLOADALLSHIMS [] = SETANDLOADALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_Greg setandloadshim Synopsis : SETANDLOADSHIM Set shim current (in units of Amps) for single channel [] = SETANDLOADSHIM( Shims, channelIndex, current ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iCh, current OutputNames : [N/A] DefiningClass : ShimCom_Greg getsystemheartbeat Synopsis : GETSYSTEMHEARTBEAT Check if shim system is responding. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isAckReceived DefiningClass : ShimCom_Greg ShimCom_Greg Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : Shim DefiningClass : ShimCom_Greg initializecomport Synopsis : : Initialize (RS-232) Communication Port Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom_Greg getcommands Synopsis : : Get shim system commands Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom_Greg empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom_Greg deletecomport Synopsis : (custom helper function) Shim = DELETECOMPORT( Shim ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : Shim DefiningClass : ShimCom delete Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom convertfromtwoscomplement Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom mergeints Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom splitint Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimCom_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#shimcom_greg","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication for the 8-channel AC/DC neck coil ....... Usage Shims = ShimCom_Greg( ) Shims contains fields .Cmd .ComPort .Data .Params ========================================================================= ShimCom_Greg is a ShimCom subclass. ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom_Greg doc ShimCom_Greg Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimCom","title":"ShimCom_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#cmd","text":"Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Cmd"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#comport","text":"Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"ComPort"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#data","text":"Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Data"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#params","text":"Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Params"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#specs","text":"Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Specs"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#currenttostring","text":"Synopsis : CURRENTTOSTRING Scale current (float in amperes) to uint16, convert to string, and if the resulting length is < 5, pad with leading '0': Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, current OutputNames : current DefiningClass : ShimCom_Greg","title":"currenttostring"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#calibratedac","text":"Synopsis : CALIBRATEDAC CALIBRATEDAC Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isCalibrationSuccesful, isChannelCalibrationSuccesful DefiningClass : ShimCom_Greg","title":"calibratedac"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#sendcmd","text":"Synopsis : SENDCMD Transmits command from client to shim microcontroller Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, command OutputNames : isSendOk DefiningClass : ShimCom_Greg","title":"sendcmd"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#getallchanneloutputs","text":"Synopsis : GETALLCHANNELSOUTPUTS ChannelOutputs = GETALLCHANNELOUTPUTS( Shim ) ChannelOutputs has fields .current [units: A] .voltage [units: mV] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom_Greg","title":"getallchanneloutputs"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#getchanneloutput","text":"Synopsis : GETCHANNELOUTPUT [ChannelOutput] = getchanneloutput( Shim , [], iChannel ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, ~, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom_Greg","title":"getchanneloutput"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#closecomport","text":"Synopsis : CLOSECOMPORT Close serial communication port Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Greg","title":"closecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#opencomport","text":"Synopsis : OPENCOMPORT Open serial communication port & reset Arduino Board Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Greg","title":"opencomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#resetallshims","text":"Synopsis : RESETALLSHIMS Shim currents reset to 0 A Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Greg","title":"resetallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#setandrampallshims","text":"Synopsis : SETANDRAMPALLSHIMS [] = SETANDRAMPALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) by ramping current up over 1.0 s Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_Greg","title":"setandrampallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#setandloadallshims","text":"Synopsis : SETANDLOADALLSHIMS [] = SETANDLOADALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_Greg","title":"setandloadallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#setandloadshim","text":"Synopsis : SETANDLOADSHIM Set shim current (in units of Amps) for single channel [] = SETANDLOADSHIM( Shims, channelIndex, current ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iCh, current OutputNames : [N/A] DefiningClass : ShimCom_Greg","title":"setandloadshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#getsystemheartbeat","text":"Synopsis : GETSYSTEMHEARTBEAT Check if shim system is responding. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isAckReceived DefiningClass : ShimCom_Greg","title":"getsystemheartbeat"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#shimcom_greg_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : Shim DefiningClass : ShimCom_Greg","title":"ShimCom_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#initializecomport","text":"Synopsis : : Initialize (RS-232) Communication Port Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom_Greg","title":"initializecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#getcommands","text":"Synopsis : : Get shim system commands Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom_Greg","title":"getcommands"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom_Greg","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#deletecomport","text":"Synopsis : (custom helper function) Shim = DELETECOMPORT( Shim ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : Shim DefiningClass : ShimCom","title":"deletecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#delete","text":"Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#convertfromtwoscomplement","text":"Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom","title":"convertfromtwoscomplement"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#mergeints","text":"Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom","title":"mergeints"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#splitint","text":"Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom","title":"splitint"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimCom_Greg/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/","text":"ShimOpt_Greg Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for Ac/Dc 8-channel array (c-spine shim) ShimOpt_Greg is a ShimOpt subclass. See ShimOpt documentation for usage. ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_Greg doc ShimOpt_Greg Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt Properties Field Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Model Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt ShimmedField Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt System Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Interpolant Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods optimizeshimcurrents Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Params can have the following fields .maxCorrectionPerChannel [default: determined by ShimSpecs_Greg property: .Amp.maxCurrentPerChannel] .minCorrectionPerChannel [default: -.maxCorrectionPerChannel] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_Greg ShimOpt_Greg Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt_Greg declarecalibrationparameters Synopsis : DECLARECALIBRATIONPARAMETERS Initializes parameters for shim reference map construction (aka shim calibration) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Greg assigndefaultparameters Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_PROBESPECS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Greg empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_Greg tableshim Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt optimizelarmor Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt predictshimmedriro Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt predictshimmedfield Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt predictslicewiseshim Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt computerealtimeupdate Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt getshimsupport Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt getnactivechannels Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt getshimoperator Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt gettruncationoperatorriro Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt gettruncationoperator Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt setupdateoperator Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt getvaliditymask Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt getupdateoperator Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt forwardmodelshimcorrection Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt setshimvolumeofinterestriro Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimvolumeofinterest Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimmedfield Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt setoriginalfield Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt setdccurrentoffsets Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt setcouplingcoefficients Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt calibraterealtimeupdates Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt resettoreference Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt delete Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt assessshim Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt mapdbdi Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt derivedataweights Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt parseinput Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt calibratereferencemaps Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt loadshimreferencemaps Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI copy Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimOpt_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#shimopt_greg","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for Ac/Dc 8-channel array (c-spine shim) ShimOpt_Greg is a ShimOpt subclass. See ShimOpt documentation for usage. ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_Greg doc ShimOpt_Greg Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt","title":"ShimOpt_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#field","text":"Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Field"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#model","text":"Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Model"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#shimmedfield","text":"Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"ShimmedField"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#system","text":"Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"System"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#interpolant","text":"Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Interpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#optimizeshimcurrents","text":"Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Params can have the following fields .maxCorrectionPerChannel [default: determined by ShimSpecs_Greg property: .Amp.maxCurrentPerChannel] .minCorrectionPerChannel [default: -.maxCorrectionPerChannel] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_Greg","title":"optimizeshimcurrents"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#shimopt_greg_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt_Greg","title":"ShimOpt_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#declarecalibrationparameters","text":"Synopsis : DECLARECALIBRATIONPARAMETERS Initializes parameters for shim reference map construction (aka shim calibration) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Greg","title":"declarecalibrationparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#assigndefaultparameters","text":"Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_PROBESPECS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Greg","title":"assigndefaultparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_Greg","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#tableshim","text":"Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt","title":"tableshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#optimizelarmor","text":"Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt","title":"optimizelarmor"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#predictshimmedriro","text":"Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt","title":"predictshimmedriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#predictshimmedfield","text":"Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt","title":"predictshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#predictslicewiseshim","text":"Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt","title":"predictslicewiseshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#computerealtimeupdate","text":"Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt","title":"computerealtimeupdate"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getshimsupport","text":"Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt","title":"getshimsupport"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getnactivechannels","text":"Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt","title":"getnactivechannels"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getshimoperator","text":"Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt","title":"getshimoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#gettruncationoperatorriro","text":"Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperatorriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#gettruncationoperator","text":"Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setupdateoperator","text":"Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"setupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getvaliditymask","text":"Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt","title":"getvaliditymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getupdateoperator","text":"Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt","title":"getupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#forwardmodelshimcorrection","text":"Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt","title":"forwardmodelshimcorrection"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setshimvolumeofinterestriro","text":"Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterestriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setshimvolumeofinterest","text":"Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterest"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setshimmedfield","text":"Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setoriginalfield","text":"Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt","title":"setoriginalfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setdccurrentoffsets","text":"Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setdccurrentoffsets"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setcouplingcoefficients","text":"Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setcouplingcoefficients"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#calibraterealtimeupdates","text":"Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt","title":"calibraterealtimeupdates"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#resettoreference","text":"Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"resettoreference"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#delete","text":"Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#assessshim","text":"Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt","title":"assessshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#mapdbdi","text":"Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"mapdbdi"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#derivedataweights","text":"Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt","title":"derivedataweights"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#parseinput","text":"Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt","title":"parseinput"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#calibratereferencemaps","text":"Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"calibratereferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#loadshimreferencemaps","text":"Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt","title":"loadshimreferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#copy","text":"Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI","title":"copy"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimOpt_Greg/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/","text":"ShimSpecs_Greg Filetype: MATLAB\u00ae classdef Synopsis: Shim System Specifications for the 8ch. AC/DC 3T neck coil Specs = ShimSpecs_Greg( ) Specs contains fields .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Adc relating to analog-to-digital conversion .Dac relating to digital-to-analog conversion __ETC___ See also ShimSpecs Documentation for ShimSpecs_Greg doc ShimSpecs_Greg Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs Properties Adc Synopsis: ShimSpecs_Greg/Adc is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs_Greg Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs_Greg Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_Greg empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Greg","title":"ShimSpecs_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#shimspecs_greg","text":"Filetype: MATLAB\u00ae classdef Synopsis: Shim System Specifications for the 8ch. AC/DC 3T neck coil Specs = ShimSpecs_Greg( ) Specs contains fields .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Adc relating to analog-to-digital conversion .Dac relating to digital-to-analog conversion __ETC___ See also ShimSpecs Documentation for ShimSpecs_Greg doc ShimSpecs_Greg Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs","title":"ShimSpecs_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#adc","text":"Synopsis: ShimSpecs_Greg/Adc is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs_Greg","title":"Adc"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#shimspecs_greg_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_Greg","title":"ShimSpecs_Greg"},{"location":"3_contributing/api_documentation/Coils/Shim_Greg/ShimSpecs_Greg/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Greg","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/","text":"ShimCom_Rriyan Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication for RRI system ....... Description SHIMCOMRRI is responsible for all direct communication with the shim system (MXD & DSU). Declaration of a ShimComRri object immediately opens a serial (Com) port. ....... Usage Shims = ShimComRri( ) Shims contains fields .Cmd .ComPort .Data .Params ========================================================================= Notes MXD and DSU commands are listed in the RRI Hex Protocol Specification guide: 9700052-0000 HexProtocolSpecification_REV-G Large portions of the following code are effectively a translation, into MATLAB, of the VB source code for \"Demo DSU Host Software ver. 2.00\" courtesy of Resonance Research, Inc. For a primer on RS-232 communication in Matlab see http://www.mathworks.com/help/matlab/matlab_external/overview-of-the-serial-port.html Part of series of classes pertaining to shimming: ProbeTracking ShimCal ShimCom ShimEval ShimOpt ShimSpecs ShimTest ShimUse ShimComRri is a ShimCom subclass. ========================================================================= Updated::20161121::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom_Rriyan doc ShimCom_Rriyan Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimCom Properties Cmd Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom ComPort Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Data Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Params Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Specs Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Methods deletecomport Synopsis : (custom helper function) Shims = DELETECOMPORT( Shims ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : Shims DefiningClass : ShimCom_Rriyan delete Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Rriyan testwave Synopsis : (DSU cmd 0x21) [] = TESTWAVE( Shims, channelIndex, isOn ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) isOn : true (1) OR false (0) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, isOn OutputNames : [N/A] DefiningClass : ShimCom_Rriyan getchannelmatrixinterconnection Synopsis : (DSU cmd 0xFB) interconnections = GETMATRIXINTERCONNECTION( Shims, channelIndex ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel OutputNames : interconnections DefiningClass : ShimCom_Rriyan setmatrixinterconnectiontoself Synopsis : (DSU cmd 0x20) [] = SETMATRIXINTERCONNECTIONTOSELF( Shims, channelIndex, slotIndex ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) slotIndex : [time constant module 1-4]: 0x00 (no connection), 0x01 (first module), 0x02 (second), 0x04 (third), 0x08 (fourth), 0x09 (first and fourth) etc. (See corresponding entry in Hex Communication manual) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, iSlot OutputNames : [N/A] DefiningClass : ShimCom_Rriyan setslice Synopsis : (DSU cmd 0xD0) [] = SETSLICE( Shims, channelIndex, sliceIndex, sliceIntensity ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) sliceIndex : number between 1 and 1000 percentSliceIntensity : number between -100 and 100 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, iSlice, percentSliceIntensity OutputNames : [N/A] DefiningClass : ShimCom_Rriyan getslice Synopsis : (DSU cmd 0xE0) percentSliceIntensity = GETSLICE( Shims, channelIndex, sliceIndex ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) sliceIndex : number between 1 and 1000 percentSliceIntensity : number between -100 and 100 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, iSlice OutputNames : percentSliceIntensity DefiningClass : ShimCom_Rriyan getchanneloutput Synopsis : (MXD cmd 0x47) ChannelOutput = getchanneloutput( Shims, bankIndex, channelIndex ) ChannelOutput contains fields .current [in amps] .voltage [in volts] .power [in Watts] .disspitatedPower [in Watts] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom_Rriyan getchannellongstatus Synopsis : (MXD cmd 0x45) ChannelStatus = getchannellongstatus( Shims, bankIndex, channelIndex ) ChannelStatus contains fields .current [in amps] .voltage [in volts] .power [in Watts] .dissipatedPower [in Watts] .dacInputVoltage [in volts] .auxiliaryInputVoltage [in volts] .onOff [0=Off, 1=On] .auxiliaryEnable [0=Off, 1=On] .faults [see HEX protocol] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel OutputNames : ChannelStatus DefiningClass : ShimCom_Rriyan setchannelbuffer Synopsis : *INVALID? SETCHANNELBUFFER *INVALID? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel, current OutputNames : [N/A] DefiningClass : ShimCom_Rriyan setandloadshim Synopsis : (MXD cmd 0x44 || 0x54) Set shim current (in amps) for single channel [] = SETANDLOADSHIM( Shims, channelIndexGlobal, current ) [] = SETANDLOADSHIM( Shims, bankIndex, channelIndexByBank, current ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, varargin OutputNames : [N/A] DefiningClass : ShimCom_Rriyan getsystemcurrenttime Synopsis : (MXD cmd 0x2C) SystemTime = GETSYSTEMCURRENTTIME( Shims ) SystemTime has fields .year .month .day .hour .minute .second Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : SystemTime DefiningClass : ShimCom_Rriyan getallchanneloutputs Synopsis : GETALLCHANNELSOUTPUTS (custom cmd) ChannelOutputs = GETALLCHANNELOUTPUTS( Shim ) ChannelOutputs has fields .current [amperes] .voltage [volts] .power [watts] .dissipatedPower [watts] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom_Rriyan setandloadallshims Synopsis : (custom cmd) Sets shim buffers (MXD cmd 0x22) and loads the settings (MXD cmd 0x23). [] = SETANDLOADALLSHIMS( Shim, currents ) numel(currents) == Shims.Specs.nChannels || Shims.Specs.nActiveChannels i.e. currents vector is either length 24 or 32 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_Rriyan setsystemcurrenttime Synopsis : (MXD cmd 0x2B) [] = SETSYSTEMCURRENTTIME( Shims, SystemTime ) SystemTime has fields .year .month .day .hour .minute .second Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, SystemTime OutputNames : [N/A] DefiningClass : ShimCom_Rriyan getsysteminformation Synopsis : (MXD cmd 0x29) SystemInfo = GETSYSTEMINFORMATION( Shims ) SystemInfo has fields .SoftwareVersion .majorRevision .minorRevision .SystemModel .name .numberOfChannels .serialNumber Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : SystemInfo DefiningClass : ShimCom_Rriyan getbanklongstatus Synopsis : (MXD cmd 0x26) BankStatus = GETBANKLONGSTATUS( Shims, bankIndex ) bankIndex = 0, 1, 2, or 3 BankStatus has fields .highVoltagePositiveRail [in V] .highVoltageNegativeRail [in V] .lowVoltagePositiveRail [in V] .lowVoltageNegativeRail [in V] .heatsinkTemperature [in degrees C] .channelsWithFaults [0-7 bitwise: ch0, ch1, ch2,... ch7] .faults [See HEX protocol document] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank OutputNames : BankStatus DefiningClass : ShimCom_Rriyan getsystemlongstatus Synopsis : (MXD cmd 0x25) SystemStatus = GETSYSTEMLONGSTATUS( Shims ) SystemStatus has fields .totalOutputPower [in W] .onOff [1 - ON, 0 - OFF] .globlErrorRegister [0-7 bitwise: Error on a bank, Bank is missing, Bank communication error, TBD, TBD, TBD, Interlock Error, Fatal Error Requiring Shutdown Present)] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : SystemStatus DefiningClass : ShimCom_Rriyan setloadallshims Synopsis : (MXD cmd 0x23) Loads buffered shim settings. [] = SETLOADALLSHIMS( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan setallshims Synopsis : (MXD cmd: 0x22) SETALLSHIMS( Shims, currents ) Sets all shims based on [nChannel x 1] current vector (in amps) NB: for our system, currents vector has 32 entries (=total # amplifier channels, including inactive channels). Currents for inactive channels should be zero. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, currents OutputNames : [N/A] DefiningClass : ShimCom_Rriyan setpoweroff Synopsis : (MXD cmd 0x21) [] = SETPOWEROFF( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan setpoweron Synopsis : (MXD cmd 0x20) [] = SETPOWERON( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan getchannelthresholddata Synopsis : (NACK? MXD cmd 0x16) ThresholdData = getchannelthresholddata( Shims, bankIndex, channelIndex ) ThresholdData contains fields .maxControlVoltage [in volts] .maxOutputCurrent [in amps] .maxOutputPower [in Watts] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel OutputNames : ThresholdData DefiningClass : ShimCom_Rriyan resetallshims Synopsis : (Custom cmd) Reset all shims to 0 A. [] = RESETALLSHIMS( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Rriyan clearsystemerrors Synopsis : (MXD cmd 0x0A) [] = CLEARSYSTEMERRORS( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan getsystemheartbeat Synopsis : (MXD cmd 0x09) Queries MXD and returns 'ACK' if responsive Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : isAckReceived DefiningClass : ShimCom_Rriyan getbankadccalibrationdata Synopsis : (*INVALID? MXD cmd 0x02) [offset, slope] = GETBANKADCCALIBRATIONDATA( Shims, bankIndex ) bankIndex = 0, 1, 2, or 3 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank OutputNames : offset, slope DefiningClass : ShimCom_Rriyan ShimCom_Rriyan Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shims DefiningClass : ShimCom_Rriyan ampstodac Synopsis : AMPSTODAC Wraps a current value in Amperes to a count within the DAC's range. dacCount = AMPSTODAC( Shims, current ) Note: Beware of clipping: Shims.Specs.Dac.maxCurrent = 5 A % [By default] if current >= Shims.Specs.Dac.maxCurrent, dacCount = 32767 ; elseif current <= Shims.Specs.Dac.maxCurrent, dacCount = -32768 ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims, current OutputNames : dacCount DefiningClass : ShimCom_Rriyan writetomachine Synopsis : WRITETOMACHINE Write to machine (and read back the system response) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims OutputNames : Shims, isMsgRead DefiningClass : ShimCom_Rriyan sendcmd Synopsis : transmits a command from client to MXD or DSU systems order of output: sync -> lng -> cmd -> outputData -> C0 -> C1 ....... Description sync sync command for MXD (=='0x02') or DSU (=='0xC0') lng length in bytes of entire message to be transmitted (including sync, lng, cmd, ,outputData, crc) cmd system command in hex format outputData formated according to command (see RRI manual) ....... Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims OutputNames : Shims, isSendOk DefiningClass : ShimCom_Rriyan isackreceived Synopsis : ISACKRECEIVED Checks data returned from master board for 'ACK','NACK','INVALID', or 'Wrong' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims OutputNames : isAckReceived, systemResponse DefiningClass : ShimCom_Rriyan getchanneltobankkey Synopsis : (custom helper function) Maps the spine coil channels (1-24) to the corresponding MXD banks (0-3) & channels (1-32) ....... Syntax X = GETCHANNELTOBANKKEY(); ....... Description E.g. (top 6 rows of output) >> getchanneltobankkey() Shim Coil || Bank || Channel || Channel || (by bank) (global) 1 0 5 6 2 0 0 1 3 0 6 7 4 1 0 9 5 0 1 2 6 0 2 3 ... ....... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : channelToBankKey DefiningClass : ShimCom_Rriyan mapcurrentstomxd Synopsis : (custom helper function) There are only 24 active channels in the 32 channel amplifier. MAPCURRENTSTOMXD takes a 24-element vector and rearranges the elements into a 32-element vector where indices corresponding to inactive channels are 0 and the original 1-24 channel values are arranged according to their global MXD channel index. currentsOut = MAPCURRENTSTOMXD( currentsIn ) e.g. Insert active channel indices into corresponding cells of full currents vector (i.e. 32 channels, including inactive channels) currentsOut = ShimCom_Rriyan.mapcurrentstomxd( [1 : 24] ) currentsOut = 2 5 6 9 10 1 3 0 4 7 8 11 12 0 0 0 14 17 18 21 22 13 15 0 16 19 20 23 24 0 0 0 Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : currents OutputNames : currentsOut DefiningClass : ShimCom_Rriyan getchanneltobankmatrices Synopsis : (custom helper function) [X0,X1,X2,X3] = GETCHANNELTOBANKMATRICES() Returns four [nChannelsPerBank x 24] matrices that when applied to the [24 x 1] vector of shim currents will each return a truncated version of the vector corresponding strictly to the channels belonging to amplifier banks 0 through 3. Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : X0, X1, X2, X3 DefiningClass : ShimCom_Rriyan initializecomport Synopsis : Initialize (RS-232) Communication Port if ismac portName = '/dev/tty.usbserial' ; elseif isunix portName = '/dev/ttyS0' ; elseif ispc portName = 'COM4' ; else error('Wtf kind of computer is u running?') end Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom_Rriyan getcommands Synopsis : GETCOMMANDS [] = GETCOMMANDS( ) System commands (as Hexadecimal strings) I. for the MXD II. for DSU Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom_Rriyan calculatecrc Synopsis : CALCULATECRC uint16 crc = CALCULATECRC( uint8 dataMsg ) ; dataMsg integer array crc integer Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : dataMsg OutputNames : crc DefiningClass : ShimCom_Rriyan appendcrc Synopsis : APPENDCRC uint8 msg = APPENDCRC( uint8 msg, uint16 crc ) appendedMsg = APPENDCRC( msg, crc ) adds the 2 (low followed by high) CRC bytes to the end of 'msg' Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : dataMsg, crc OutputNames : dataMsg DefiningClass : ShimCom_Rriyan empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom_Rriyan convertfromtwoscomplement Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom mergeints Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom splitint Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimCom_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#shimcom_rriyan","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication for RRI system ....... Description SHIMCOMRRI is responsible for all direct communication with the shim system (MXD & DSU). Declaration of a ShimComRri object immediately opens a serial (Com) port. ....... Usage Shims = ShimComRri( ) Shims contains fields .Cmd .ComPort .Data .Params ========================================================================= Notes MXD and DSU commands are listed in the RRI Hex Protocol Specification guide: 9700052-0000 HexProtocolSpecification_REV-G Large portions of the following code are effectively a translation, into MATLAB, of the VB source code for \"Demo DSU Host Software ver. 2.00\" courtesy of Resonance Research, Inc. For a primer on RS-232 communication in Matlab see http://www.mathworks.com/help/matlab/matlab_external/overview-of-the-serial-port.html Part of series of classes pertaining to shimming: ProbeTracking ShimCal ShimCom ShimEval ShimOpt ShimSpecs ShimTest ShimUse ShimComRri is a ShimCom subclass. ========================================================================= Updated::20161121::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom_Rriyan doc ShimCom_Rriyan Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimCom","title":"ShimCom_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#cmd","text":"Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Cmd"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#comport","text":"Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"ComPort"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#data","text":"Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Data"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#params","text":"Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Params"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#specs","text":"Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Specs"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#deletecomport","text":"Synopsis : (custom helper function) Shims = DELETECOMPORT( Shims ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : Shims DefiningClass : ShimCom_Rriyan","title":"deletecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#delete","text":"Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#testwave","text":"Synopsis : (DSU cmd 0x21) [] = TESTWAVE( Shims, channelIndex, isOn ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) isOn : true (1) OR false (0) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, isOn OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"testwave"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getchannelmatrixinterconnection","text":"Synopsis : (DSU cmd 0xFB) interconnections = GETMATRIXINTERCONNECTION( Shims, channelIndex ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel OutputNames : interconnections DefiningClass : ShimCom_Rriyan","title":"getchannelmatrixinterconnection"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setmatrixinterconnectiontoself","text":"Synopsis : (DSU cmd 0x20) [] = SETMATRIXINTERCONNECTIONTOSELF( Shims, channelIndex, slotIndex ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) slotIndex : [time constant module 1-4]: 0x00 (no connection), 0x01 (first module), 0x02 (second), 0x04 (third), 0x08 (fourth), 0x09 (first and fourth) etc. (See corresponding entry in Hex Communication manual) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, iSlot OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setmatrixinterconnectiontoself"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setslice","text":"Synopsis : (DSU cmd 0xD0) [] = SETSLICE( Shims, channelIndex, sliceIndex, sliceIntensity ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) sliceIndex : number between 1 and 1000 percentSliceIntensity : number between -100 and 100 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, iSlice, percentSliceIntensity OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setslice"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getslice","text":"Synopsis : (DSU cmd 0xE0) percentSliceIntensity = GETSLICE( Shims, channelIndex, sliceIndex ) channelIndex : number between 1 to 32 (see ShimCom_Rriyan.getchanneltobankkey) sliceIndex : number between 1 and 1000 percentSliceIntensity : number between -100 and 100 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iChannel, iSlice OutputNames : percentSliceIntensity DefiningClass : ShimCom_Rriyan","title":"getslice"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getchanneloutput","text":"Synopsis : (MXD cmd 0x47) ChannelOutput = getchanneloutput( Shims, bankIndex, channelIndex ) ChannelOutput contains fields .current [in amps] .voltage [in volts] .power [in Watts] .disspitatedPower [in Watts] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom_Rriyan","title":"getchanneloutput"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getchannellongstatus","text":"Synopsis : (MXD cmd 0x45) ChannelStatus = getchannellongstatus( Shims, bankIndex, channelIndex ) ChannelStatus contains fields .current [in amps] .voltage [in volts] .power [in Watts] .dissipatedPower [in Watts] .dacInputVoltage [in volts] .auxiliaryInputVoltage [in volts] .onOff [0=Off, 1=On] .auxiliaryEnable [0=Off, 1=On] .faults [see HEX protocol] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel OutputNames : ChannelStatus DefiningClass : ShimCom_Rriyan","title":"getchannellongstatus"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setchannelbuffer","text":"Synopsis : *INVALID? SETCHANNELBUFFER *INVALID? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel, current OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setchannelbuffer"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setandloadshim","text":"Synopsis : (MXD cmd 0x44 || 0x54) Set shim current (in amps) for single channel [] = SETANDLOADSHIM( Shims, channelIndexGlobal, current ) [] = SETANDLOADSHIM( Shims, bankIndex, channelIndexByBank, current ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, varargin OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setandloadshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getsystemcurrenttime","text":"Synopsis : (MXD cmd 0x2C) SystemTime = GETSYSTEMCURRENTTIME( Shims ) SystemTime has fields .year .month .day .hour .minute .second Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : SystemTime DefiningClass : ShimCom_Rriyan","title":"getsystemcurrenttime"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getallchanneloutputs","text":"Synopsis : GETALLCHANNELSOUTPUTS (custom cmd) ChannelOutputs = GETALLCHANNELOUTPUTS( Shim ) ChannelOutputs has fields .current [amperes] .voltage [volts] .power [watts] .dissipatedPower [watts] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom_Rriyan","title":"getallchanneloutputs"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setandloadallshims","text":"Synopsis : (custom cmd) Sets shim buffers (MXD cmd 0x22) and loads the settings (MXD cmd 0x23). [] = SETANDLOADALLSHIMS( Shim, currents ) numel(currents) == Shims.Specs.nChannels || Shims.Specs.nActiveChannels i.e. currents vector is either length 24 or 32 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setandloadallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setsystemcurrenttime","text":"Synopsis : (MXD cmd 0x2B) [] = SETSYSTEMCURRENTTIME( Shims, SystemTime ) SystemTime has fields .year .month .day .hour .minute .second Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, SystemTime OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setsystemcurrenttime"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getsysteminformation","text":"Synopsis : (MXD cmd 0x29) SystemInfo = GETSYSTEMINFORMATION( Shims ) SystemInfo has fields .SoftwareVersion .majorRevision .minorRevision .SystemModel .name .numberOfChannels .serialNumber Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : SystemInfo DefiningClass : ShimCom_Rriyan","title":"getsysteminformation"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getbanklongstatus","text":"Synopsis : (MXD cmd 0x26) BankStatus = GETBANKLONGSTATUS( Shims, bankIndex ) bankIndex = 0, 1, 2, or 3 BankStatus has fields .highVoltagePositiveRail [in V] .highVoltageNegativeRail [in V] .lowVoltagePositiveRail [in V] .lowVoltageNegativeRail [in V] .heatsinkTemperature [in degrees C] .channelsWithFaults [0-7 bitwise: ch0, ch1, ch2,... ch7] .faults [See HEX protocol document] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank OutputNames : BankStatus DefiningClass : ShimCom_Rriyan","title":"getbanklongstatus"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getsystemlongstatus","text":"Synopsis : (MXD cmd 0x25) SystemStatus = GETSYSTEMLONGSTATUS( Shims ) SystemStatus has fields .totalOutputPower [in W] .onOff [1 - ON, 0 - OFF] .globlErrorRegister [0-7 bitwise: Error on a bank, Bank is missing, Bank communication error, TBD, TBD, TBD, Interlock Error, Fatal Error Requiring Shutdown Present)] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : SystemStatus DefiningClass : ShimCom_Rriyan","title":"getsystemlongstatus"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setloadallshims","text":"Synopsis : (MXD cmd 0x23) Loads buffered shim settings. [] = SETLOADALLSHIMS( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setloadallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setallshims","text":"Synopsis : (MXD cmd: 0x22) SETALLSHIMS( Shims, currents ) Sets all shims based on [nChannel x 1] current vector (in amps) NB: for our system, currents vector has 32 entries (=total # amplifier channels, including inactive channels). Currents for inactive channels should be zero. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, currents OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setpoweroff","text":"Synopsis : (MXD cmd 0x21) [] = SETPOWEROFF( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setpoweroff"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setpoweron","text":"Synopsis : (MXD cmd 0x20) [] = SETPOWERON( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"setpoweron"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getchannelthresholddata","text":"Synopsis : (NACK? MXD cmd 0x16) ThresholdData = getchannelthresholddata( Shims, bankIndex, channelIndex ) ThresholdData contains fields .maxControlVoltage [in volts] .maxOutputCurrent [in amps] .maxOutputPower [in Watts] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank, iChannel OutputNames : ThresholdData DefiningClass : ShimCom_Rriyan","title":"getchannelthresholddata"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#resetallshims","text":"Synopsis : (Custom cmd) Reset all shims to 0 A. [] = RESETALLSHIMS( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"resetallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#clearsystemerrors","text":"Synopsis : (MXD cmd 0x0A) [] = CLEARSYSTEMERRORS( Shims ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : [N/A] DefiningClass : ShimCom_Rriyan","title":"clearsystemerrors"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getsystemheartbeat","text":"Synopsis : (MXD cmd 0x09) Queries MXD and returns 'ACK' if responsive Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims OutputNames : isAckReceived DefiningClass : ShimCom_Rriyan","title":"getsystemheartbeat"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getbankadccalibrationdata","text":"Synopsis : (*INVALID? MXD cmd 0x02) [offset, slope] = GETBANKADCCALIBRATIONDATA( Shims, bankIndex ) bankIndex = 0, 1, 2, or 3 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shims, iBank OutputNames : offset, slope DefiningClass : ShimCom_Rriyan","title":"getbankadccalibrationdata"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#shimcom_rriyan_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shims DefiningClass : ShimCom_Rriyan","title":"ShimCom_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#ampstodac","text":"Synopsis : AMPSTODAC Wraps a current value in Amperes to a count within the DAC's range. dacCount = AMPSTODAC( Shims, current ) Note: Beware of clipping: Shims.Specs.Dac.maxCurrent = 5 A % [By default] if current >= Shims.Specs.Dac.maxCurrent, dacCount = 32767 ; elseif current <= Shims.Specs.Dac.maxCurrent, dacCount = -32768 ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims, current OutputNames : dacCount DefiningClass : ShimCom_Rriyan","title":"ampstodac"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#writetomachine","text":"Synopsis : WRITETOMACHINE Write to machine (and read back the system response) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims OutputNames : Shims, isMsgRead DefiningClass : ShimCom_Rriyan","title":"writetomachine"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#sendcmd","text":"Synopsis : transmits a command from client to MXD or DSU systems order of output: sync -> lng -> cmd -> outputData -> C0 -> C1 ....... Description sync sync command for MXD (=='0x02') or DSU (=='0xC0') lng length in bytes of entire message to be transmitted (including sync, lng, cmd, ,outputData, crc) cmd system command in hex format outputData formated according to command (see RRI manual) ....... Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims OutputNames : Shims, isSendOk DefiningClass : ShimCom_Rriyan","title":"sendcmd"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#isackreceived","text":"Synopsis : ISACKRECEIVED Checks data returned from master board for 'ACK','NACK','INVALID', or 'Wrong' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Shims OutputNames : isAckReceived, systemResponse DefiningClass : ShimCom_Rriyan","title":"isackreceived"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getchanneltobankkey","text":"Synopsis : (custom helper function) Maps the spine coil channels (1-24) to the corresponding MXD banks (0-3) & channels (1-32) ....... Syntax X = GETCHANNELTOBANKKEY(); ....... Description E.g. (top 6 rows of output) >> getchanneltobankkey() Shim Coil || Bank || Channel || Channel || (by bank) (global) 1 0 5 6 2 0 0 1 3 0 6 7 4 1 0 9 5 0 1 2 6 0 2 3 ... ....... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : channelToBankKey DefiningClass : ShimCom_Rriyan","title":"getchanneltobankkey"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#mapcurrentstomxd","text":"Synopsis : (custom helper function) There are only 24 active channels in the 32 channel amplifier. MAPCURRENTSTOMXD takes a 24-element vector and rearranges the elements into a 32-element vector where indices corresponding to inactive channels are 0 and the original 1-24 channel values are arranged according to their global MXD channel index. currentsOut = MAPCURRENTSTOMXD( currentsIn ) e.g. Insert active channel indices into corresponding cells of full currents vector (i.e. 32 channels, including inactive channels) currentsOut = ShimCom_Rriyan.mapcurrentstomxd( [1 : 24] ) currentsOut = 2 5 6 9 10 1 3 0 4 7 8 11 12 0 0 0 14 17 18 21 22 13 15 0 16 19 20 23 24 0 0 0 Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : currents OutputNames : currentsOut DefiningClass : ShimCom_Rriyan","title":"mapcurrentstomxd"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getchanneltobankmatrices","text":"Synopsis : (custom helper function) [X0,X1,X2,X3] = GETCHANNELTOBANKMATRICES() Returns four [nChannelsPerBank x 24] matrices that when applied to the [24 x 1] vector of shim currents will each return a truncated version of the vector corresponding strictly to the channels belonging to amplifier banks 0 through 3. Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : X0, X1, X2, X3 DefiningClass : ShimCom_Rriyan","title":"getchanneltobankmatrices"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#initializecomport","text":"Synopsis : Initialize (RS-232) Communication Port if ismac portName = '/dev/tty.usbserial' ; elseif isunix portName = '/dev/ttyS0' ; elseif ispc portName = 'COM4' ; else error('Wtf kind of computer is u running?') end Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom_Rriyan","title":"initializecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getcommands","text":"Synopsis : GETCOMMANDS","title":"getcommands"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getcommands_1","text":"System commands (as Hexadecimal strings) I. for the MXD II. for DSU Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom_Rriyan","title":"[] = GETCOMMANDS( )"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#calculatecrc","text":"Synopsis : CALCULATECRC uint16 crc = CALCULATECRC( uint8 dataMsg ) ; dataMsg integer array crc integer Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : dataMsg OutputNames : crc DefiningClass : ShimCom_Rriyan","title":"calculatecrc"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#appendcrc","text":"Synopsis : APPENDCRC uint8 msg = APPENDCRC( uint8 msg, uint16 crc ) appendedMsg = APPENDCRC( msg, crc ) adds the 2 (low followed by high) CRC bytes to the end of 'msg' Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : dataMsg, crc OutputNames : dataMsg DefiningClass : ShimCom_Rriyan","title":"appendcrc"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom_Rriyan","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#convertfromtwoscomplement","text":"Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom","title":"convertfromtwoscomplement"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#mergeints","text":"Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom","title":"mergeints"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#splitint","text":"Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom","title":"splitint"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimCom_Rriyan/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/","text":"ShimOpt_Rriyan Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for RRI 24 channel array (aka spine shim) ShimOpt_RRIYAN is a ShimOpt subclass ========================================================================= Updated::20190528::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_Rriyan doc ShimOpt_Rriyan Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt Properties Field Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Model Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt ShimmedField Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt System Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Interpolant Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods optimizeshimcurrents Synopsis : OPTIMIZESTATICSHIMCURRENTS OPTIMIZESTATICSHIMCURRENTS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_Rriyan ShimOpt_Rriyan Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt_Rriyan declarecalibrationparameters Synopsis : DECLARECALIBRATIONPARAMETERS Initializes parameters for shim reference map construction (aka shim calibration) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Rriyan assigndefaultparameters Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_PROBESPECS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Rriyan empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_Rriyan tableshim Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt optimizelarmor Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt predictshimmedriro Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt predictshimmedfield Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt predictslicewiseshim Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt computerealtimeupdate Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt getshimsupport Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt getnactivechannels Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt getshimoperator Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt gettruncationoperatorriro Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt gettruncationoperator Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt setupdateoperator Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt getvaliditymask Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt getupdateoperator Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt forwardmodelshimcorrection Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt setshimvolumeofinterestriro Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimvolumeofinterest Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimmedfield Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt setoriginalfield Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt setdccurrentoffsets Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt setcouplingcoefficients Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt calibraterealtimeupdates Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt resettoreference Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt delete Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt assessshim Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt mapdbdi Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt derivedataweights Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt parseinput Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt calibratereferencemaps Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt loadshimreferencemaps Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI copy Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimOpt_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#shimopt_rriyan","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for RRI 24 channel array (aka spine shim) ShimOpt_RRIYAN is a ShimOpt subclass ========================================================================= Updated::20190528::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_Rriyan doc ShimOpt_Rriyan Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt","title":"ShimOpt_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#field","text":"Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Field"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#model","text":"Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Model"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#shimmedfield","text":"Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"ShimmedField"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#system","text":"Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"System"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#interpolant","text":"Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Interpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#optimizeshimcurrents","text":"Synopsis : OPTIMIZESTATICSHIMCURRENTS OPTIMIZESTATICSHIMCURRENTS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_Rriyan","title":"optimizeshimcurrents"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#shimopt_rriyan_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt_Rriyan","title":"ShimOpt_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#declarecalibrationparameters","text":"Synopsis : DECLARECALIBRATIONPARAMETERS Initializes parameters for shim reference map construction (aka shim calibration) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Rriyan","title":"declarecalibrationparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#assigndefaultparameters","text":"Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_PROBESPECS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Rriyan","title":"assigndefaultparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_Rriyan","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#tableshim","text":"Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt","title":"tableshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#optimizelarmor","text":"Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt","title":"optimizelarmor"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#predictshimmedriro","text":"Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt","title":"predictshimmedriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#predictshimmedfield","text":"Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt","title":"predictshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#predictslicewiseshim","text":"Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt","title":"predictslicewiseshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#computerealtimeupdate","text":"Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt","title":"computerealtimeupdate"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getshimsupport","text":"Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt","title":"getshimsupport"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getnactivechannels","text":"Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt","title":"getnactivechannels"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getshimoperator","text":"Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt","title":"getshimoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#gettruncationoperatorriro","text":"Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperatorriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#gettruncationoperator","text":"Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setupdateoperator","text":"Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"setupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getvaliditymask","text":"Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt","title":"getvaliditymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getupdateoperator","text":"Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt","title":"getupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#forwardmodelshimcorrection","text":"Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt","title":"forwardmodelshimcorrection"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setshimvolumeofinterestriro","text":"Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterestriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setshimvolumeofinterest","text":"Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterest"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setshimmedfield","text":"Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setoriginalfield","text":"Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt","title":"setoriginalfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setdccurrentoffsets","text":"Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setdccurrentoffsets"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setcouplingcoefficients","text":"Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setcouplingcoefficients"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#calibraterealtimeupdates","text":"Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt","title":"calibraterealtimeupdates"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#resettoreference","text":"Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"resettoreference"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#delete","text":"Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#assessshim","text":"Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt","title":"assessshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#mapdbdi","text":"Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"mapdbdi"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#derivedataweights","text":"Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt","title":"derivedataweights"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#parseinput","text":"Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt","title":"parseinput"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#calibratereferencemaps","text":"Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"calibratereferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#loadshimreferencemaps","text":"Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt","title":"loadshimreferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#copy","text":"Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI","title":"copy"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimOpt_Rriyan/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/","text":"ShimSpecs_Rriyan Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_RRIYAN Shim System Specifications for the RRI 24-channel shim array ....... Usage Specs = ShimSpecs_Rriyan( ) Specs contains fields .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Dac relating to digital-to-analog conversion ========================================================================= Part of series of classes pertaining to shimming: ProbeTracking ShimCom ShimOpt ShimSpecs ShimUse ========================================================================= Updated::20190214::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_Rriyan doc ShimSpecs_Rriyan Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs Properties Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs_Rriyan Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_Rriyan empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Rriyan","title":"ShimSpecs_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#shimspecs_rriyan","text":"Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_RRIYAN Shim System Specifications for the RRI 24-channel shim array ....... Usage Specs = ShimSpecs_Rriyan( ) Specs contains fields .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Dac relating to digital-to-analog conversion ========================================================================= Part of series of classes pertaining to shimming: ProbeTracking ShimCom ShimOpt ShimSpecs ShimUse ========================================================================= Updated::20190214::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_Rriyan doc ShimSpecs_Rriyan Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs","title":"ShimSpecs_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#shimspecs_rriyan_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_Rriyan","title":"ShimSpecs_Rriyan"},{"location":"3_contributing/api_documentation/Coils/Shim_Rriyan/ShimSpecs_Rriyan/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Rriyan","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/","text":"ShimSpecs_Prisma Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_Prisma Shim System Specifications for Siemens Prisma shims ShimSpecs_Prisma is a ShimSpecs subclass ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_Prisma doc ShimSpecs_Prisma Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs Properties Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs_Prisma Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_Prisma converttomultipole Synopsis : CONVERTTOMULTIPOLE shimValues = CONVERTTOMULTIPOLE( shimValues ) Shim values stored in MrProt (private Siemens DICOM.Hdr) are in units of DAC counts for the gradient offsets and in units of mA for the 2nd order shims. CONVERTTOMULTIPOLE uses the information given by the Siemens commandline tool AdjValidate -shim -info to convert a vector of shim settings in those units into the \"multipole\" values which are used in the Siemens GUI display (i.e. Shim3d) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : shimValues OutputNames : shimValues DefiningClass : ShimSpecs_Prisma empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Prisma","title":"ShimSpecs_Prisma"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#shimspecs_prisma","text":"Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_Prisma Shim System Specifications for Siemens Prisma shims ShimSpecs_Prisma is a ShimSpecs subclass ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_Prisma doc ShimSpecs_Prisma Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs","title":"ShimSpecs_Prisma"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#shimspecs_prisma_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_Prisma","title":"ShimSpecs_Prisma"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#converttomultipole","text":"Synopsis : CONVERTTOMULTIPOLE shimValues = CONVERTTOMULTIPOLE( shimValues ) Shim values stored in MrProt (private Siemens DICOM.Hdr) are in units of DAC counts for the gradient offsets and in units of mA for the 2nd order shims. CONVERTTOMULTIPOLE uses the information given by the Siemens commandline tool AdjValidate -shim -info to convert a vector of shim settings in those units into the \"multipole\" values which are used in the Siemens GUI display (i.e. Shim3d) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : shimValues OutputNames : shimValues DefiningClass : ShimSpecs_Prisma","title":"converttomultipole"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/ShimSpecs_Prisma/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Prisma","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/","text":"ShimSpecs_HGM_Prisma Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_HGM_Prisma Shim System Specifications for Siemens shims on Prisma at Montreal General Hospital ShimSpecs_HGM_Prisma is a ShimSpecs_Prisma subclass ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_HGM_Prisma doc ShimSpecs_HGM_Prisma Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs_Prisma Properties Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs_HGM_Prisma Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_HGM_Prisma converttomultipole Synopsis : CONVERTTOMULTIPOLE shimValues = CONVERTTOMULTIPOLE( shimValues ) Shim values stored in MrProt (private Siemens DICOM.Hdr) are in units of DAC counts for the gradient offsets and in units of mA for the 2nd order shims. CONVERTTOMULTIPOLE uses the information given by the Siemens commandline tool AdjValidate -shim -info to convert a vector of shim settings in those units into the \"multipole\" values which are used in the Siemens GUI display (i.e. Shim3d) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : shimValues OutputNames : shimValues DefiningClass : ShimSpecs_HGM_Prisma empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_HGM_Prisma","title":"ShimSpecs_HGM_Prisma"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#shimspecs_hgm_prisma","text":"Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_HGM_Prisma Shim System Specifications for Siemens shims on Prisma at Montreal General Hospital ShimSpecs_HGM_Prisma is a ShimSpecs_Prisma subclass ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_HGM_Prisma doc ShimSpecs_HGM_Prisma Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs_Prisma","title":"ShimSpecs_HGM_Prisma"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#shimspecs_hgm_prisma_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_HGM_Prisma","title":"ShimSpecs_HGM_Prisma"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#converttomultipole","text":"Synopsis : CONVERTTOMULTIPOLE shimValues = CONVERTTOMULTIPOLE( shimValues ) Shim values stored in MrProt (private Siemens DICOM.Hdr) are in units of DAC counts for the gradient offsets and in units of mA for the 2nd order shims. CONVERTTOMULTIPOLE uses the information given by the Siemens commandline tool AdjValidate -shim -info to convert a vector of shim settings in those units into the \"multipole\" values which are used in the Siemens GUI display (i.e. Shim3d) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : shimValues OutputNames : shimValues DefiningClass : ShimSpecs_HGM_Prisma","title":"converttomultipole"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_HGM_Prisma/ShimSpecs_HGM_Prisma/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_HGM_Prisma","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/","text":"ShimSpecs_IUGM_Prisma_fit Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_IUGM_Prisma_fit Shim System Specifications for Siemens shims on Prisma @UNF ShimSpecs_IUGM_Prisma_fit is a ShimSpecs_Prisma subclass ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_IUGM_Prisma_fit doc ShimSpecs_IUGM_Prisma_fit Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs_Prisma Properties Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs_IUGM_Prisma_fit Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_IUGM_Prisma_fit converttomultipole Synopsis : CONVERTTOMULTIPOLE shimValues = CONVERTTOMULTIPOLE( shimValues ) Shim values stored in MrProt (private Siemens DICOM.Hdr) are in units of DAC counts for the gradient offsets and in units of mA for the 2nd order shims. CONVERTTOMULTIPOLE uses the information given by the Siemens commandline tool AdjValidate -shim -info to convert a vector of shim settings in those units into the \"multipole\" values which are used in the Siemens GUI display (i.e. Shim3d) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : shimValues OutputNames : shimValues DefiningClass : ShimSpecs_IUGM_Prisma_fit empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_IUGM_Prisma_fit","title":"ShimSpecs_IUGM_Prisma_fit"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#shimspecs_iugm_prisma_fit","text":"Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_IUGM_Prisma_fit Shim System Specifications for Siemens shims on Prisma @UNF ShimSpecs_IUGM_Prisma_fit is a ShimSpecs_Prisma subclass ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_IUGM_Prisma_fit doc ShimSpecs_IUGM_Prisma_fit Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs_Prisma","title":"ShimSpecs_IUGM_Prisma_fit"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#shimspecs_iugm_prisma_fit_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_IUGM_Prisma_fit","title":"ShimSpecs_IUGM_Prisma_fit"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#converttomultipole","text":"Synopsis : CONVERTTOMULTIPOLE shimValues = CONVERTTOMULTIPOLE( shimValues ) Shim values stored in MrProt (private Siemens DICOM.Hdr) are in units of DAC counts for the gradient offsets and in units of mA for the 2nd order shims. CONVERTTOMULTIPOLE uses the information given by the Siemens commandline tool AdjValidate -shim -info to convert a vector of shim settings in those units into the \"multipole\" values which are used in the Siemens GUI display (i.e. Shim3d) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : shimValues OutputNames : shimValues DefiningClass : ShimSpecs_IUGM_Prisma_fit","title":"converttomultipole"},{"location":"3_contributing/api_documentation/Coils/Shim_Siemens/Shim_Prisma/Shim_IUGM_Prisma_fit/ShimSpecs_IUGM_Prisma_fit/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_IUGM_Prisma_fit","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/","text":"ShimOpt_Sim Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for a simulated coil design ShimOpt_Sim is a ShimOpt subclass. NOTE: ShimOpt_Sim was written for a specific design project: Lopez Rios et al. Integrated AC / DC coil and dipole Tx array for 7T MRI of the spinal cord. In: Proc. 27th Annu. Meet. ISMRM, Montreal, Canada, 2019. Abstr. 0220. Until now, this has been its only application! Hence, some methods are likely deprecated and others overly specific to that one project. Considerable adaptation is probably in order to render the class up-to-date (i.e. compatible with the rest of the realtime_shimming library) and properly general. Nevertheless, a few methods may be of more or less immediate + general applicability, e.g. see ShimOpt_Sim.cadtopumcin( ): A routine to reformat a text file from AutoCAD describing a set of coil geometries into PUMCIN format. ShimOpt_Sim.generatecoilbfield( ) Biot-Savart model of the coil's magnetic induction, adapted from software from Fa-Hsuan Lin ....... Contributions: Kai-Ming Lo, Resonance Research Inc: Original plot coil script The ___ function is modified from a previous function ('b1sim_dc_core()' from Jason P. Stockmann) which was itself adapted from Fa-Hsuan Lin's Biot-Savart solver software. Please cite: Fa-Hsuan Lin, \"Magnetic field by Biot-Savart's Law\" http://maki.bme.ntu.edu.tw/?page_id=333 ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_Sim doc ShimOpt_Sim Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt Properties pumcin Synopsis: ShimOpt_Sim/pumcin is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt_Sim Params Synopsis: ShimOpt_Sim/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt_Sim Field Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Model Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt ShimmedField Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt System Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Interpolant Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods generateshimreferencemaps Synopsis : GENERATESHIMREFERENCEMAPS dBz = GENERATESHIMREFERENCEMAPS( Shim, Img ) Returns the dBz, the longitudinal (z) component of the magnetic induction field due to a unit current circulating within each Shim channel. Img is a MaRdI-type reference image used to define the spatial (x-y-z) positions at which to compute dBz. NOTE Img voxels should be isotropically spaced. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Img, Params OutputNames : b1_z DefiningClass : ShimOpt_Sim setoriginalfield Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt_Sim matchcoordinatesystems Synopsis : MATCHCOORDINATESYSTEM MATCHCOORDINATESYSTEM Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : dr DefiningClass : ShimOpt_Sim getcoilcenterofmass Synopsis : - Returns the average position of a coil element centerOfMass = GETCOILCENTEROFMASS( Shim, iChannel ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iChannel OutputNames : centerOfMass DefiningClass : ShimOpt_Sim plotcoilarray Synopsis : - Opens new figure to plot coil array (wires) [] = PLOTCOILARRAY( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, isLabellingCoils OutputNames : [N/A] DefiningClass : ShimOpt_Sim getnwiresegmentsperchannel Synopsis : - Returns # of wire segments per coil element nWireSegments = GETNWIRESEGMENTSPERCHANNEL( Shim ) nWireSegmentsIthChannel = GETNWIRESEGMENTSPERCHANNEL( Shim, iChannel ) If channel index iChannel input argument is provided, the returned scalar is the number of wire segments belonging to that channel. Otherwise (nargin == 1) the returned output is a vector of the number of wire segments for each channel in the Shim array. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iChannel OutputNames : nWireSegments DefiningClass : ShimOpt_Sim getnchannels Synopsis : - Return the # of shim channels nChannels = GETNCHANNELS( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nChannels DefiningClass : ShimOpt_Sim optimizeshimcurrents Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Params can have the following fields .maxCorrectionPerChannel [default: determined by ShimSpecs_Sim property: .Amp.maxCurrentPerChannel] .minCorrectionPerChannel [default: -.maxCorrectionPerChannel] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_Sim ShimOpt_Sim Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params, Field OutputNames : Shim DefiningClass : ShimOpt_Sim getwirepattern Synopsis : GETWIREPATTERN Cycles through Shim.pumcin to define the Wires variable used by the Biot-Savart computation ShimOpt_Sim.generatecoilbfield() [ Wires ] = GETWIREPATTERN( Shim ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Shim OutputNames : Wires DefiningClass : ShimOpt_Sim assigndefaultparameters Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Sim generatecoilbfield Synopsis : - Biot-Savart model of the coil's magnetic induction [Bx, By, Bz] = GENERATECOILBFIELD(current, X, Y, Z) code adapted from Fa-Hsuan Lin's Biot-Savart solver software Please cite: Fa-Hsuan Lin, \"Magnetic field by Biot-Savart's Law\" http://maki.bme.ntu.edu.tw/?page_id=333 Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : current, X, Y, Z OutputNames : Bx, By, Bz DefiningClass : ShimOpt_Sim getchannelpumcinindices Synopsis : GETCHANNELPUMCININDICES [iChannelStart, iChannelStop] = GEtCHANNELPUMCININDICES( pumcin ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pumcin OutputNames : iChannelStart, iChannelStop DefiningClass : ShimOpt_Sim cadtopumcin Synopsis : CADTOPUMCIN Routine to reformat a text file from AutoCAD describing a set of coil geometries and into PUMCIN format. Syntax [ IXYZW ] = CADTOPUMCIN( cadListFilename ) Reads .txt file cadListFilename and outputs a PUMCIN-formatted version with the same name but with suffix .pmcn rather than .txt IXYZW is PUMCIN-formatted data: 5 columns: [ RowIndex, X-Coordinate, Y-Coordinate, Z-Coordinate, Weight ] ....... Preliminary HOW-TO: Getting XYZ coordinate tables of the original coil geometries from the original CAD model: Current method (could be improved): Open the design in AutoCAD and turn off all layers except for the coils. Change the QAFLAGS system parameter (this will change the output of the LIST command to exclude output 'Press enter to continue' lines (i.e. the entire output of LIST is printed automatically). -Enter command: QAFLAGS -Set QAFLAGS to 2 Use the LIST command to print the X-Y-Z coordinates of a coil's centerline -Desired is the list of the coordinates making up the pre-fit centerline of each coil. To be able to select the centerline specifically, the easiest way I found is just to click and delete the coil, which should reveal the centerline on its own. -With the centerlines exposed, click on one and type LIST -Copy the output (either from the screen output or the log file) following the line 'User Data: Fit Points' (e.g. should be approx ~20-30 lines like: X = 0.0 , Y = 1.6 , Z = -78.0 X = 11.8 , Y = 1.6 , Z = -76.6 -Repeat step 5 for ever coil, simply appending the copied output to the same text file (a single coil begins and ends with the same X-Y-Z coordinates, hence defining a completed 'loop') Optional/Idea for future dev: Rather than explicitly copying-and-pasting the LIST output for each coil, One can turn the AutoCAD log file on with command: LOGFILEON +Get the name of the log file with command: LOGFILENAME Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : cadListFilename, dimsToFlip OutputNames : IXYZW DefiningClass : ShimOpt_Sim empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_Sim tableshim Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt optimizelarmor Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt predictshimmedriro Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt predictshimmedfield Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt predictslicewiseshim Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt computerealtimeupdate Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt getshimsupport Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt getnactivechannels Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt getshimoperator Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt gettruncationoperatorriro Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt gettruncationoperator Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt setupdateoperator Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt getvaliditymask Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt getupdateoperator Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt forwardmodelshimcorrection Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt setshimvolumeofinterestriro Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimvolumeofinterest Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimmedfield Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt setdccurrentoffsets Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt setcouplingcoefficients Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt calibraterealtimeupdates Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt resettoreference Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt delete Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt assessshim Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt mapdbdi Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt derivedataweights Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt parseinput Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt calibratereferencemaps Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt loadshimreferencemaps Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI copy Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimOpt_Sim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#shimopt_sim","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for a simulated coil design ShimOpt_Sim is a ShimOpt subclass. NOTE: ShimOpt_Sim was written for a specific design project: Lopez Rios et al. Integrated AC / DC coil and dipole Tx array for 7T MRI of the spinal cord. In: Proc. 27th Annu. Meet. ISMRM, Montreal, Canada, 2019. Abstr. 0220. Until now, this has been its only application! Hence, some methods are likely deprecated and others overly specific to that one project. Considerable adaptation is probably in order to render the class up-to-date (i.e. compatible with the rest of the realtime_shimming library) and properly general. Nevertheless, a few methods may be of more or less immediate + general applicability, e.g. see ShimOpt_Sim.cadtopumcin( ): A routine to reformat a text file from AutoCAD describing a set of coil geometries into PUMCIN format. ShimOpt_Sim.generatecoilbfield( ) Biot-Savart model of the coil's magnetic induction, adapted from software from Fa-Hsuan Lin ....... Contributions: Kai-Ming Lo, Resonance Research Inc: Original plot coil script The ___ function is modified from a previous function ('b1sim_dc_core()' from Jason P. Stockmann) which was itself adapted from Fa-Hsuan Lin's Biot-Savart solver software. Please cite: Fa-Hsuan Lin, \"Magnetic field by Biot-Savart's Law\" http://maki.bme.ntu.edu.tw/?page_id=333 ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_Sim doc ShimOpt_Sim Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt","title":"ShimOpt_Sim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#pumcin","text":"Synopsis: ShimOpt_Sim/pumcin is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt_Sim","title":"pumcin"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#params","text":"Synopsis: ShimOpt_Sim/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt_Sim","title":"Params"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#field","text":"Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Field"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#model","text":"Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Model"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#shimmedfield","text":"Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"ShimmedField"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#system","text":"Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"System"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#interpolant","text":"Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Interpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#generateshimreferencemaps","text":"Synopsis : GENERATESHIMREFERENCEMAPS dBz = GENERATESHIMREFERENCEMAPS( Shim, Img ) Returns the dBz, the longitudinal (z) component of the magnetic induction field due to a unit current circulating within each Shim channel. Img is a MaRdI-type reference image used to define the spatial (x-y-z) positions at which to compute dBz. NOTE Img voxels should be isotropically spaced. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Img, Params OutputNames : b1_z DefiningClass : ShimOpt_Sim","title":"generateshimreferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setoriginalfield","text":"Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt_Sim","title":"setoriginalfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#matchcoordinatesystems","text":"Synopsis : MATCHCOORDINATESYSTEM MATCHCOORDINATESYSTEM Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : dr DefiningClass : ShimOpt_Sim","title":"matchcoordinatesystems"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getcoilcenterofmass","text":"Synopsis : - Returns the average position of a coil element centerOfMass = GETCOILCENTEROFMASS( Shim, iChannel ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iChannel OutputNames : centerOfMass DefiningClass : ShimOpt_Sim","title":"getcoilcenterofmass"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#plotcoilarray","text":"Synopsis : - Opens new figure to plot coil array (wires) [] = PLOTCOILARRAY( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, isLabellingCoils OutputNames : [N/A] DefiningClass : ShimOpt_Sim","title":"plotcoilarray"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getnwiresegmentsperchannel","text":"Synopsis : - Returns # of wire segments per coil element nWireSegments = GETNWIRESEGMENTSPERCHANNEL( Shim ) nWireSegmentsIthChannel = GETNWIRESEGMENTSPERCHANNEL( Shim, iChannel ) If channel index iChannel input argument is provided, the returned scalar is the number of wire segments belonging to that channel. Otherwise (nargin == 1) the returned output is a vector of the number of wire segments for each channel in the Shim array. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iChannel OutputNames : nWireSegments DefiningClass : ShimOpt_Sim","title":"getnwiresegmentsperchannel"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getnchannels","text":"Synopsis : - Return the # of shim channels nChannels = GETNCHANNELS( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nChannels DefiningClass : ShimOpt_Sim","title":"getnchannels"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#optimizeshimcurrents","text":"Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Params can have the following fields .maxCorrectionPerChannel [default: determined by ShimSpecs_Sim property: .Amp.maxCurrentPerChannel] .minCorrectionPerChannel [default: -.maxCorrectionPerChannel] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_Sim","title":"optimizeshimcurrents"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#shimopt_sim_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params, Field OutputNames : Shim DefiningClass : ShimOpt_Sim","title":"ShimOpt_Sim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getwirepattern","text":"Synopsis : GETWIREPATTERN Cycles through Shim.pumcin to define the Wires variable used by the Biot-Savart computation ShimOpt_Sim.generatecoilbfield() [ Wires ] = GETWIREPATTERN( Shim ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Shim OutputNames : Wires DefiningClass : ShimOpt_Sim","title":"getwirepattern"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#assigndefaultparameters","text":"Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_Sim","title":"assigndefaultparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#generatecoilbfield","text":"Synopsis : - Biot-Savart model of the coil's magnetic induction [Bx, By, Bz] = GENERATECOILBFIELD(current, X, Y, Z) code adapted from Fa-Hsuan Lin's Biot-Savart solver software Please cite: Fa-Hsuan Lin, \"Magnetic field by Biot-Savart's Law\" http://maki.bme.ntu.edu.tw/?page_id=333 Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : current, X, Y, Z OutputNames : Bx, By, Bz DefiningClass : ShimOpt_Sim","title":"generatecoilbfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getchannelpumcinindices","text":"Synopsis : GETCHANNELPUMCININDICES [iChannelStart, iChannelStop] = GEtCHANNELPUMCININDICES( pumcin ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pumcin OutputNames : iChannelStart, iChannelStop DefiningClass : ShimOpt_Sim","title":"getchannelpumcinindices"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#cadtopumcin","text":"Synopsis : CADTOPUMCIN Routine to reformat a text file from AutoCAD describing a set of coil geometries and into PUMCIN format. Syntax [ IXYZW ] = CADTOPUMCIN( cadListFilename ) Reads .txt file cadListFilename and outputs a PUMCIN-formatted version with the same name but with suffix .pmcn rather than .txt IXYZW is PUMCIN-formatted data: 5 columns: [ RowIndex, X-Coordinate, Y-Coordinate, Z-Coordinate, Weight ] ....... Preliminary HOW-TO: Getting XYZ coordinate tables of the original coil geometries from the original CAD model: Current method (could be improved): Open the design in AutoCAD and turn off all layers except for the coils. Change the QAFLAGS system parameter (this will change the output of the LIST command to exclude output 'Press enter to continue' lines (i.e. the entire output of LIST is printed automatically). -Enter command: QAFLAGS -Set QAFLAGS to 2 Use the LIST command to print the X-Y-Z coordinates of a coil's centerline -Desired is the list of the coordinates making up the pre-fit centerline of each coil. To be able to select the centerline specifically, the easiest way I found is just to click and delete the coil, which should reveal the centerline on its own. -With the centerlines exposed, click on one and type LIST -Copy the output (either from the screen output or the log file) following the line 'User Data: Fit Points' (e.g. should be approx ~20-30 lines like: X = 0.0 , Y = 1.6 , Z = -78.0 X = 11.8 , Y = 1.6 , Z = -76.6 -Repeat step 5 for ever coil, simply appending the copied output to the same text file (a single coil begins and ends with the same X-Y-Z coordinates, hence defining a completed 'loop') Optional/Idea for future dev: Rather than explicitly copying-and-pasting the LIST output for each coil, One can turn the AutoCAD log file on with command: LOGFILEON +Get the name of the log file with command: LOGFILENAME Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : cadListFilename, dimsToFlip OutputNames : IXYZW DefiningClass : ShimOpt_Sim","title":"cadtopumcin"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_Sim","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#tableshim","text":"Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt","title":"tableshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#optimizelarmor","text":"Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt","title":"optimizelarmor"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#predictshimmedriro","text":"Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt","title":"predictshimmedriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#predictshimmedfield","text":"Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt","title":"predictshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#predictslicewiseshim","text":"Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt","title":"predictslicewiseshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#computerealtimeupdate","text":"Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt","title":"computerealtimeupdate"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getshimsupport","text":"Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt","title":"getshimsupport"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getnactivechannels","text":"Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt","title":"getnactivechannels"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getshimoperator","text":"Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt","title":"getshimoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#gettruncationoperatorriro","text":"Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperatorriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#gettruncationoperator","text":"Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setupdateoperator","text":"Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"setupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getvaliditymask","text":"Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt","title":"getvaliditymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getupdateoperator","text":"Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt","title":"getupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#forwardmodelshimcorrection","text":"Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt","title":"forwardmodelshimcorrection"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setshimvolumeofinterestriro","text":"Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterestriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setshimvolumeofinterest","text":"Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterest"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setshimmedfield","text":"Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setdccurrentoffsets","text":"Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setdccurrentoffsets"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setcouplingcoefficients","text":"Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setcouplingcoefficients"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#calibraterealtimeupdates","text":"Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt","title":"calibraterealtimeupdates"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#resettoreference","text":"Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"resettoreference"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#delete","text":"Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#assessshim","text":"Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt","title":"assessshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#mapdbdi","text":"Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"mapdbdi"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#derivedataweights","text":"Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt","title":"derivedataweights"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#parseinput","text":"Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt","title":"parseinput"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#calibratereferencemaps","text":"Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"calibratereferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#loadshimreferencemaps","text":"Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt","title":"loadshimreferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#copy","text":"Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI","title":"copy"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_Sim/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/","text":"ShimSpecs_Sim Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_SIM Shim system specifications for a simulated coil design. Usage Specs = ShimSpecs_Sim( Specs ) This class only serves to typecast a parameters struct defined in a ShimOpt_ class (e.g. ShimOpt_SphericalHarmonics, or ShimOpt_Sim) into a \"ShimSpecs\" object given that certain functions may expect the latter as opposed to a generic struct. First used in Lopez Rios et al. Integrated AC / DC coil and dipole Tx array for 7T MRI of the spinal cord. In: Proc. 27th Annu. Meet. ISMRM, Montreal, Canada, 2019. Abstr. 0220. ShimSpecs_Sim is a ShimSpecs subclass. For more info, see ShimSpecs.m ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_Sim doc ShimSpecs_Sim Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs Properties Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs_Sim Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : Shim DefiningClass : ShimSpecs_Sim empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Sim","title":"ShimSpecs_Sim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#shimspecs_sim","text":"Filetype: MATLAB\u00ae classdef Synopsis: SHIMSPECS_SIM Shim system specifications for a simulated coil design. Usage Specs = ShimSpecs_Sim( Specs ) This class only serves to typecast a parameters struct defined in a ShimOpt_ class (e.g. ShimOpt_SphericalHarmonics, or ShimOpt_Sim) into a \"ShimSpecs\" object given that certain functions may expect the latter as opposed to a generic struct. First used in Lopez Rios et al. Integrated AC / DC coil and dipole Tx array for 7T MRI of the spinal cord. In: Proc. 27th Annu. Meet. ISMRM, Montreal, Canada, 2019. Abstr. 0220. ShimSpecs_Sim is a ShimSpecs subclass. For more info, see ShimSpecs.m ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs_Sim doc ShimSpecs_Sim Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs","title":"ShimSpecs_Sim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#shimspecs_sim_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : Shim DefiningClass : ShimSpecs_Sim","title":"ShimSpecs_Sim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimSpecs_Sim/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_Sim","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/","text":"ShimOpt_SphericalHarmonics Filetype: MATLAB\u00ae classdef Synopsis: SHIMOPTSHARMONICS - Shim optimization using spherical harmonic basis ShimOpt_SphericalHarmonics is a ShimOpt subclass. See ShimOpt documentation for general usage. ....... Usage Shim = ShimOpt_SphericalHarmonics( Field ) Shim = ShimOpt_SphericalHarmonics( Field, Params ) As for other ShimOpt objects, Field is a MaRdI-type object representing the Field to be shimmed. The only difference is the (optional) input struct Params, for which 2 (mutually exclusive) fields are configurable: Params.ordersToGenerate : default = [1:2] If set, this generates arbitary/ideal spherical harmonics. .ordersToGenerate is a linear sequence of non-negative integers specifying the orders of spherical harmonics to be generated and placed along the 4th dimension of the array Shim.img e.g. default of [1:2], Shim.img will have 8 shim terms (three 1st-order, five 2nd-order harmonics) with values defined at the voxel positions of the input Field object. For more info, See doc ShimOpt_SphericalHarmonics.generatebasisfields Params.systemName : default = [] If set to 'IUGM_Prisma_fit' or 'HGM_Prisma', the returned Shim object possesses analogous terms to the respective Prisma scanner, with identical ordering along the 4th dimension of Shim.img, i.e. increments along this dimension correspond to X, Y, Z, Z2, ZX, ZY, X2-Y2, and XY terms respectively. The difference between the resulting ShimOpt_SphericalHarmonics object and the corresponding ShimOpt_x_PrismaX object is that the shim terms of the former are *ideally* generated as opposed to empirically mapped. ....... NOTE The essential method GENERATEBASISFIELDS() is based on calc_spherical_harmonics_arb_points_cz.m by jaystock@nmr.mgh.harvard.edu ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_SphericalHarmonics doc ShimOpt_SphericalHarmonics Folders named ShimOpt_SphericalHarmonics Shim_Sim/ShimOpt_SphericalHarmonics Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt Properties Field Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Model Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt ShimmedField Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt System Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Interpolant Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods optimizeshimcurrents Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_SphericalHarmonics setoriginalfield Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field, ordersToGenerate ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, ordersToGenerate OutputNames : [N/A] DefiningClass : ShimOpt_SphericalHarmonics ShimOpt_SphericalHarmonics Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt_SphericalHarmonics generatebasisfields_siemens Synopsis : GENERATEBASISFIELDS_SIEMENS Wraps to ShimOpt_SphericalHarmonics.generatebasisfields(), reorders, and rescales the basis set to return ideal \"shim reference maps\" (in units of Hz/unit-shim) for the 1st and 2nd order spherical harmonic shims of the Siemens Prisma Usage [ basisFields ] = GENERATEBASISFIELDS_SIEMENS( X, Y, Z ) X, Y, Z are 3d arrays of the voxel positions [units: mm] at which to generate the basis functions (e.g. X,Y,Z are generally returned from MaRdI.getvoxelpositions() ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : X, Y, Z OutputNames : basisFields DefiningClass : ShimOpt_SphericalHarmonics generatebasisfields Synopsis : GENERATEBASISFIELDS Generates orthonormal spherical harmonic (SH) basis set ....... Usage [ basisFields ] = GENERATEBASISFIELDS( orders, X, Y, Z ) Returns array of SH basis fields where the 4th dimension is the order/degree index e.g. if orders = [0:2], basisFields(:,:,:,1) corresponds to the 0th order term, basisFields(:,:,:,2:4) to 1st order terms 2 -> (y) 3 -> (z) 4 -> (x) basisFields(:,:,:,5:9) to 2nd orders 5 -> (xy) 6 -> (zy) 7 -> (z2) 8 -> (zx) 9 -> (x2y2) etc. Input orders vector of non-negative integers orders to calculate (e.g. [0:3]). Typically orders is specified as 0:1:N to obtain spherical harmonics up to order N X, Y, Z 3d arrays specifying voxel coordinates at which to calculate the harmonics ....... Based on calc_spherical_harmonics_arb_points_cz.m by jaystock@nmr.mgh.harvard.edu Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : orders, X, Y, Z OutputNames : basisFields DefiningClass : ShimOpt_SphericalHarmonics assigndefaultparameters Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) DEFAULT_ORDERSTOGENERATE = [1:2] ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_SphericalHarmonics empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_SphericalHarmonics tableshim Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt optimizelarmor Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt predictshimmedriro Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt predictshimmedfield Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt predictslicewiseshim Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt computerealtimeupdate Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt getshimsupport Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt getnactivechannels Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt getshimoperator Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt gettruncationoperatorriro Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt gettruncationoperator Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt setupdateoperator Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt getvaliditymask Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt getupdateoperator Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt forwardmodelshimcorrection Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt setshimvolumeofinterestriro Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimvolumeofinterest Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimmedfield Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt setdccurrentoffsets Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt setcouplingcoefficients Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt calibraterealtimeupdates Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt resettoreference Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt delete Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt assessshim Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt mapdbdi Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt derivedataweights Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt parseinput Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt calibratereferencemaps Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt loadshimreferencemaps Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI copy Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimOpt_SphericalHarmonics"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#shimopt_sphericalharmonics","text":"Filetype: MATLAB\u00ae classdef Synopsis: SHIMOPTSHARMONICS - Shim optimization using spherical harmonic basis ShimOpt_SphericalHarmonics is a ShimOpt subclass. See ShimOpt documentation for general usage. ....... Usage Shim = ShimOpt_SphericalHarmonics( Field ) Shim = ShimOpt_SphericalHarmonics( Field, Params ) As for other ShimOpt objects, Field is a MaRdI-type object representing the Field to be shimmed. The only difference is the (optional) input struct Params, for which 2 (mutually exclusive) fields are configurable: Params.ordersToGenerate : default = [1:2] If set, this generates arbitary/ideal spherical harmonics. .ordersToGenerate is a linear sequence of non-negative integers specifying the orders of spherical harmonics to be generated and placed along the 4th dimension of the array Shim.img e.g. default of [1:2], Shim.img will have 8 shim terms (three 1st-order, five 2nd-order harmonics) with values defined at the voxel positions of the input Field object. For more info, See doc ShimOpt_SphericalHarmonics.generatebasisfields Params.systemName : default = [] If set to 'IUGM_Prisma_fit' or 'HGM_Prisma', the returned Shim object possesses analogous terms to the respective Prisma scanner, with identical ordering along the 4th dimension of Shim.img, i.e. increments along this dimension correspond to X, Y, Z, Z2, ZX, ZY, X2-Y2, and XY terms respectively. The difference between the resulting ShimOpt_SphericalHarmonics object and the corresponding ShimOpt_x_PrismaX object is that the shim terms of the former are *ideally* generated as opposed to empirically mapped. ....... NOTE The essential method GENERATEBASISFIELDS() is based on calc_spherical_harmonics_arb_points_cz.m by jaystock@nmr.mgh.harvard.edu ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_SphericalHarmonics doc ShimOpt_SphericalHarmonics Folders named ShimOpt_SphericalHarmonics Shim_Sim/ShimOpt_SphericalHarmonics Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt","title":"ShimOpt_SphericalHarmonics"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#field","text":"Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Field"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#model","text":"Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Model"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#shimmedfield","text":"Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"ShimmedField"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#system","text":"Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"System"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#interpolant","text":"Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Interpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#optimizeshimcurrents","text":"Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_SphericalHarmonics","title":"optimizeshimcurrents"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setoriginalfield","text":"Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field, ordersToGenerate ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, ordersToGenerate OutputNames : [N/A] DefiningClass : ShimOpt_SphericalHarmonics","title":"setoriginalfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#shimopt_sphericalharmonics_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt_SphericalHarmonics","title":"ShimOpt_SphericalHarmonics"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#generatebasisfields_siemens","text":"Synopsis : GENERATEBASISFIELDS_SIEMENS Wraps to ShimOpt_SphericalHarmonics.generatebasisfields(), reorders, and rescales the basis set to return ideal \"shim reference maps\" (in units of Hz/unit-shim) for the 1st and 2nd order spherical harmonic shims of the Siemens Prisma Usage [ basisFields ] = GENERATEBASISFIELDS_SIEMENS( X, Y, Z ) X, Y, Z are 3d arrays of the voxel positions [units: mm] at which to generate the basis functions (e.g. X,Y,Z are generally returned from MaRdI.getvoxelpositions() ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : X, Y, Z OutputNames : basisFields DefiningClass : ShimOpt_SphericalHarmonics","title":"generatebasisfields_siemens"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#generatebasisfields","text":"Synopsis : GENERATEBASISFIELDS Generates orthonormal spherical harmonic (SH) basis set ....... Usage [ basisFields ] = GENERATEBASISFIELDS( orders, X, Y, Z ) Returns array of SH basis fields where the 4th dimension is the order/degree index e.g. if orders = [0:2], basisFields(:,:,:,1) corresponds to the 0th order term, basisFields(:,:,:,2:4) to 1st order terms 2 -> (y) 3 -> (z) 4 -> (x) basisFields(:,:,:,5:9) to 2nd orders 5 -> (xy) 6 -> (zy) 7 -> (z2) 8 -> (zx) 9 -> (x2y2) etc. Input orders vector of non-negative integers orders to calculate (e.g. [0:3]). Typically orders is specified as 0:1:N to obtain spherical harmonics up to order N X, Y, Z 3d arrays specifying voxel coordinates at which to calculate the harmonics ....... Based on calc_spherical_harmonics_arb_points_cz.m by jaystock@nmr.mgh.harvard.edu Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : orders, X, Y, Z OutputNames : basisFields DefiningClass : ShimOpt_SphericalHarmonics","title":"generatebasisfields"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#assigndefaultparameters","text":"Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) DEFAULT_ORDERSTOGENERATE = [1:2] ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_SphericalHarmonics","title":"assigndefaultparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_SphericalHarmonics","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#tableshim","text":"Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt","title":"tableshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#optimizelarmor","text":"Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt","title":"optimizelarmor"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#predictshimmedriro","text":"Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt","title":"predictshimmedriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#predictshimmedfield","text":"Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt","title":"predictshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#predictslicewiseshim","text":"Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt","title":"predictslicewiseshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#computerealtimeupdate","text":"Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt","title":"computerealtimeupdate"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getshimsupport","text":"Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt","title":"getshimsupport"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getnactivechannels","text":"Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt","title":"getnactivechannels"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getshimoperator","text":"Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt","title":"getshimoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#gettruncationoperatorriro","text":"Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperatorriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#gettruncationoperator","text":"Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setupdateoperator","text":"Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"setupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getvaliditymask","text":"Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt","title":"getvaliditymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getupdateoperator","text":"Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt","title":"getupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#forwardmodelshimcorrection","text":"Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt","title":"forwardmodelshimcorrection"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setshimvolumeofinterestriro","text":"Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterestriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setshimvolumeofinterest","text":"Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterest"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setshimmedfield","text":"Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setdccurrentoffsets","text":"Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setdccurrentoffsets"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setcouplingcoefficients","text":"Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setcouplingcoefficients"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#calibraterealtimeupdates","text":"Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt","title":"calibraterealtimeupdates"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#resettoreference","text":"Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"resettoreference"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#delete","text":"Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#assessshim","text":"Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt","title":"assessshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#mapdbdi","text":"Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"mapdbdi"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#derivedataweights","text":"Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt","title":"derivedataweights"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#parseinput","text":"Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt","title":"parseinput"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#calibratereferencemaps","text":"Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"calibratereferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#loadshimreferencemaps","text":"Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt","title":"loadshimreferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#copy","text":"Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI","title":"copy"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Sim/ShimOpt_SphericalHarmonics/ShimOpt_SphericalHarmonics/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/","text":"ShimCom Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication ....... Description ShimCom is responsible for all direct communication with the shim system microcontoller (e.g. setting/querying shim currents). Declaration of a ShimCom object immediately opens a serial (Com) port. ....... Usage Note: ShimCom is an Abstract class, i.e. it is not 'used' in itself, rather, its subclasses (e.g. ShimOpt_Greg) are used when instantiated as objects. Shims = ShimCom( ) Shims contains fields .Cmd .ComPort .Data .output .input .Params .Specs ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom doc ShimCom Details Attribute Value Hidden false Sealed false Abstract true Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: matlab.mixin.SetGet Properties Cmd Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom ComPort Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Data Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Params Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Specs Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Methods deletecomport Synopsis : (custom helper function) Shim = DELETECOMPORT( Shim ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : Shim DefiningClass : ShimCom delete Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom ShimCom Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimCom convertfromtwoscomplement Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom mergeints Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom splitint Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom initializecomport Synopsis : Initialize (RS-232) Communication Port if ismac portName = '/dev/tty.usbserial' ; elseif isunix portName = '/dev/ttyS0' ; elseif ispc portName = 'COM4' ; else error('What kind of computer is this!?') end Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom getallchanneloutputs Synopsis : GETCHANNELOUTPUT ChannelOutput = getchanneloutput( Shim, bankIndex, channelIndex ) ChannelOutput contains fields .current [in amps] .voltage [in volts] .power [in Watts] .disspitatedPower [in Watts] ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom getchanneloutput Synopsis : RESETALLSHIMS Reset all shims to 0 A. [] = RESETALLSHIMS( Shim ) Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iBank, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom resetallshims Synopsis : SETANDLOADALLSHIMS Sets all shim buffers (in amps) and loads the settings. [] = SETANDLOADALLSHIMS( Shim, currents ) Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom setandloadallshims Synopsis : SETANDLOADSHIM Set shim current (in amps) for single channel [] = SETANDLOADSHIM( Shim, channelIndexGlobal, current ) [] = SETANDLOADSHIM( Shim, bankIndex, channelIndexByBank, current ) ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom setandloadshim Synopsis : GETSYSTEMHEARTBEAT Queries shim controller and returns TRUE if responsive Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, varargin OutputNames : [N/A] DefiningClass : ShimCom getsystemheartbeat Synopsis : GETCOMMANDS (STATIC METHOD!) Cmd = GETCOMMANDS( ) Returns struct of all available string commands, e.g., For the RRI HEX implementation... Cmd.Mxd.getSystemHeartbeat = '09' ; Cmd.Mxd.getChannelOutput = '47' ; Cmd.Mxd.setAndLoadShimByBankChannel = '44' ; Cmd.Mxd.setAndLoadShimByChannel = '54' ; etc... ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isAckReceived DefiningClass : ShimCom getcommands Synopsis : ========================================================================= ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimCom"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#shimcom","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication ....... Description ShimCom is responsible for all direct communication with the shim system microcontoller (e.g. setting/querying shim currents). Declaration of a ShimCom object immediately opens a serial (Com) port. ....... Usage Note: ShimCom is an Abstract class, i.e. it is not 'used' in itself, rather, its subclasses (e.g. ShimOpt_Greg) are used when instantiated as objects. Shims = ShimCom( ) Shims contains fields .Cmd .ComPort .Data .output .input .Params .Specs ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom doc ShimCom Details Attribute Value Hidden false Sealed false Abstract true Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: matlab.mixin.SetGet","title":"ShimCom"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#cmd","text":"Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Cmd"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#comport","text":"Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"ComPort"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#data","text":"Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Data"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#params","text":"Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Params"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#specs","text":"Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Specs"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#deletecomport","text":"Synopsis : (custom helper function) Shim = DELETECOMPORT( Shim ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : Shim DefiningClass : ShimCom","title":"deletecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#delete","text":"Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#shimcom_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimCom","title":"ShimCom"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#convertfromtwoscomplement","text":"Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom","title":"convertfromtwoscomplement"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#mergeints","text":"Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom","title":"mergeints"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#splitint","text":"Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom","title":"splitint"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#initializecomport","text":"Synopsis : Initialize (RS-232) Communication Port if ismac portName = '/dev/tty.usbserial' ; elseif isunix portName = '/dev/ttyS0' ; elseif ispc portName = 'COM4' ; else error('What kind of computer is this!?') end Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom","title":"initializecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#getallchanneloutputs","text":"Synopsis : GETCHANNELOUTPUT ChannelOutput = getchanneloutput( Shim, bankIndex, channelIndex ) ChannelOutput contains fields .current [in amps] .voltage [in volts] .power [in Watts] .disspitatedPower [in Watts] ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom","title":"getallchanneloutputs"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#getchanneloutput","text":"Synopsis : RESETALLSHIMS Reset all shims to 0 A.","title":"getchanneloutput"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#resetallshims-shim","text":"Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iBank, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom","title":"[] = RESETALLSHIMS( Shim )"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#resetallshims","text":"Synopsis : SETANDLOADALLSHIMS Sets all shim buffers (in amps) and loads the settings.","title":"resetallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#setandloadallshims-shim-currents","text":"Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom","title":"[] = SETANDLOADALLSHIMS( Shim, currents )"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#setandloadallshims","text":"Synopsis : SETANDLOADSHIM Set shim current (in amps) for single channel [] = SETANDLOADSHIM( Shim, channelIndexGlobal, current ) [] = SETANDLOADSHIM( Shim, bankIndex, channelIndexByBank, current ) ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom","title":"setandloadallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#setandloadshim","text":"Synopsis : GETSYSTEMHEARTBEAT","title":"setandloadshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#queries-shim-controller-and-returns-true-if-responsive","text":"Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, varargin OutputNames : [N/A] DefiningClass : ShimCom","title":"Queries shim controller and returns TRUE if responsive"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#getsystemheartbeat","text":"Synopsis : GETCOMMANDS (STATIC METHOD!) Cmd = GETCOMMANDS( ) Returns struct of all available string commands, e.g., For the RRI HEX implementation... Cmd.Mxd.getSystemHeartbeat = '09' ; Cmd.Mxd.getChannelOutput = '47' ; Cmd.Mxd.setAndLoadShimByBankChannel = '44' ; Cmd.Mxd.setAndLoadShimByChannel = '54' ; etc... ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isAckReceived DefiningClass : ShimCom","title":"getsystemheartbeat"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#getcommands","text":"Synopsis : ========================================================================= ========================================================================= Details Attribute Value Static false Abstract true Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom","title":"getcommands"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimCom/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/","text":"ShimOpt Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization ....... Usage Shim = ShimOpt( ) Shim = ShimOpt( Params ) Shim = ShimOpt( Params, Field ) Inputs (Optional) Field A FieldEval-type object pertaining to the field map to be targetted by shimming. Params A struct of parameters that can possess the following fields: .pathToShimReferenceMaps File path to .mat containing shim reference maps (ie basis fields) & .Hdr info Outputs Shim possesses the following properties: .img Shim reference maps .Hdr Info Re: calibration data (e.g. Hdr.MaskingImage defines the spatial support of the ref maps) .Field As defined above in Inputs. Field can be supplied as an input during ShimOpt instantiation, or, at later point by calling Shim.setoriginalfield( Field ) ; .Aux .Shim When Shim does not itself refer to the scanner shims, then .Aux is a ShimOpt object corresponding to the MRI host system. .Model .currents Optimal shim current vector (i) [units A] .field Optimal shim field from projection of i onto reference maps (Ai) [units Hz] .couplingCoefficients For realtime shimming, vector relating shim correction to respiratory state measurement (e.g. ProbeTracking.Data.p) [units: Hz/Pa (Probe), or Hz/rad (Nav) ] .dcCurrentsOffsets For realtime shimming, vector of \"y-intercept\" currents (e.g currents when ProbeTracking.Data.p = 0) [units A] .System .currents .Specs Object of a type of ShimSpecs sub-class (e.g. ShimSpecs_IUGM_Prisma_fit) ....... NOTE ShimOpt is a MaRdI subclass [ShimOpt < MaRdI] ========================================================================= Author: ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt doc ShimOpt Details Attribute Value Hidden false Sealed false Abstract true Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: MaRdI Properties Field Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Model Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt ShimmedField Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt System Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Interpolant Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods tableshim Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt optimizeshimcurrents Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Corrections.static Corrections.realtime Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt optimizelarmor Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt predictshimmedriro Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt predictshimmedfield Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt predictslicewiseshim Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt computerealtimeupdate Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt getshimsupport Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt getnactivechannels Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt getshimoperator Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt gettruncationoperatorriro Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt gettruncationoperator Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt setupdateoperator Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt getvaliditymask Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt getupdateoperator Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt forwardmodelshimcorrection Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt setshimvolumeofinterestriro Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimvolumeofinterest Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimmedfield Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt setoriginalfield Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt setdccurrentoffsets Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt setcouplingcoefficients Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt calibraterealtimeupdates Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt resettoreference Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt delete Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt assessshim Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt ShimOpt Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt mapdbdi Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt derivedataweights Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt parseinput Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt calibratereferencemaps Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt assigndefaultparameters Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_INSTITUTIONNAME = 'IUGM' ; DEFAULT_STATIONNAME = 'MRC35049' ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params, Specs OutputNames : Params DefiningClass : ShimOpt loadshimreferencemaps Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI copy Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimOpt"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#shimopt","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization ....... Usage Shim = ShimOpt( ) Shim = ShimOpt( Params ) Shim = ShimOpt( Params, Field ) Inputs (Optional) Field A FieldEval-type object pertaining to the field map to be targetted by shimming. Params A struct of parameters that can possess the following fields: .pathToShimReferenceMaps File path to .mat containing shim reference maps (ie basis fields) & .Hdr info Outputs Shim possesses the following properties: .img Shim reference maps .Hdr Info Re: calibration data (e.g. Hdr.MaskingImage defines the spatial support of the ref maps) .Field As defined above in Inputs. Field can be supplied as an input during ShimOpt instantiation, or, at later point by calling Shim.setoriginalfield( Field ) ; .Aux .Shim When Shim does not itself refer to the scanner shims, then .Aux is a ShimOpt object corresponding to the MRI host system. .Model .currents Optimal shim current vector (i) [units A] .field Optimal shim field from projection of i onto reference maps (Ai) [units Hz] .couplingCoefficients For realtime shimming, vector relating shim correction to respiratory state measurement (e.g. ProbeTracking.Data.p) [units: Hz/Pa (Probe), or Hz/rad (Nav) ] .dcCurrentsOffsets For realtime shimming, vector of \"y-intercept\" currents (e.g currents when ProbeTracking.Data.p = 0) [units A] .System .currents .Specs Object of a type of ShimSpecs sub-class (e.g. ShimSpecs_IUGM_Prisma_fit) ....... NOTE ShimOpt is a MaRdI subclass [ShimOpt < MaRdI] ========================================================================= Author: ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt doc ShimOpt Details Attribute Value Hidden false Sealed false Abstract true Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: MaRdI","title":"ShimOpt"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#field","text":"Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Field"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#model","text":"Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Model"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#shimmedfield","text":"Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"ShimmedField"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#system","text":"Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"System"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#interpolant","text":"Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Interpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#tableshim","text":"Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt","title":"tableshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#optimizeshimcurrents","text":"Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Corrections.static Corrections.realtime Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt","title":"optimizeshimcurrents"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#optimizelarmor","text":"Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt","title":"optimizelarmor"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#predictshimmedriro","text":"Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt","title":"predictshimmedriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#predictshimmedfield","text":"Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt","title":"predictshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#predictslicewiseshim","text":"Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt","title":"predictslicewiseshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#computerealtimeupdate","text":"Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt","title":"computerealtimeupdate"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getshimsupport","text":"Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt","title":"getshimsupport"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getnactivechannels","text":"Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt","title":"getnactivechannels"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getshimoperator","text":"Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt","title":"getshimoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#gettruncationoperatorriro","text":"Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperatorriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#gettruncationoperator","text":"Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setupdateoperator","text":"Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"setupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getvaliditymask","text":"Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt","title":"getvaliditymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getupdateoperator","text":"Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt","title":"getupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#forwardmodelshimcorrection","text":"Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt","title":"forwardmodelshimcorrection"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setshimvolumeofinterestriro","text":"Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterestriro"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setshimvolumeofinterest","text":"Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterest"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setshimmedfield","text":"Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setoriginalfield","text":"Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt","title":"setoriginalfield"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setdccurrentoffsets","text":"Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setdccurrentoffsets"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setcouplingcoefficients","text":"Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setcouplingcoefficients"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#calibraterealtimeupdates","text":"Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt","title":"calibraterealtimeupdates"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#resettoreference","text":"Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"resettoreference"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#delete","text":"Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#assessshim","text":"Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt","title":"assessshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#shimopt_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Shim DefiningClass : ShimOpt","title":"ShimOpt"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#mapdbdi","text":"Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"mapdbdi"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#derivedataweights","text":"Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt","title":"derivedataweights"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#parseinput","text":"Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt","title":"parseinput"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#calibratereferencemaps","text":"Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"calibratereferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#assigndefaultparameters","text":"Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_INSTITUTIONNAME = 'IUGM' ; DEFAULT_STATIONNAME = 'MRC35049' ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params, Specs OutputNames : Params DefiningClass : ShimOpt","title":"assigndefaultparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#loadshimreferencemaps","text":"Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt","title":"loadshimreferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#copy","text":"Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI","title":"copy"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimOpt/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/","text":"ShimSpecs Filetype: MATLAB\u00ae classdef Synopsis: - Shim System Specifications ....... Description ShimSpecs defines all the relevant hardware specifications of a shim system. ....... Usage Note: ShimSpecs is an Abstract class, i.e. it is not 'used' in itself, rather, its subclasses (e.g. ShimSpecs_Greg) are used when instantiated as objects. Specs = ShimSpecs( ) Specs contains fields .Id system identifiers .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Dac relating to digital-to-analog conversion ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs doc ShimSpecs Details Attribute Value Hidden false Sealed false Abstract true Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] SuperclassList : [N/A] Properties Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs","title":"ShimSpecs"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#shimspecs","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim System Specifications ....... Description ShimSpecs defines all the relevant hardware specifications of a shim system. ....... Usage Note: ShimSpecs is an Abstract class, i.e. it is not 'used' in itself, rather, its subclasses (e.g. ShimSpecs_Greg) are used when instantiated as objects. Specs = ShimSpecs( ) Specs contains fields .Id system identifiers .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Dac relating to digital-to-analog conversion ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimSpecs doc ShimSpecs Details Attribute Value Hidden false Sealed false Abstract true Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] SuperclassList : [N/A]","title":"ShimSpecs"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#shimspecs_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs","title":"ShimSpecs"},{"location":"3_contributing/api_documentation/Coils/Shim_Template/ShimSpecs/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/","text":"ShimCom_revC Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication for the 8-channel AC/DC neck coil ....... Usage Shims = ShimCom_revC( ) Shims contains fields .Cmd .ComPort .Data .Params ========================================================================= ShimCom_revC is a ShimCom subclass. ========================================================================= Updated::20181028::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom_revC doc ShimCom_revC Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimCom Properties Cmd Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom ComPort Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Data Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Params Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Specs Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom Methods currenttostring Synopsis : CURRENTTOSTRING Scale current (float in amperes) to uint16, convert to string, and if the resulting length is < 5, pad with leading '0': Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, current OutputNames : current DefiningClass : ShimCom_revC calibratedac Synopsis : CALIBRATEDAC CALIBRATEDAC Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isCalibrationSuccesful, isChannelCalibrationSuccesful DefiningClass : ShimCom_revC sendcmd Synopsis : SENDCMD Transmits command from client to shim microcontroller Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, command OutputNames : isSendOk DefiningClass : ShimCom_revC getallchanneloutputs Synopsis : GETALLCHANNELSOUTPUTS ChannelOutputs = GETALLCHANNELOUTPUTS( Shim ) ChannelOutputs has fields .current [units: A] .voltage [units: mV] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom_revC getchanneloutput Synopsis : GETCHANNELOUTPUT [ChannelOutput] = getchanneloutput( Shim , [], iChannel ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, ~, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom_revC closecomport Synopsis : CLOSECOMPORT Close serial communication port Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_revC opencomport Synopsis : OPENCOMPORT Open serial communication port & reset Arduino Board Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_revC resetallshims Synopsis : RESETALLSHIMS Shim currents reset to 0 A Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_revC setandrampallshims Synopsis : SETANDRAMPALLSHIMS [] = SETANDRAMPALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) by ramping current up over 1.0 s Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_revC setandloadallshims Synopsis : SETANDLOADALLSHIM [] = SETANDLOADALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_revC setandloadshim Synopsis : SETANDLOADSHIM Set shim current (in units of Amps) for single channel [] = SETANDLOADSHIM( Shims, channelIndex, current ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iCh, current OutputNames : [N/A] DefiningClass : ShimCom_revC getsystemheartbeat Synopsis : GETSYSTEMHEARTBEAT GETSYSTEMHEARTBEAT Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isAckReceived DefiningClass : ShimCom_revC ShimCom_revC Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : Shim DefiningClass : ShimCom_revC initializecomport Synopsis : : Initialize (RS-232) Communication Port Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom_revC getcommands Synopsis : : Get shim system commands Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom_revC empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom_revC deletecomport Synopsis : (custom helper function) Shim = DELETECOMPORT( Shim ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : Shim DefiningClass : ShimCom delete Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom convertfromtwoscomplement Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom mergeints Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom splitint Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimCom_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#shimcom_revc","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Communication for the 8-channel AC/DC neck coil ....... Usage Shims = ShimCom_revC( ) Shims contains fields .Cmd .ComPort .Data .Params ========================================================================= ShimCom_revC is a ShimCom subclass. ========================================================================= Updated::20181028::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimCom_revC doc ShimCom_revC Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimCom","title":"ShimCom_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#cmd","text":"Synopsis: ShimCom/Cmd is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Cmd"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#comport","text":"Synopsis: ShimCom/ComPort is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"ComPort"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#data","text":"Synopsis: ShimCom/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Data"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#params","text":"Synopsis: ShimCom/Params is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Params"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#specs","text":"Synopsis: ShimCom/Specs is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimCom","title":"Specs"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#currenttostring","text":"Synopsis : CURRENTTOSTRING Scale current (float in amperes) to uint16, convert to string, and if the resulting length is < 5, pad with leading '0': Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, current OutputNames : current DefiningClass : ShimCom_revC","title":"currenttostring"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#calibratedac","text":"Synopsis : CALIBRATEDAC CALIBRATEDAC Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isCalibrationSuccesful, isChannelCalibrationSuccesful DefiningClass : ShimCom_revC","title":"calibratedac"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#sendcmd","text":"Synopsis : SENDCMD Transmits command from client to shim microcontroller Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, command OutputNames : isSendOk DefiningClass : ShimCom_revC","title":"sendcmd"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#getallchanneloutputs","text":"Synopsis : GETALLCHANNELSOUTPUTS ChannelOutputs = GETALLCHANNELOUTPUTS( Shim ) ChannelOutputs has fields .current [units: A] .voltage [units: mV] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : ChannelOutputs DefiningClass : ShimCom_revC","title":"getallchanneloutputs"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#getchanneloutput","text":"Synopsis : GETCHANNELOUTPUT [ChannelOutput] = getchanneloutput( Shim , [], iChannel ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, ~, iChannel OutputNames : ChannelOutput DefiningClass : ShimCom_revC","title":"getchanneloutput"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#closecomport","text":"Synopsis : CLOSECOMPORT Close serial communication port Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_revC","title":"closecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#opencomport","text":"Synopsis : OPENCOMPORT Open serial communication port & reset Arduino Board Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_revC","title":"opencomport"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#resetallshims","text":"Synopsis : RESETALLSHIMS Shim currents reset to 0 A Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom_revC","title":"resetallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#setandrampallshims","text":"Synopsis : SETANDRAMPALLSHIMS [] = SETANDRAMPALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) by ramping current up over 1.0 s Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_revC","title":"setandrampallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#setandloadallshims","text":"Synopsis : SETANDLOADALLSHIM [] = SETANDLOADALLSHIMS( Shim, currents ) Update all channels with currents (8-element vector w/units in A) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currents OutputNames : [N/A] DefiningClass : ShimCom_revC","title":"setandloadallshims"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#setandloadshim","text":"Synopsis : SETANDLOADSHIM Set shim current (in units of Amps) for single channel [] = SETANDLOADSHIM( Shims, channelIndex, current ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, iCh, current OutputNames : [N/A] DefiningClass : ShimCom_revC","title":"setandloadshim"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#getsystemheartbeat","text":"Synopsis : GETSYSTEMHEARTBEAT GETSYSTEMHEARTBEAT Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : isAckReceived DefiningClass : ShimCom_revC","title":"getsystemheartbeat"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#shimcom_revc_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : Shim DefiningClass : ShimCom_revC","title":"ShimCom_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#initializecomport","text":"Synopsis : : Initialize (RS-232) Communication Port Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Specs OutputNames : ComPort DefiningClass : ShimCom_revC","title":"initializecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#getcommands","text":"Synopsis : : Get shim system commands Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Cmd DefiningClass : ShimCom_revC","title":"getcommands"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimCom_revC","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#deletecomport","text":"Synopsis : (custom helper function) Shim = DELETECOMPORT( Shim ) Correct way to delete and clear the serial port object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : Shim DefiningClass : ShimCom","title":"deletecomport"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#delete","text":"Synopsis : (custom helper function) DELETE( Shim ) Destructor. Calls Shim.deletecomport( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimCom","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#convertfromtwoscomplement","text":"Synopsis : CONVERTFROMTWOSCOMPLEMENT int16 z = CONVERTFROMTWOSCOMPLEMENT( uint8 z ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : zUInt OutputNames : z DefiningClass : ShimCom","title":"convertfromtwoscomplement"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#mergeints","text":"Synopsis : MERGEINTS int16 z = MERGEINTS( uint8 highByte, uint8 lowByte, isSigned ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : highByte, lowByte, isSigned OutputNames : z DefiningClass : ShimCom","title":"mergeints"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#splitint","text":"Synopsis : SPLITINT [lowByte, highByte] = SPLITINT( int16 z ) if z is positive z = (2^8)*highByte + lowByte ; else if z is in two's complement ... Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : z OutputNames : lowByte, highByte DefiningClass : ShimCom","title":"splitint"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimCom_revC/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/","text":"ShimOpt_revC Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for Ac/Dc 8 channel array (cervical spine shim) ShimOpt_revC is a ShimOpt subclass ========================================================================= Updated::20180726::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_revC doc ShimOpt_revC Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt Properties Field Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Model Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt ShimmedField Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt System Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt Interpolant Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods optimizeshimcurrents Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Params can have the following fields .maxCorrectionPerChannel [default: determined by ShimSpecs_revC property: .Amp.maxCurrentPerChannel] .minCorrectionPerChannel [default: -.maxCorrectionPerChannel] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_revC ShimOpt_revC Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params, Field OutputNames : Shim DefiningClass : ShimOpt_revC declarecalibrationparameters Synopsis : DECLARECALIBRATIONPARAMETERS Initializes parameters for shim reference map construction (aka shim calibration) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_revC assigndefaultparameters Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_PROBESPECS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_revC empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_revC tableshim Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt optimizelarmor Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt predictshimmedriro Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt predictshimmedfield Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt predictslicewiseshim Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt computerealtimeupdate Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt getshimsupport Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt getnactivechannels Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt getshimoperator Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt gettruncationoperatorriro Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt gettruncationoperator Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt setupdateoperator Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt getvaliditymask Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt getupdateoperator Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt forwardmodelshimcorrection Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt setshimvolumeofinterestriro Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimvolumeofinterest Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt setshimmedfield Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt setoriginalfield Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt setdccurrentoffsets Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt setcouplingcoefficients Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt calibraterealtimeupdates Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt resettoreference Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt delete Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt assessshim Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt mapdbdi Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt derivedataweights Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt parseinput Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt calibratereferencemaps Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt loadshimreferencemaps Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI copy Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ShimOpt_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#shimopt_revc","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Shim Optimization for Ac/Dc 8 channel array (cervical spine shim) ShimOpt_revC is a ShimOpt subclass ========================================================================= Updated::20180726::ryan.topfer@polymtl.ca ========================================================================= Documentation for ShimOpt_revC doc ShimOpt_revC Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimOpt","title":"ShimOpt_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#field","text":"Synopsis: - object of type FieldEval Field - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Field"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#model","text":"Synopsis: - Modeled quantities for shimming Model - Modeled quantities for shimming Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Model"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#shimmedfield","text":"Synopsis: - object of type FieldEval ShimmedField - object of type FieldEval Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"ShimmedField"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#system","text":"Synopsis: - System - Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"System"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#interpolant","text":"Synopsis: ShimOpt/Interpolant is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimOpt","title":"Interpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#optimizeshimcurrents","text":"Synopsis : OPTIMIZESHIMCURRENTS Corrections = OPTIMIZESHIMCURRENTS( Shim, Params ) Params can have the following fields .maxCorrectionPerChannel [default: determined by ShimSpecs_revC property: .Amp.maxCurrentPerChannel] .minCorrectionPerChannel [default: -.maxCorrectionPerChannel] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Corrections DefiningClass : ShimOpt_revC","title":"optimizeshimcurrents"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#shimopt_revc_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params, Field OutputNames : Shim DefiningClass : ShimOpt_revC","title":"ShimOpt_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#declarecalibrationparameters","text":"Synopsis : DECLARECALIBRATIONPARAMETERS Initializes parameters for shim reference map construction (aka shim calibration) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_revC","title":"declarecalibrationparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#assigndefaultparameters","text":"Synopsis : ASSIGNDEFAULTPARAMETERS Params = ASSIGNDEFAULTPARAMETERS( Params ) Add default parameters fields to Params without replacing values (unless empty) DEFAULT_PATHTOSHIMREFERENCEMAPS = [] ; DEFAULT_PROBESPECS = [] ; DEFAULT_ISINTERPOLATINGREFERENCEMAPS = true ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : Params DefiningClass : ShimOpt_revC","title":"assigndefaultparameters"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimOpt_revC","title":"empty"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#tableshim","text":"Synopsis : Table of shim terms T = TABLESHIM( Shim ) T = TABLESHIM( Shim, Corrections ) When the only input argument is a ShimOpt-type object, T is a table where the first column contains the shim terms (channel names), and the second column contains their current setting. e.g. T = Correction_Term | Original Tx Freq. [Hz] | 123259218 Ch.1 [A] | 0 . | . . | . . | . Ch.N [A] | 0 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Corrections OutputNames : T DefiningClass : ShimOpt","title":"tableshim"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#optimizelarmor","text":"Synopsis : OPTIMIZELARMOR [f0, f0Voi, f0VoiShimmed] = OPTIMIZELARMOR( Shim, voi ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : f0, f0Voi, f0VoiShimmed DefiningClass : ShimOpt","title":"optimizelarmor"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#predictshimmedriro","text":"Synopsis : PREDICTSHIMMEDRIRO [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim ) ; [PredictedRiro] = PREDICTSHIMMEDRIRO( Shim, dp ) ; Returns a FieldEval-type object Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : PredictedRiro DefiningClass : ShimOpt","title":"predictshimmedriro"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#predictshimmedfield","text":"Synopsis : PREDICTSHIMMEDFIELD [PredictedField] = PREDICTSHIMMEDFIELD( Shim ) ; Returns FieldEval-type object(s) PredictedField.img = ( Shim.Field.img + Shim.Model.field ) ; NOTE The regions of spatial support for Shim.Model.field and Shim.Field.img are likely somewhat different (though ideally overlapping!). The predictions do not account for the finite spatial support of either field term! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : PredictedField DefiningClass : ShimOpt","title":"predictshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#predictslicewiseshim","text":"Synopsis : PREDICTSLICEWISESHIM TEMPORARY FUNCTION FOR SAGITTAL FIELD MAPS: --> Decompose global shim voi into axial segments and shim segments individually Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : [N/A] DefiningClass : ShimOpt","title":"predictslicewiseshim"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#computerealtimeupdate","text":"Synopsis : COMPUTEREALTIMEUPDATE Usage currents = COMPUTEREALTIMEUPDATE( Shim, p ) currents = Shim.Model.currents + p*Shim.Model.couplingCoefficients ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, p OutputNames : currents DefiningClass : ShimOpt","title":"computerealtimeupdate"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getshimsupport","text":"Synopsis : GETSHIMSUPPORT shimSupport = GETSHIMSUPPORT( Shim ) ; shimSupport is a logical map over the grid (voxel positions) defined by Shim.img of where the shim reference maps have well defined values. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : shimSupport DefiningClass : ShimOpt","title":"getshimsupport"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getnactivechannels","text":"Synopsis : GETNACTIVECHANNELS Returns number of active shim channels nActiveChannels = GETNACTIVECHANNELS( Shim ) ; nActiveChannels = size( Shim.img, 4 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : nActiveChannels DefiningClass : ShimOpt","title":"getnactivechannels"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getshimoperator","text":"Synopsis : GETSHIMOPERATOR A = GETSHIMOPERATOR( Shim ) ; where A * vectorOfShimCurrents = shimField Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : A DefiningClass : ShimOpt","title":"getshimoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#gettruncationoperatorriro","text":"Synopsis : GETTRUNCATIONOPERATORRIRO M = GETTRUNCATIONOPERATORRIRO( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Model.Riro.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperatorriro"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#gettruncationoperator","text":"Synopsis : GETTRUNCATIONOPERATOR M = GETTRUNCATIONOPERATOR( Shim ) ; Returns sparse linear truncation operator M i.e. M*b, 'picks out' the VOI voxels from vector b where the VOI is defined by the full 3d array Shim.Field.Hdr.MaskingImage if b has length nImg, and nVoi is the # of non-zero VOI voxels, then length(M*b)=nVoi. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : M DefiningClass : ShimOpt","title":"gettruncationoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setupdateoperator","text":"Synopsis : SETUPDATEOPERATOR [] = SETUPDATEOPERATOR( Shim ) ; Calls Shim.getupdateoperator() to set field Shim.Model.updateOperator Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"setupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getvaliditymask","text":"Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range and where (interpolated) shim reference maps are well defined. mask = GETVALIDITYMASK( Shim, Fields ) mask = GETVALIDITYMASK( Shim, Fields, Params ) Fields : a cell array of FieldEval-type objects (e.g. may correspond to 'Inspired' and/or 'Expired' fields.) ....................... The following Params.fields are supported .maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (To ignore this criterion, set value to Inf) .isAuxIncluded true || false, account for spatial support of the Shim.Aux system? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Fields, Params OutputNames : mask DefiningClass : ShimOpt","title":"getvaliditymask"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getupdateoperator","text":"Synopsis : GETUPDATEOPERATOR UO = GETUPDATEOPERATOR( Shim ) ; where UO * respiratory_measurement = currentsUpdate Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : UO DefiningClass : ShimOpt","title":"getupdateoperator"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#forwardmodelshimcorrection","text":"Synopsis : FORWARDMODELSHIMCORRECTION shimCorrection = FORWARDMODELSHIMCORRECTION( Shim, correctionCoefficients ) ; Forward projection of the shim correction : shimCorrection = reshape( Shim.getshimoperator()*correctionCoefficients, Shim.Field.getgridsize() ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, correctionCoefficients OutputNames : shimCorrection DefiningClass : ShimOpt","title":"forwardmodelshimcorrection"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setshimvolumeofinterestriro","text":"Synopsis : SETSHIMVOLUMEOFINTERESTRIRO [] = SETSHIMVOLUMEOFINTERESTRIRO( Shim, mask ) Sets Shim.Field.Model.Riro.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.Model.Riro.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterestriro"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setshimvolumeofinterest","text":"Synopsis : SETSHIMVOLUMEOFINTEREST [] = SETSHIMVOLUMEOFINTEREST( Shim, mask ) Sets Shim.Field.Hdr.MaskingImage mask is a binary image (with the same dimensions as Shim.Field.img) of the desired shim region. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, mask OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimvolumeofinterest"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setshimmedfield","text":"Synopsis : SETSHIMMEDFIELD [] = SETSHIMMEDFIELD( Shim, Field ) Sets Shim.ShimmedField Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field OutputNames : [N/A] DefiningClass : ShimOpt","title":"setshimmedfield"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setoriginalfield","text":"Synopsis : SETORIGINALFIELD [] = SETORIGINALFIELD( Shim, Field ) [] = SETORIGINALFIELD( Shim, Field, currents ) Sets Shim.Field Field is a FieldEval type object with .img in Hz Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Field, currents OutputNames : [N/A] DefiningClass : ShimOpt","title":"setoriginalfield"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setdccurrentoffsets","text":"Synopsis : ShimOpt/setdccurrentoffsets is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setdccurrentoffsets"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setcouplingcoefficients","text":"Synopsis : ShimOpt/setcouplingcoefficients is a function. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, currentsInspired, currentsExpired, pInspired, pExpired OutputNames : [N/A] DefiningClass : ShimOpt","title":"setcouplingcoefficients"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#calibraterealtimeupdates","text":"Synopsis : CALIBRATEREALTIMEUPDATES CALIBRATEREALTIMEUPDATES asks user to select the intervals of a pair of respiratory recordings (e.g. ProbeTracking.Data.t ) corresponding to inspired and expired field maps acquisitions. From these, and the associated optimal currents for the 2 respiratory states, the following function calls are made: --> Shim.Opt.setcouplingcofficients() --> Shim.Opt.setdccurrentoffsets() --> Shim.Opt.setupdateoperator() Usage Params = CALIBRATEREALTIMEUPDATES( Shim, Params ) Params. .Inspired .currents .measurementLog .Expired .currents .measurementLog The returned Params struct has additional fields (Params.Inspired.medianP, and Params.Expired.medianP) corresponding to the user-selected medians (e.g. pressures) NOTE : Possibly deprecated Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, Params OutputNames : Params DefiningClass : ShimOpt","title":"calibraterealtimeupdates"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#resettoreference","text":"Synopsis : RESETTOREFERENCE RESETTOREFERENCE( Shim ) Returns Shim.img and Shim.Hdr to their original (reference) values (before interpolations, cropping etc.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"resettoreference"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#delete","text":"Synopsis : DELETE clear Shim Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim OutputNames : [N/A] DefiningClass : ShimOpt","title":"delete"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#assessshim","text":"Synopsis : ASSESSSHIM ASSESSSHIM( Shim ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Shim, voi OutputNames : Results DefiningClass : ShimOpt","title":"assessshim"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#mapdbdi","text":"Synopsis : map dB/dI : field shift [Hz] per unit current (A) [ img, Hdr ] = MAPDBDI( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"mapdbdi"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#derivedataweights","text":"Synopsis : DERIVEDATAWEIGHTS dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime ) dataWeights = DERIVEDATAWEIGHTS( Mag, targetEchoTime, targetMask ) Assumes basic model of T2* signal decay using the magnitude images of the 2 echoes in the dual-echo GRE if: Mag(TE) = M0 * exp(-TE/T2star) then: t2star = -deltaTe ./ log( Mag2.img ./ Mag1.img ) ; dataWeights is the predicted + normalized signal intensity at the targetEchoTime (e.g. a long TE for a GRE-EPI sequence). targetMask, if provided, is a logical array specifying a priority region (e.g. spinal canal) that will receive maximal (unity) weighting in dataWeights, irrespective of the t2*-forecasted signal. (i.e. dataWeights( targetMask ) = 1 ;) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, targetEchoTime, targetMask OutputNames : dataWeights DefiningClass : ShimOpt","title":"derivedataweights"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#parseinput","text":"Synopsis : PARSEINPUT Simple parser returns the optional user inputs Field and Params irrespective of their input order (convenient). [ Field, Params ] = PARSEINPUT( Inputs ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Inputs OutputNames : Field, Params DefiningClass : ShimOpt","title":"parseinput"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#calibratereferencemaps","text":"Synopsis : CALIBRATEREFERENCEMAPS Wraps to ShimOpt.mapdbdi( ) and writes output to disk [ img, Hdr ] = CALIBRATEREFERENCEMAPS( Params ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Params OutputNames : img, Hdr DefiningClass : ShimOpt","title":"calibratereferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#loadshimreferencemaps","text":"Synopsis : LOADSHIMREFERENCEMAPS [ img, Hdr, Interpolant ] = LOADSHIMREFERENCEMAPS( filename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : pathToShimReferenceMaps OutputNames : img, Hdr, Interpolant DefiningClass : ShimOpt","title":"loadshimreferencemaps"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#copy","text":"Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI","title":"copy"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimOpt_revC/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/","text":"ShimSpecs_revC Filetype: MATLAB\u00ae classdef Synopsis: Shim System Specifications for the 8ch. AC/DC 3T neck coil Specs = ShimSpecs_revC( ) Specs contains fields .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Adc relating to analog-to-digital conversion .Dac relating to digital-to-analog conversion __ETC___ See also ShimSpecs Documentation for ShimSpecs_revC doc ShimSpecs_revC Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs Properties Adc Synopsis: ShimSpecs_revC/Adc is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs_revC Id Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Amp Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Com Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Dac Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs Methods ShimSpecs_revC Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_revC empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_revC","title":"ShimSpecs_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#shimspecs_revc","text":"Filetype: MATLAB\u00ae classdef Synopsis: Shim System Specifications for the 8ch. AC/DC 3T neck coil Specs = ShimSpecs_revC( ) Specs contains fields .Amp relating to amplifcation .Com relating to communication (e.g. RS-232) .Adc relating to analog-to-digital conversion .Dac relating to digital-to-analog conversion __ETC___ See also ShimSpecs Documentation for ShimSpecs_revC doc ShimSpecs_revC Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible false RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: ShimSpecs","title":"ShimSpecs_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#adc","text":"Synopsis: ShimSpecs_revC/Adc is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs_revC","title":"Adc"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#id","text":"Synopsis: - system identifiers Id - system identifiers Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Id"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#amp","text":"Synopsis: - relating to amplification Amp - relating to amplification Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Amp"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#com","text":"Synopsis: - relating to communication (e.g. RS-232) Com - relating to communication (e.g. RS-232) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Com"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#dac","text":"Synopsis: - relating to digital-to-analog conversion Dac - relating to digital-to-analog conversion Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ShimSpecs","title":"Dac"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#shimspecs_revc_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : [N/A] OutputNames : Shim DefiningClass : ShimSpecs_revC","title":"ShimSpecs_revC"},{"location":"3_contributing/api_documentation/Coils/Shim_revC/ShimSpecs_revC/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ShimSpecs_revC","title":"empty"},{"location":"3_contributing/api_documentation/Img/FieldEval/","text":"FieldEval Filetype: MATLAB\u00ae classdef Synopsis: - [B0] Field Evaluation ....... Usage Field = FieldEval( Mag, Phase ) Field = FieldEval( Mag, Phase, Params ) Mag and Phase should either be paths to the respective DICOM directories, OR, instantiated MaRdI-type image objects (e.g. Mag = MaRdI( path_to_Mag_DICOMs ) ) Params may contain the following fields .mask binary array indicating phase region to be unwrapped [default: formed by thresholding magnitude images > Params.threshold) .threshold (as a fraction (<1) of max measured magnitude intensity) Determines the phase region to be unwrapped (i.e. areas of low signal are ignored) [default: 0.01] .unwrapper 'Sunwrap' [default for 2d image (single slice)], calls sunwrap( ) (Maier, et al. MRM 2015) 'AbdulRahman_2007' [default for 3d image volume], calls unwrap3d( ), which wraps to the Abdul-Rahman binary 'FslPrelude', calls prelude( ), which wraps to FSL-prelude ....... NOTE FieldEval is a MaRdI subclass [FieldEval < MaRdI] See MaRdI documentation for additional features. ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for FieldEval doc FieldEval Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: MaRdI Properties Model Synopsis: FieldEval/Model is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : FieldEval img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods scalefieldstrength Synopsis : SCALEFIELDSTRENGTH [] = SCALEFIELDSTRENGTH( Field, B01 ) Scales Field (and, if present, FieldEval objects within Field.Model) to new (scanner) \"main\" field strength B01. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, B01 OutputNames : [N/A] DefiningClass : FieldEval getriro Synopsis : GETRIRO Riro = GETRIRO( Field ) Riro = GETRIRO( Field, p ) Returns estimate of the respiration-induced resonance offset corresponding to tracker measurement p assuming the linear field model (i.e. Riro[ p(t) ] ). If nargin == 1, Riro is a copy of Field.Model.Riro (e.g. inspired-expired field difference); Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, p OutputNames : Riro DefiningClass : FieldEval computevoxelshiftmap Synopsis : COMPUTEVOXELSHIFTMAP Returns a copy of Field as VoxelShiftMap wherein the Field.img data has been transformed to a voxel shift map (with units of pixels as opposed to Hz) according to the formula (generalized from Jezzard & Balaban, 1995) : VoxelShiftMap.img = Field.img / pixelBandwidthPe ; VoxelShiftMap = COMPUTEVOXELSHIFTMAP( Field, pixelBandwidthPe ) VoxelShiftMap = COMPUTEVOXELSHIFTMAP( Field, R, nPhaseEncode, echoSpacing ) VoxelShiftMap = COMPUTEVOXELSHIFTMAP( Field, R, nPhaseEncode, echoSpacing, nInterleaves ) According to https://lcni.uoregon.edu/kb-articles/kb-0003 \"You can either use the actual echo spacing and the actual number of phase encodes for the number of echoes, or the effective echo spacing and the number of reconstructed phase lines (easier to get from the DICOM).\" The pixelBandwidth in the phase encode direction accounts for these terms: pixelBandwidthPe = ( R * nInterleaves ) / ( nPhaseEncode * echoSpacing ) pixelBandwidthPe Bandwidth per pixel (Hz/pixel) in phase encode direction. For EPI this may be stored in the DICOM field (0019, 1028). This is equivalent to the inverse of the \"effective echo spacing\", divided by the size of the image matrix in the phase encode dimension. R The in-plane acceleration factor. nPhaseEncode The actual size (e.g. # rows or columns) of the reconstructed image in the phase encode dimension (i.e. this will be greater or equal to the acquired number of phase encode lines, which depends on partial Fourier + parallel imaging) echoSpacing The actual inter-echo spacing (time between the k_x = 0 crossing of one phase encode line, to the zero-crossing on the next line). Note that the actual echoSpacing = the \"effective echo spacing\" divided by the in-plane acceleration factor R. nInterleaves number of interleaves for multi-shot [default: 1, single-shot] Another useful website with explanations for terms like phase-encode bandwidth http://support.brainvoyager.com/functional-analysis-preparation/27-pre-processing/459-epi-distortion-correction-echo-spacing.html NOTE I've only assumed that the definition of pixelBandwidthPe above is consistent with that of Siemens (ie. DICOM field (0019,1028)). In particular, I haven't verified that nInterleaves figures into their definition or not. Should be OK for single-shot. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, varargin OutputNames : VoxelShiftMap DefiningClass : FieldEval plotfieldhistogram Synopsis : PLOTFIELDHISTOGRAM [] = PLOTFIELDHISTOGRAM( Field ) [] = PLOTFIELDHISTOGRAM( Field, voi ) [] = PLOTFIELDHISTOGRAM( Field, voi, Params ) Plots histogram of the distribution in Field.img() using the Matlab HISTOGRAM function. Inputs voi volume of interest binary mask (same size as Field.img) indicating region over which the distribution is to be binned. [default : Field.Hdr.MaskingImage] Params .xLimits horizontal limits in Hz [default : max(abs(field(:))) .* [ -1 1 ] ] .yLimits vertical limits as count # .fontSize [default : 16] .yAxisLocation [default : 'left'] .textContent string appears in textbox (e.g. 'Standard Deviation = 5 Hz') [default : ''] .textPosition [X Y] position of textbox relative to graph's origin Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, voi, Params OutputNames : [N/A] DefiningClass : FieldEval getvaliditymask Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range mask = GETVALIDITYMASK( Field ) mask = GETVALIDITYMASK( Field, maxAbsField ) ....................... maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (Set to Inf to ignore the criterion) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, maxAbsField OutputNames : mask DefiningClass : FieldEval assessfielddistribution Synopsis : ASSESSSHIM Stats = ASSESSFIELDDISTRIBUTION( Field ) Stats = ASSESSFIELDDISTRIBUTION( Field, VOI ) Stats = ASSESSFIELDDISTRIBUTION( Field, VOI, filename ) VOI binary array the same size as Field.img indicating the region of interest over which field calculations are made. default: Field.Hdr.MaskingImage filename output to text file using writetable() Stats contains fields .volume volume of region of interest (VOI) [units: cm^3] .mean mean value of the field over the VOI .median median value of the field over the VOI .std standard deviation of Field.img over the VOI .rmsePerCm3 L2 norm of the field (i.e. residual) over the VOI normalized by the volume .meanAbs mean absolute value of the field over the VOI. .medianAbs median absolute value of the field over the VOI .min .max Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, voi, filename OutputNames : Stats DefiningClass : FieldEval extractharmonicfield Synopsis : EXTRACTHARMONICFIELD Extract (smooth) harmonic field via RESHARP (Sun, H. Magn Res Med, 2014) Syntax [LocalField, BkgrField] = EXTRACTHARMONICFIELD( Field, Params ) Returns 2 FieldEval-type Field objects: LocalField : LocalField.img is the non-harmonic (high-pass) signal element BkgrField : BkgrField.img is the harmonic (low-pass) signal element Inputs Field FieldEval-type object containing GRE field data in Field.img Params .filterRadius scalar filter radius [units: mm] (default = 4) .regularization Tikhonov regularization parameter (default = 0) .maxIterations max iterations of conjugate gradient solver (default = 500) .tolerance min acceptable discepancy (Ax - b)/|norm(b)| for conjugate gradient solver (default = 1E-6) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, Params OutputNames : LocalField, BackgroundField DefiningClass : FieldEval copy Synopsis : COPY Make a copy of a FieldEval (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : FieldEval FieldEval Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Field DefiningClass : FieldEval modelfield Synopsis : Fit B0 maps to auxiliary respiratory recording ....... Description Maps static B0 and respiration-induced resonance offset (RIRO) assuming a linear model of field variation w/breath-amplitude (Ref: Topfer et al. MRM 2018) [FieldFit] = MODELFIELD( Fields ) [FieldFit] = MODELFIELD( Fields, Params ) ....... Usage Returns FieldEval-type object FieldFit, where FieldFit.img is the respiration-independent static field estimate, and FieldFit.Model.Riro.img is the respiration-dependent component. Inputs: Fields: Case 1: Fields pertains to a field map time-series: Fields should be a single object of type FieldEval, with Fields.Aux containing the corresponding respiratory (e.g. bellows) recording in the form of a ProbeTracking object. Case 2: Fields pertains to separate inspired and expired field maps: Fields should be a cell array, with Fields{1} and Fields{2} respectively containing the FieldEval objects corresponding to the 'inspired' and 'expired' acquisitions. Params: Optional parameters struct can possess any of the following entries: .maxAbsField [default = 600] maximum absolute field value a voxel can possess in units of Hz to be deemed reliable .maxAbsFieldDifference [default = 150] maximum absolute field value a voxel can possess in units of Hz to be deemed reliable pDc : DC auxiliary pressure reading corresponding to the mean respiratory state [default in Case 2: (FieldInspired.Aux.Data.p + FieldExpired.Aux.Data.p ) /2 ] Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Fields, Params OutputNames : Field DefiningClass : FieldEval mapfield Synopsis : MAPFIELD Field = MAPFIELD( Mag, Phase ) Field = MAPFIELD( Mag, Phase, Params ) Mag and Phase should either be paths to the respective DICOM directories, OR, instantiated MaRdI-type image objects (e.g. Mag = MaRdI( path_to_Mag_DICOMs ) ) Params may contain the following fields .mask binary array indicating phase region to be unwrapped [default: formed by thresholding magnitude images > Params.threshold) .threshold (as a fraction (<1) of max measured magnitude intensity) Determines the phase region to be unwrapped (i.e. areas of low signal are ignored) [default: 0.01] .unwrapper 'Sunwrap' [default for 2d image (single slice)], calls sunwrap( ) (Maier, et al. MRM 2015) 'AbdulRahman_2007' [default for 3d image volume], calls unwrap3d( ), which wraps to the Abdul-Rahman binary 'FslPrelude', calls prelude( ), which wraps to FSL-prelude Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Field DefiningClass : FieldEval empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : FieldEval write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. delete \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"FieldEval"},{"location":"3_contributing/api_documentation/Img/FieldEval/#fieldeval","text":"Filetype: MATLAB\u00ae classdef Synopsis: - [B0] Field Evaluation ....... Usage Field = FieldEval( Mag, Phase ) Field = FieldEval( Mag, Phase, Params ) Mag and Phase should either be paths to the respective DICOM directories, OR, instantiated MaRdI-type image objects (e.g. Mag = MaRdI( path_to_Mag_DICOMs ) ) Params may contain the following fields .mask binary array indicating phase region to be unwrapped [default: formed by thresholding magnitude images > Params.threshold) .threshold (as a fraction (<1) of max measured magnitude intensity) Determines the phase region to be unwrapped (i.e. areas of low signal are ignored) [default: 0.01] .unwrapper 'Sunwrap' [default for 2d image (single slice)], calls sunwrap( ) (Maier, et al. MRM 2015) 'AbdulRahman_2007' [default for 3d image volume], calls unwrap3d( ), which wraps to the Abdul-Rahman binary 'FslPrelude', calls prelude( ), which wraps to FSL-prelude ....... NOTE FieldEval is a MaRdI subclass [FieldEval < MaRdI] See MaRdI documentation for additional features. ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for FieldEval doc FieldEval Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: MaRdI","title":"FieldEval"},{"location":"3_contributing/api_documentation/Img/FieldEval/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Img/FieldEval/#model","text":"Synopsis: FieldEval/Model is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : FieldEval","title":"Model"},{"location":"3_contributing/api_documentation/Img/FieldEval/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Img/FieldEval/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Img/FieldEval/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Img/FieldEval/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Img/FieldEval/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Img/FieldEval/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Img/FieldEval/#scalefieldstrength","text":"Synopsis : SCALEFIELDSTRENGTH [] = SCALEFIELDSTRENGTH( Field, B01 ) Scales Field (and, if present, FieldEval objects within Field.Model) to new (scanner) \"main\" field strength B01. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, B01 OutputNames : [N/A] DefiningClass : FieldEval","title":"scalefieldstrength"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getriro","text":"Synopsis : GETRIRO Riro = GETRIRO( Field ) Riro = GETRIRO( Field, p ) Returns estimate of the respiration-induced resonance offset corresponding to tracker measurement p assuming the linear field model (i.e. Riro[ p(t) ] ). If nargin == 1, Riro is a copy of Field.Model.Riro (e.g. inspired-expired field difference); Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, p OutputNames : Riro DefiningClass : FieldEval","title":"getriro"},{"location":"3_contributing/api_documentation/Img/FieldEval/#computevoxelshiftmap","text":"Synopsis : COMPUTEVOXELSHIFTMAP Returns a copy of Field as VoxelShiftMap wherein the Field.img data has been transformed to a voxel shift map (with units of pixels as opposed to Hz) according to the formula (generalized from Jezzard & Balaban, 1995) : VoxelShiftMap.img = Field.img / pixelBandwidthPe ; VoxelShiftMap = COMPUTEVOXELSHIFTMAP( Field, pixelBandwidthPe ) VoxelShiftMap = COMPUTEVOXELSHIFTMAP( Field, R, nPhaseEncode, echoSpacing ) VoxelShiftMap = COMPUTEVOXELSHIFTMAP( Field, R, nPhaseEncode, echoSpacing, nInterleaves ) According to https://lcni.uoregon.edu/kb-articles/kb-0003 \"You can either use the actual echo spacing and the actual number of phase encodes for the number of echoes, or the effective echo spacing and the number of reconstructed phase lines (easier to get from the DICOM).\" The pixelBandwidth in the phase encode direction accounts for these terms: pixelBandwidthPe = ( R * nInterleaves ) / ( nPhaseEncode * echoSpacing ) pixelBandwidthPe Bandwidth per pixel (Hz/pixel) in phase encode direction. For EPI this may be stored in the DICOM field (0019, 1028). This is equivalent to the inverse of the \"effective echo spacing\", divided by the size of the image matrix in the phase encode dimension. R The in-plane acceleration factor. nPhaseEncode The actual size (e.g. # rows or columns) of the reconstructed image in the phase encode dimension (i.e. this will be greater or equal to the acquired number of phase encode lines, which depends on partial Fourier + parallel imaging) echoSpacing The actual inter-echo spacing (time between the k_x = 0 crossing of one phase encode line, to the zero-crossing on the next line). Note that the actual echoSpacing = the \"effective echo spacing\" divided by the in-plane acceleration factor R. nInterleaves number of interleaves for multi-shot [default: 1, single-shot] Another useful website with explanations for terms like phase-encode bandwidth http://support.brainvoyager.com/functional-analysis-preparation/27-pre-processing/459-epi-distortion-correction-echo-spacing.html NOTE I've only assumed that the definition of pixelBandwidthPe above is consistent with that of Siemens (ie. DICOM field (0019,1028)). In particular, I haven't verified that nInterleaves figures into their definition or not. Should be OK for single-shot. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, varargin OutputNames : VoxelShiftMap DefiningClass : FieldEval","title":"computevoxelshiftmap"},{"location":"3_contributing/api_documentation/Img/FieldEval/#plotfieldhistogram","text":"Synopsis : PLOTFIELDHISTOGRAM [] = PLOTFIELDHISTOGRAM( Field ) [] = PLOTFIELDHISTOGRAM( Field, voi ) [] = PLOTFIELDHISTOGRAM( Field, voi, Params ) Plots histogram of the distribution in Field.img() using the Matlab HISTOGRAM function. Inputs voi volume of interest binary mask (same size as Field.img) indicating region over which the distribution is to be binned. [default : Field.Hdr.MaskingImage] Params .xLimits horizontal limits in Hz [default : max(abs(field(:))) .* [ -1 1 ] ] .yLimits vertical limits as count # .fontSize [default : 16] .yAxisLocation [default : 'left'] .textContent string appears in textbox (e.g. 'Standard Deviation = 5 Hz') [default : ''] .textPosition [X Y] position of textbox relative to graph's origin Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, voi, Params OutputNames : [N/A] DefiningClass : FieldEval","title":"plotfieldhistogram"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getvaliditymask","text":"Synopsis : GETVALIDITYMASK Returns binary mask - TRUE where field values are well defined and within the expected range mask = GETVALIDITYMASK( Field ) mask = GETVALIDITYMASK( Field, maxAbsField ) ....................... maxAbsField maximum absolute voxel value assumed to represent an accurate field measurement. Voxels with abs-values greater than this might stem from errors in the unwrapping. [default: 500 Hz] (Set to Inf to ignore the criterion) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, maxAbsField OutputNames : mask DefiningClass : FieldEval","title":"getvaliditymask"},{"location":"3_contributing/api_documentation/Img/FieldEval/#assessfielddistribution","text":"Synopsis : ASSESSSHIM Stats = ASSESSFIELDDISTRIBUTION( Field ) Stats = ASSESSFIELDDISTRIBUTION( Field, VOI ) Stats = ASSESSFIELDDISTRIBUTION( Field, VOI, filename ) VOI binary array the same size as Field.img indicating the region of interest over which field calculations are made. default: Field.Hdr.MaskingImage filename output to text file using writetable() Stats contains fields .volume volume of region of interest (VOI) [units: cm^3] .mean mean value of the field over the VOI .median median value of the field over the VOI .std standard deviation of Field.img over the VOI .rmsePerCm3 L2 norm of the field (i.e. residual) over the VOI normalized by the volume .meanAbs mean absolute value of the field over the VOI. .medianAbs median absolute value of the field over the VOI .min .max Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, voi, filename OutputNames : Stats DefiningClass : FieldEval","title":"assessfielddistribution"},{"location":"3_contributing/api_documentation/Img/FieldEval/#extractharmonicfield","text":"Synopsis : EXTRACTHARMONICFIELD Extract (smooth) harmonic field via RESHARP (Sun, H. Magn Res Med, 2014) Syntax [LocalField, BkgrField] = EXTRACTHARMONICFIELD( Field, Params ) Returns 2 FieldEval-type Field objects: LocalField : LocalField.img is the non-harmonic (high-pass) signal element BkgrField : BkgrField.img is the harmonic (low-pass) signal element Inputs Field FieldEval-type object containing GRE field data in Field.img Params .filterRadius scalar filter radius [units: mm] (default = 4) .regularization Tikhonov regularization parameter (default = 0) .maxIterations max iterations of conjugate gradient solver (default = 500) .tolerance min acceptable discepancy (Ax - b)/|norm(b)| for conjugate gradient solver (default = 1E-6) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Field, Params OutputNames : LocalField, BackgroundField DefiningClass : FieldEval","title":"extractharmonicfield"},{"location":"3_contributing/api_documentation/Img/FieldEval/#copy","text":"Synopsis : COPY Make a copy of a FieldEval (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : FieldEval","title":"copy"},{"location":"3_contributing/api_documentation/Img/FieldEval/#fieldeval_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Field DefiningClass : FieldEval","title":"FieldEval"},{"location":"3_contributing/api_documentation/Img/FieldEval/#modelfield","text":"Synopsis : Fit B0 maps to auxiliary respiratory recording ....... Description Maps static B0 and respiration-induced resonance offset (RIRO) assuming a linear model of field variation w/breath-amplitude (Ref: Topfer et al. MRM 2018) [FieldFit] = MODELFIELD( Fields ) [FieldFit] = MODELFIELD( Fields, Params ) ....... Usage Returns FieldEval-type object FieldFit, where FieldFit.img is the respiration-independent static field estimate, and FieldFit.Model.Riro.img is the respiration-dependent component. Inputs: Fields: Case 1: Fields pertains to a field map time-series: Fields should be a single object of type FieldEval, with Fields.Aux containing the corresponding respiratory (e.g. bellows) recording in the form of a ProbeTracking object. Case 2: Fields pertains to separate inspired and expired field maps: Fields should be a cell array, with Fields{1} and Fields{2} respectively containing the FieldEval objects corresponding to the 'inspired' and 'expired' acquisitions. Params: Optional parameters struct can possess any of the following entries: .maxAbsField [default = 600] maximum absolute field value a voxel can possess in units of Hz to be deemed reliable .maxAbsFieldDifference [default = 150] maximum absolute field value a voxel can possess in units of Hz to be deemed reliable pDc : DC auxiliary pressure reading corresponding to the mean respiratory state [default in Case 2: (FieldInspired.Aux.Data.p + FieldExpired.Aux.Data.p ) /2 ] Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Fields, Params OutputNames : Field DefiningClass : FieldEval","title":"modelfield"},{"location":"3_contributing/api_documentation/Img/FieldEval/#mapfield","text":"Synopsis : MAPFIELD Field = MAPFIELD( Mag, Phase ) Field = MAPFIELD( Mag, Phase, Params ) Mag and Phase should either be paths to the respective DICOM directories, OR, instantiated MaRdI-type image objects (e.g. Mag = MaRdI( path_to_Mag_DICOMs ) ) Params may contain the following fields .mask binary array indicating phase region to be unwrapped [default: formed by thresholding magnitude images > Params.threshold) .threshold (as a fraction (<1) of max measured magnitude intensity) Determines the phase region to be unwrapped (i.e. areas of low signal are ignored) [default: 0.01] .unwrapper 'Sunwrap' [default for 2d image (single slice)], calls sunwrap( ) (Maier, et al. MRM 2015) 'AbdulRahman_2007' [default for 3d image volume], calls unwrap3d( ), which wraps to the Abdul-Rahman binary 'FslPrelude', calls prelude( ), which wraps to FSL-prelude Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Field DefiningClass : FieldEval","title":"mapfield"},{"location":"3_contributing/api_documentation/Img/FieldEval/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : FieldEval","title":"empty"},{"location":"3_contributing/api_documentation/Img/FieldEval/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Img/FieldEval/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Img/FieldEval/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Img/FieldEval/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Img/FieldEval/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Img/FieldEval/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Img/FieldEval/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Img/FieldEval/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Img/FieldEval/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Img/FieldEval/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Img/FieldEval/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Img/FieldEval/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Img/FieldEval/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Img/FieldEval/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Img/FieldEval/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Img/FieldEval/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Img/FieldEval/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Img/FieldEval/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Img/FieldEval/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Img/FieldEval/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Img/FieldEval/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Img/FieldEval/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Img/FieldEval/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Img/FieldEval/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Img/FieldEval/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Img/FieldEval/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Img/FieldEval/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Img/FieldEval/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Img/FieldEval/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Img/FieldEval/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Img/FieldEval/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Img/FieldEval/#delete","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"delete"},{"location":"3_contributing/api_documentation/Img/FieldEval/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Img/FieldEval/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Img/FieldEval/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Img/FieldEval/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Img/FieldEval/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/FieldEval/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Img/MaRdI/","text":"MaRdI Filetype: MATLAB\u00ae classdef Synopsis: Ma(t)-R-dI(com) Dicom iunto Matlab for Siemens MRI data ....... Usage Img = MaRdI( imgPath ) where imgPath is the path to a single .dcm image OR a directory containing the .dcm or .IMA images. Img contains public properties: .img Array of images: If multi-echo, the echo index is along the 4th dimension; If multiple volume repetitions, the measurement index is along the 5th dimension. .Aux Aux-objects: auxiliary measurements (e.g. respiratory ProbeTracking) By default .Aux is empty. To fill it, call Img.associateaux( Aux ) with a valid Aux object. For more info, type: help MaRdI.associateaux( ) In addition to the read-only properties .Hdr The full Siemens DICOM header corresponding to Img.img(:,:,1,1,1) .Hdrs Cell array of (truncated) DICOM headers courtesy of dicominfo(). (One entry for every image) ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for MaRdI doc MaRdI Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: matlab.mixin.SetGet Properties img Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Aux Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdr Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Hdrs Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Ref Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI Methods write Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI unwrapphase Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI timestd Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI timeaverage Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI setmaskingimage Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI resliceimg Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI isocenter Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI isphase Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI ismagnitude Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI getvoxelspacing Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI getvoxelpositions Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI getreliabilitymask Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI getnumberofvoxels Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI getgyromagneticratio Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI getgridsize Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI getfieldofview Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI getechotime Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI getpartialfourierfactors Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI getnumberofslices Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI getnumberofmeasurements Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI getimagetype Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI getimagingfrequency Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI getacquisitiontime Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI filter Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI exist Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI estimatekorigintime Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI copy Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI associateaux Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI adjvalidateshim Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI MaRdI Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgPath OutputNames : Img DefiningClass : MaRdI scalephasetofrequency Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI iscoincident Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI getinterpolant Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI setslicenormalvector Synopsis : SETSLICENORMALVECTOR For determining voxel positions in 3d slice-stack Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI reshapemosaic Synopsis : RESHAPEMOSAIC Reshape Siemens mosaic into volume and remove padded zeros Adapted from dicm2nii by xiangrui.li@gmail.com http://www.mathworks.com/matlabcentral/fileexchange/42997 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img OutputNames : Img DefiningClass : MaRdI rescaleimg Synopsis : RESCALEIMG []=RESCALEIMG( Img ) []=RESCALEIMG( Img, isUndoing ) Only alters phase images (+ Hdr) by rescaling to radians. Mag. is unaffected. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img, isUndoing OutputNames : [N/A] DefiningClass : MaRdI getdirectioncosines Synopsis : GETDIRECTIONALCOSINES \"The direction cosines of a vector are the cosines of the angles between the vector and the three coordinate axes. Equivalently, they are the contributions of each component of the basis to a unit vector in that direction.\" https://en.wikipedia.org/wiki/Direction_cosine [r,c,s] = GETDIRECTIONALCOSINES( Img ) r: row index direction cosine c: column index \" \" s: slice index \" \" NB: the *index* term. r & c may be defined obstrusely: i.e. r is not the row direction cosine (c is!), it is the direction cosine of the vector that points along the direction of increasing row indices (i.e. it's in the column direction!) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img OutputNames : r, c, s DefiningClass : MaRdI nii Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI segmentspinalcanal_s Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI findimages Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI compareimggrids Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : MaRdI set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. delete \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"MaRdI"},{"location":"3_contributing/api_documentation/Img/MaRdI/#mardi","text":"Filetype: MATLAB\u00ae classdef Synopsis: Ma(t)-R-dI(com) Dicom iunto Matlab for Siemens MRI data ....... Usage Img = MaRdI( imgPath ) where imgPath is the path to a single .dcm image OR a directory containing the .dcm or .IMA images. Img contains public properties: .img Array of images: If multi-echo, the echo index is along the 4th dimension; If multiple volume repetitions, the measurement index is along the 5th dimension. .Aux Aux-objects: auxiliary measurements (e.g. respiratory ProbeTracking) By default .Aux is empty. To fill it, call Img.associateaux( Aux ) with a valid Aux object. For more info, type: help MaRdI.associateaux( ) In addition to the read-only properties .Hdr The full Siemens DICOM header corresponding to Img.img(:,:,1,1,1) .Hdrs Cell array of (truncated) DICOM headers courtesy of dicominfo(). (One entry for every image) ========================================================================= Author::ryan.topfer@polymtl.ca ========================================================================= Documentation for MaRdI doc MaRdI Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: matlab.mixin.SetGet","title":"MaRdI"},{"location":"3_contributing/api_documentation/Img/MaRdI/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/Img/MaRdI/#img","text":"Synopsis: MaRdI/img is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"img"},{"location":"3_contributing/api_documentation/Img/MaRdI/#aux","text":"Synopsis: MaRdI/Aux is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Aux"},{"location":"3_contributing/api_documentation/Img/MaRdI/#hdr","text":"Synopsis: - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Hdr - full Siemens DICOM header of 1st img (i.e. Img.img(:,:,1) ) Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdr"},{"location":"3_contributing/api_documentation/Img/MaRdI/#hdrs","text":"Synopsis: - cell array of (truncated) DICOM headers courtesy of dicominfo() Hdrs - cell array of (truncated) DICOM headers courtesy of dicominfo() Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Hdrs"},{"location":"3_contributing/api_documentation/Img/MaRdI/#ref","text":"Synopsis: - Reference properties - prior to manipulation Ref - Reference properties - prior to manipulation Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden true GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : protected PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : MaRdI","title":"Ref"},{"location":"3_contributing/api_documentation/Img/MaRdI/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/Img/MaRdI/#write","text":"Synopsis : Ma(t)-R-dI(com) Write MaRdI image object to DICOM and/or NifTI ..... Usage WRITE( Img ) WRITE( Img, saveDirectory ) WRITE( Img, saveDirectory, imgFormat ) WRITE( Img, saveDirectory, imgFormat, isSavingSingleNiis ) Inputs default saveDirectory = './tmp' imgFormat can be: 'dcm' [default] 'nii' (creating temporary DICOMs which are deleted after the system call to dcm2niix) 'both' (does not delete the DICOMs) isSavingSingleNiis (boolean): false [default] : DICOMs are combined into single NifTI file true : Separate .nii output for each image (passes '-s y' argument to dcm2niix) ..... Adapted from dicom_write_volume.m (D.Kroon, University of Twente, 2009) https://www.mathworks.com/matlabcentral/fileexchange/27941-dicom-toolbox?focused=5189263&tab=function Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, saveDirectory, imgFormat, isSavingSingleNiis OutputNames : [N/A] DefiningClass : MaRdI","title":"write"},{"location":"3_contributing/api_documentation/Img/MaRdI/#unwrapphase","text":"Synopsis : UNWRAPPHASE Interface to SUNWRAP, to FSL Prelude, or to Abdul-Rahman's path-based phase unwrapper ....... Usage [] = UNWRAPPHASE( Phase ) [] = UNWRAPPHASE( Phase, Mag ) [] = UNWRAPPHASE( Phase, Mag, Options ) Phase and Mag are objects of type MaRdI. Options is a struct that can contain the following fields: .unwrapper == 'AbdulRahman_2007' [default if Phase.img is 3D] : calls UNWRAP3D. Not permitted if Phase.img is 2D (will default to SUNWRAP) If Mag is supplied, Phase.Hdr.MaskingImage must See HELP UNWRAP3D for description of permitted Options == 'Sunwrap' [default if Phase.img is 2D] : calls SUNWRAP. See HELP SUNWRAP for more details. == 'FslPrelude' : calls PRELUDE. See HELP PRELUDE for description of permitted Options .threshold [default = 0.01] Relative threshold of Mag.img used to define the unwrapping region in the SUNWRAP case and for the other 2 cases when Phase.Hdr.MaskingImage is undefined (Mag.getreliabilitymask() is called). NOTE: UNWRAP3D and PRELUDE support an Options.mask input to which Phase.Hdr.MaskingImage will always be assigned. To assign the mask manually, run Phase.setmaskingimage before calling Phase.unwrapphase. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Phase, varargin OutputNames : [N/A] DefiningClass : MaRdI","title":"unwrapphase"},{"location":"3_contributing/api_documentation/Img/MaRdI/#timestd","text":"Synopsis : TIMESTD standardDeviation = TIMESTD( Img ) Assumes 5th dimension of Img.img corresponds to time: standardDeviation = std( Img.img, 0, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeStd DefiningClass : MaRdI","title":"timestd"},{"location":"3_contributing/api_documentation/Img/MaRdI/#timeaverage","text":"Synopsis : TIMEAVERAGE Img = TIMEAVERAGE( Img) Assumes 5th dimension of Img.img corresponds to time: timeAverage = mean( Img.img, 5 ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : timeAverage DefiningClass : MaRdI","title":"timeaverage"},{"location":"3_contributing/api_documentation/Img/MaRdI/#setmaskingimage","text":"Synopsis : SETMASKINGIMAGE [] = SETMASKINGIMAGE( Img, mask ) Copies valid mask (a logical array of 1's and 0's) to Img.Hdr.MaskingImage The purpose of this function is to specify the signal spatial support (e.g. of mag, phase, field data) within the image grid. e.g. it is called during phase unwrapping/field mapping, but it might also be called prior to regridding if the interpolation should exclude certain voxels. To be valid, mask must either be the same size as Img.img OR the same size as Img.getgridsize() (i.e. the size of a single image volume of a multi-echo/multi-measurement stack), in which case, the single mask is simply copied such that the assigned Img.Hdr.MaskingImage always possesses the same dimensions as Img.img Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, mask OutputNames : [N/A] DefiningClass : MaRdI","title":"setmaskingimage"},{"location":"3_contributing/api_documentation/Img/MaRdI/#segmentspinalcanal","text":"Synopsis : SEGMENTSPINALCANAL segment T2* multiecho data using the Spinal Cord Toolbox (must be installed + in path) [ mask, weights ] = SEGMENTSPINALCANAL( Img, Params ) Params .dataLoadDir DICOM folder .dataSaveDir .isUsingPropsegCsf [default = false] NOTE The protocol is basically that of Topfer R, et al. Magn Reson Med, 2018. It hasn't been tested extensively for different acquisition prtocols/systems Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal"},{"location":"3_contributing/api_documentation/Img/MaRdI/#resliceimg","text":"Synopsis : RESLICEIMG Interpolate a MaRdI image (Img.img) and update Img.Hdr accordingly. In general, RESLICEIMG() uses MATLAB's scatteredInterpolant class. The exception is when the image input (Img.img) is 2d and the target output (prescribed by inputs X,Y,Z) is a volume. This scenario is incompatible with scatteredInterpolant, and nearest-neighbor substitution is used instead. Basic Usage [] = RESLICEIMG( Img, X, Y, Z ) [] = RESLICEIMG( Img, X, Y, Z, mask ) Inputs: X, Y, Z: 2d or 3d arrays (size=output image grid) describing the X, Y, Z patient coordinates (i.e. of the DICOM reference coordinate system) of the target (output) voxels. In general, if one is interpolating from one image grid (Img) to another (MaRdI-type object Img2), these arrays are obtained by the call: [X,Y,Z] = Img2.getvoxelpositions() mask: [Optional, default = true(size output image grid)] A logical array (size=output image grid) specifying the subset of the output voxels that are of interest. (i.e. voxels in the output image with a corresponding mask entry == FALSE will simply be assigned zero). Note: Specifying the region of interest for extrapolation with this variable can greatly accelerate the interpolation! Advanced Usage TODO [F] = RESLICEIMG( Img, X, Y, Z, mask, F ) case: interpolationMethod [default='linear'] is a string supported by the scatteredInterpolant constructor. F is the object of type 'scatteredInterpolant' used for interpolation. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, X_Ep, Y_Ep, Z_Ep, varargin OutputNames : F DefiningClass : MaRdI","title":"resliceimg"},{"location":"3_contributing/api_documentation/Img/MaRdI/#isocenter","text":"Synopsis : ISOCENTER xyzIso = ISOCENTER( Img ) Returns the 3-element vector of the x, y and z coordinates of the magnet isocenter in the patient coordinate system Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : xyzIso DefiningClass : MaRdI","title":"isocenter"},{"location":"3_contributing/api_documentation/Img/MaRdI/#isphase","text":"Synopsis : Returns TRUE if Img is a phase image, FALSE otherwise. isPhase = ISPHASE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isPhase DefiningClass : MaRdI","title":"isphase"},{"location":"3_contributing/api_documentation/Img/MaRdI/#ismagnitude","text":"Synopsis : Returns TRUE if Img is a magnitude image, FALSE otherwise. isMag = ISMAGNITUDE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : isMag DefiningClass : MaRdI","title":"ismagnitude"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getvoxelspacing","text":"Synopsis : GETVOXELSPACING h = GETVOXELSPACING( Img ) Returns 3-component grid-spacing vector [units: mm]: h(1) : row spacing (between centers of adjacent rows, i.e. vertical spacing). h(2) : column spacing (between the centers of adjacent columns, i.e. horizontal spacing). h(3) : slice spacing (between the centers of adjacent slices, i.e. from the DICOM hdr, this is Hdr.SpacingBetweenSlices - for a 2D acquisition this not necessarily the same as Hdr.SliceThickness). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : h DefiningClass : MaRdI","title":"getvoxelspacing"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getvoxelpositions","text":"Synopsis : GETVOXELPOSITIONS [X,Y,Z] = GETVOXELPOSITIONS( Img ) Returns three 3D arrays of doubles, each element containing the location [units: mm] of the corresponding voxel with respect to DICOM's 'Reference Coordinate System'. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : X, Y, Z DefiningClass : MaRdI","title":"getvoxelpositions"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getreliabilitymask","text":"Synopsis : GETRELIABILITYMASK mask = getreliabilitymask( Mag ) mask = getreliabilitymask( Mag, threshold ) For each echo and each measurement, GETRELIABILITYMASK normalizes Mag.img(:,:,:,iEcho,iMeasurement) and returns a logical mask wherein elements are assigned TRUE whenever the corresponding normalized magnitude voxel is > threshold By default, threshold = 0.01 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Mag, threshold OutputNames : mask DefiningClass : MaRdI","title":"getreliabilitymask"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getnumberofvoxels","text":"Synopsis : GETNUMBEROFVOXELS GETNUMBEROFVOXELS Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVoxels DefiningClass : MaRdI","title":"getnumberofvoxels"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getgyromagneticratio","text":"Synopsis : GETGYROMAGNETICRATIO Gyro = getgyromagneticratio( Img ) Examines .Hdr of MaRdI-type Img for .ImagedNucleus and returns gyromagnetic ratio in units of rad/s/T. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : GYRO DefiningClass : MaRdI","title":"getgyromagneticratio"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getgridsize","text":"Synopsis : Image dimensions as 3-element vector (rows, columns, slices) gridSize = GETGRIDSIZE( Img ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : gridSize DefiningClass : MaRdI","title":"getgridsize"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getfieldofview","text":"Synopsis : GETFIELDOFVIEW fov = GETFIELDOFVIEW( Img ) ; Returns field of view in units of mm : [Row Column Slice] dimensions Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : fieldOfView DefiningClass : MaRdI","title":"getfieldofview"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getechotime","text":"Synopsis : GETECHOTIME TE = GETECHOTIME( Img ) TE = GETECHOTIME( Img, iEcho ) Returns vector of echo times in units of ms. If 2nd argument (echo index iEcho) is provided, GETECHOTIME returns the TE of the corresponding echo. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, iEcho OutputNames : echoTime DefiningClass : MaRdI","title":"getechotime"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getpartialfourierfactors","text":"Synopsis : Returns fraction of k-space coverage in each dim pff = GETPARTIALFOURIERFACTORS( Img ) Returns 3-element vector of partial Fourier factors in read, phase (in-plane), and partition (slice) encoding directions. NOTE: Siemens uses an enumeration scheme to store Partial Fourier info in the DICOM header: pff --> Siemens DICOM Hdr entry 4/8 --> 0x1 = 1 5/8 --> 0x2 = 2 6/8 --> 0x4 = 4 7/8 --> 0x8 = 8 8/8 --> 0x10 = 16 (i.e. no partial Fourier) See: https://github.com/malaterre/GDCM/blob/master/Source/DataDictionary/CSAHeader.xml Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : pff DefiningClass : MaRdI","title":"getpartialfourierfactors"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getnumberofslices","text":"Synopsis : Returns number of acquired slices nSlices = GETNUMBEROFSLICES( Img ) NOTE: nSlices is not necessarily equal to size( Img.img, 3). e.g. For a 3d (slab) encoding, GETNUMBEROFSLICES returns 1. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nSlices DefiningClass : MaRdI","title":"getnumberofslices"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getnumberofmeasurements","text":"Synopsis : Returns the number of measurements n = GETNUMBEROFMEASUREMENTS( Img ) NOTE GETNUMBEROFMEASUREMENTS( Img ) is equivalent to n = size( Img.img, 5 ), however GETNUMBEROFMEASUREMENTS also checks the DICOM header in Img.Hdr and issues a warning if n differs from the expected value (Img.Hdr.MrProt.lRepetitions +1). Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : nVolumes DefiningClass : MaRdI","title":"getnumberofmeasurements"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getimagetype","text":"Synopsis : Returns image type as string imgType = GETIMAGETYPE( Img ) Returns either 'PHASE', 'MAGNITUDE', or 'UNKNOWN' Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : imgType DefiningClass : MaRdI","title":"getimagetype"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getimagingfrequency","text":"Synopsis : Returns Larmor frequency in Hz f0 = GETIMAGINGFREQUENCY( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0 DefiningClass : MaRdI","title":"getimagingfrequency"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getacquisitiontime","text":"Synopsis : GETACQUISITIONTIME t = GETACQUISITIONTIME( Img ) Derives from the AcquisitionTime field in Siemens DICOM header to return an array of doubles describing the milliseconds elapsed since midnight dimensions of t: [ nSlices x nEchoes x nMeasurements ] t - t(1) yields the elapsed time since acquisition of the 1st k-space point in the series. For EPI MOSAIC (which has a single AcquisitionTime value for each volume), t( iSlice ) = AcquisitionTime (first slice) + iSlice*(volumeTR/nSlices) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t DefiningClass : MaRdI","title":"getacquisitiontime"},{"location":"3_contributing/api_documentation/Img/MaRdI/#filter","text":"Synopsis : FILTER 3D low-pass (weighted or unweighted) or median filtering. Wraps to smooth3() or medfilt3() accordingly. [] = FILTER( Img ) [] = FILTER( Img, weights ) [] = FILTER( Img, weights, Params ) Img the MaRdI-type image volume. weights an array of data weights (>=0) to penalize (for smooth3) or exclude (for medfilt3()) identifiable outliers. Dimensions of weights must be the same as the image volume (i.e. Img.getgridsize() ) Params an optional struct for which the following Params.fields are supported .kernelSize in number of voxels default = [3 3 3] .method 'gaussian' OR 'box' OR 'median' default = 'gaussian' TODO Add support for 2d (single slice) images Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, weights, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"filter"},{"location":"3_contributing/api_documentation/Img/MaRdI/#exist","text":"Synopsis : EXIST EXIST Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : is DefiningClass : MaRdI","title":"exist"},{"location":"3_contributing/api_documentation/Img/MaRdI/#estimatekorigintime","text":"Synopsis : ESTIMATEKORIGINTIME t0 = ESTIMATEKORIGINTIME( Img ) Returns an estimate of when the k-space origin of an image was sampled relative to the AcquisitionTime (field in Siemens DICOM header) as a double in units of milliseconds. See also: MaRdI.getacquisitiontime() NOTE: This is a crude estimate and only the case of Cartesian k-space sampling, beginning at the k_min periphery, has been considered in the current implementation! Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : t0 DefiningClass : MaRdI","title":"estimatekorigintime"},{"location":"3_contributing/api_documentation/Img/MaRdI/#copy","text":"Synopsis : COPY Make a copy of a MaRdI (i.e. handle) object. ImgCopy = Copy( Img ) ; Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : ImgCopy DefiningClass : MaRdI","title":"copy"},{"location":"3_contributing/api_documentation/Img/MaRdI/#associateaux","text":"Synopsis : - link image to corresponding auxiliary recording object Usage [] = ASSOCIATEAUX( Img, Aux ) [] = ASSOCIATEAUX( Img, Aux, Params ) ....... Description Function compares an acquired image (typically, a time-series of multiple images) and an auxiliary recording (e.g. respiratory trace, ideally featuring synchronization triggers) and returns (copies to Img.Aux) an estimate of the Aux recording corresponding to each image measurement. Cases: 1. Single measurement Aux: The value is copied across all image time points 2. Single measurement Img: If Aux possesses multiple measurements, the image is presumed to have been taken during a breath-hold. In this case, the Aux signal variance is calculated over a shifting time-window (width = total image acquisition time) and the median Aux value over the window pertaining to the least variance is returned. (Length of Aux recording must be >= total scan time). 3. Img and Aux are both time-series: Length of Aux recording must be >= length of the image time-series. 3.0: Img and Aux time-points already correspond: Aux is simply copied. 3.1: Aux recording possesses a single synchronization trigger: The trigger is assumed to correspond to the first image in the time series. Aux is cropped and linearly interpolated. 3.2: Aux recording possesses multiple synchronization triggers: NOT IMPLEMENTED 3.3: Aux recording does not possess triggers: DEPRECATED ....... Params - optional struct for which the following Params.fields are supported Only used in Case 3 (image time series): .interpolationMethod [default = 'linear'] argument to INTERP1(), used to interpolate between Aux samples (see INTERP1 for other options) .auxDelay [default = 0] estimation of transmission delay inherent in the Aux recording process [units: ms] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img, Aux, Params OutputNames : [N/A] DefiningClass : MaRdI","title":"associateaux"},{"location":"3_contributing/api_documentation/Img/MaRdI/#adjvalidateshim","text":"Synopsis : ADJVALIDATESHIM [f0, g0, s0] = ADJVALIDATESHIM( Img ) ADJVALIDATESHIM is not a particularly revealing name for a function; however, it is based on the Siemens AdjValidate commandline tool, with a \"-shim\" input argument. f0 = scalar Larmor (Tx) freq. [ units : Hz ] g0 = 3-element vector of the linear gradient offsets (gX, gY, gZ) [units : DAC bits] s0 = 5-element vector of 2nd order shim currents [units : mA] To convert to the units of the 3D Shim card on the Siemens (Prisma) console, see ShimSpecs_IUGM_Prisma_fit.converttomultipole( ) ShimSpecs_HGM_Prisma_fit.converttomultipole( ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Img OutputNames : f0, g0, s0 DefiningClass : MaRdI","title":"adjvalidateshim"},{"location":"3_contributing/api_documentation/Img/MaRdI/#mardi_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgPath OutputNames : Img DefiningClass : MaRdI","title":"MaRdI"},{"location":"3_contributing/api_documentation/Img/MaRdI/#scalephasetofrequency","text":"Synopsis : SCALEPHASETOFREQUENCY Converts unwrapped phase [units:rad] to field [units: Hz] Field = scalephasetofrequency( UnwrappedPhase ) Phase = scalephasetofrequency( Field, -1 ) The 'undo' mode with -1 as the 2nd argument scales from Hz back to rad Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, undoFlag OutputNames : [N/A] DefiningClass : MaRdI","title":"scalephasetofrequency"},{"location":"3_contributing/api_documentation/Img/MaRdI/#iscoincident","text":"Synopsis : Check coincidence of 2 images isSame = ISCOINCIDENT( Img1, Img2 ) Returns TRUE if Img1 and Img2 possess coincident voxel positions and number of measurements/volumes TODO: Check additional properties + add outputs for each? Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img1, Img2 OutputNames : isSame DefiningClass : MaRdI","title":"iscoincident"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getinterpolant","text":"Synopsis : Return object of type scatteredInterpolant GETINTERPOLANT returns an instance of Matlab's scatteredInterpolant class, useful for interpolating between different image grids (voxel positions). Interpolant = GETINTERPOLANT( Img ) Interpolant = GETINTERPOLANT( Img, method ) Interpolant = GETINTERPOLANT( Img, method, extrapolationMethod ) Default Interpolant property assignments: .Method = 'linear' [i.e. the *interpolation* method] .ExtrapolationMethod = 'none' .Values = [vectorized voxel values of 1st echo/measurement, i.e.: Img.img(:,:,:,1,1)] Note that all 3 properties can be reassigned at any point upon return. For info on the 2 optional arguments, see help scatteredInterpolant Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : protected InputNames : Img, method, extrapolationMethod OutputNames : Interpolant DefiningClass : MaRdI","title":"getinterpolant"},{"location":"3_contributing/api_documentation/Img/MaRdI/#setslicenormalvector","text":"Synopsis : SETSLICENORMALVECTOR For determining voxel positions in 3d slice-stack Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"setslicenormalvector"},{"location":"3_contributing/api_documentation/Img/MaRdI/#reshapemosaic","text":"Synopsis : RESHAPEMOSAIC Reshape Siemens mosaic into volume and remove padded zeros Adapted from dicm2nii by xiangrui.li@gmail.com http://www.mathworks.com/matlabcentral/fileexchange/42997 Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img OutputNames : Img DefiningClass : MaRdI","title":"reshapemosaic"},{"location":"3_contributing/api_documentation/Img/MaRdI/#rescaleimg","text":"Synopsis : RESCALEIMG []=RESCALEIMG( Img ) []=RESCALEIMG( Img, isUndoing ) Only alters phase images (+ Hdr) by rescaling to radians. Mag. is unaffected. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img, isUndoing OutputNames : [N/A] DefiningClass : MaRdI","title":"rescaleimg"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getdirectioncosines","text":"Synopsis : GETDIRECTIONALCOSINES \"The direction cosines of a vector are the cosines of the angles between the vector and the three coordinate axes. Equivalently, they are the contributions of each component of the basis to a unit vector in that direction.\" https://en.wikipedia.org/wiki/Direction_cosine [r,c,s] = GETDIRECTIONALCOSINES( Img ) r: row index direction cosine c: column index \" \" s: slice index \" \" NB: the *index* term. r & c may be defined obstrusely: i.e. r is not the row direction cosine (c is!), it is the direction cosine of the vector that points along the direction of increasing row indices (i.e. it's in the column direction!) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Img OutputNames : r, c, s DefiningClass : MaRdI","title":"getdirectioncosines"},{"location":"3_contributing/api_documentation/Img/MaRdI/#nii","text":"Synopsis : - Write MaRdI image to NiFtI file Wraps to NII( ) (which wraps to the NiFtI toolbox) ..... Syntax nii( Img ) ..... WARNING nii() function is convenient for quickly writing a file to throw into an external viewing application (e.g. ImageJ). The nifti Hdr info (i.e. orientation) is probably all wrong. To save NifTI's properly (takes longer) use Img.write() Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : Img OutputNames : [N/A] DefiningClass : MaRdI","title":"nii"},{"location":"3_contributing/api_documentation/Img/MaRdI/#segmentspinalcanal_s","text":"Synopsis : SEGMENTSPINALCANAL_S Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Params OutputNames : mask, weights DefiningClass : MaRdI","title":"segmentspinalcanal_s"},{"location":"3_contributing/api_documentation/Img/MaRdI/#findimages","text":"Synopsis : FINDIMAGES list = FINDIMAGES( imageDirectory ) Calls dir() to return list of .dcm OR .IMA files in imageDirectory and its echo_* subdirectories Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : imgDir OutputNames : list DefiningClass : MaRdI","title":"findimages"},{"location":"3_contributing/api_documentation/Img/MaRdI/#compareimggrids","text":"Synopsis : COMPAREIMGGRIDS isSame = COMPAREIMGGRIDS( Img1, Img2 ) isSame = COMPAREIMGGRIDS( X1, Y1, Z1, X2, Y2, Z2 ) Returns TRUE if voxel positions of Img1 and Img2 are identical Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : isSame DefiningClass : MaRdI","title":"compareimggrids"},{"location":"3_contributing/api_documentation/Img/MaRdI/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : MaRdI","title":"empty"},{"location":"3_contributing/api_documentation/Img/MaRdI/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/Img/MaRdI/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/Img/MaRdI/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/Img/MaRdI/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/Img/MaRdI/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/Img/MaRdI/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/Img/MaRdI/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/Img/MaRdI/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/Img/MaRdI/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/Img/MaRdI/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/Img/MaRdI/#delete","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"delete"},{"location":"3_contributing/api_documentation/Img/MaRdI/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/Img/MaRdI/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/Img/MaRdI/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Img/MaRdI/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/Img/MaRdI/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/Img/MaRdI/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/Img/read_nii/","text":"read_nii Filetype: MATLAB\u00ae function Synopsis: Load NIfTI image and header; and, when present, the accompanying .json sidecar [img, info] = read_nii( niiFile ) [img, info, json] = read_nii( niiFile ) The input niiFile is the path to the NIfTI image as a string scalar or character vector. When called with 2 output arguments, the function is equivalent short-hand for info = niftiinfo( niiFile ); img = niftiread( info ) When called with the 3rd output argument, the function checks the parent folder of niiFile for an identically named file but with a .json file extension. When such a file is present, the 3rd output is returned as a struct via json = jsondecode( fileread( jsonFile ) ); otherwise, json = [] . Attributes nInputs : 1 nOutputs : 3","title":"read_nii"},{"location":"3_contributing/api_documentation/Img/read_nii/#read_nii","text":"Filetype: MATLAB\u00ae function Synopsis: Load NIfTI image and header; and, when present, the accompanying .json sidecar [img, info] = read_nii( niiFile ) [img, info, json] = read_nii( niiFile ) The input niiFile is the path to the NIfTI image as a string scalar or character vector. When called with 2 output arguments, the function is equivalent short-hand for info = niftiinfo( niiFile ); img = niftiread( info ) When called with the 3rd output argument, the function checks the parent folder of niiFile for an identically named file but with a .json file extension. When such a file is present, the 3rd output is returned as a struct via json = jsondecode( fileread( jsonFile ) ); otherwise, json = [] .","title":"read_nii"},{"location":"3_contributing/api_documentation/Img/read_nii/#attributes","text":"nInputs : 1 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/Img/misc/dicominfosiemens/","text":"dicominfosiemens Filetype: MATLAB\u00ae function Synopsis: Return DICOM Hdr, augmented with fields from Siemens private header Hdr = dicominfosiemens( filename ) Hdr = dicominfosiemens( Hdr ) Wraps to dicominfo to return the standard header struct, and augments it with fields .Img, .Ser, .MrProt courtesy of parse_siemens_shadow . The input can be either the DICOM filename, or the corresponding Hdr struct as returned by dicominfo( filename ) ETC See also dicominfo, parse_siemens_shadow Attributes nInputs : -1 nOutputs : 1","title":"dicominfosiemens"},{"location":"3_contributing/api_documentation/Img/misc/dicominfosiemens/#dicominfosiemens","text":"Filetype: MATLAB\u00ae function Synopsis: Return DICOM Hdr, augmented with fields from Siemens private header Hdr = dicominfosiemens( filename ) Hdr = dicominfosiemens( Hdr ) Wraps to dicominfo to return the standard header struct, and augments it with fields .Img, .Ser, .MrProt courtesy of parse_siemens_shadow . The input can be either the DICOM filename, or the corresponding Hdr struct as returned by dicominfo( filename ) ETC See also dicominfo, parse_siemens_shadow","title":"dicominfosiemens"},{"location":"3_contributing/api_documentation/Img/misc/dicominfosiemens/#attributes","text":"nInputs : -1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/Ui/ShimGui/ShimGui/","text":"ShimGui Filetype: MATLAB\u00ae function Synopsis: SHIMGUI Folders named ShimGui Ui/ShimGui Attributes nInputs : -1 nOutputs : -1","title":"ShimGui"},{"location":"3_contributing/api_documentation/Ui/ShimGui/ShimGui/#shimgui","text":"Filetype: MATLAB\u00ae function Synopsis: SHIMGUI Folders named ShimGui Ui/ShimGui","title":"ShimGui"},{"location":"3_contributing/api_documentation/Ui/ShimGui/ShimGui/#attributes","text":"nInputs : -1 nOutputs : -1","title":"Attributes"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/","text":"ProbeTracking Filetype: MATLAB\u00ae classdef Synopsis: - Respiratory probe This class deals with respiratory sensor recording. ....... Usage P = ProbeTracking() ; P = ProbeTracking( Specs ) ; When called without arguments, ProbeTracking will attempt to find a connected probe device (in /dev/) based on a set of known device names (operating system and station dependent). [TODO: Add KnownDevices.m ?] If a device is discovered, by default and if properly configured (see NOTE [1]), a second (\"daemon\") MATLAB session is launched in the background to record continuously from the device. To record and display the signal at any given moment, the user calls P.recordphysiosignal(), which reads back the live recording from the daemon session through a shared memory-mapping. A graphical STOP button appears which, when pressed, ends this windowed recording and saves it to file without ending the background recording (so P.recordphysiosignal() can be called again). For more options, type: help ProbeTracking.recordphysiosignal P = ProbeTracking( Specs ) ; Specs.isRecordingDaemonEnabled (bool) true: device I/O (probe recording) and signal processing are performed in a secondary background/daemon MATLAB session. User session can still monitor the live recording with Probe.recordphysiosignal() false: device I/O and signal processing is done in the same session. This is useful for debugging. For dual recording (e.g., pressure + capacitive probe), do the following: Plug both probes, then launch the deamon for one probe: P = ProbeTracking(); Then, create a new structure with portName of the 2nd probe: AuxSpecs.portName = 'tty.usbmodem4873121' (find the proper port address under /dev after plugging the usb) Create a new object (daemon): C = ProbeTracking(AuxSpecs) To record with both probes: P.recordphysiosignal(C) ....... NOTE [1]: The daemon configuration requires 3 things: 1. The file '~/startup.m' must exist and you must add the realtime_shimming_repository directory to the MATLAB path, e.g. addpath( genpath( '~/Code/realtime_shimming_repository/' ) ) ; 2. For #3 to work, matlab needs to exist in the system path, e.g. add the following lines (adapted to refer to your version of MATLAB) to ~/.bash_profile (or ~/.bashrc) # add MATLAB path export PATH=$PATH:/Applications/MATLAB_R2015a.app/bin/ 3. The user needs to start their MATLAB session from the command line, and from their home folder, e.g. user@polymtl ~ $ matlab & ....... P has properties: .Data .Log .Source .Specs ========================================================================= Author: ryan.topfer@polymtl.ca ========================================================================= Documentation for ProbeTracking doc ProbeTracking Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: matlab.mixin.SetGet Properties Data Synopsis: ProbeTracking/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking Log Synopsis: ProbeTracking/Log is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking Source Synopsis: ProbeTracking/Source is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking Specs Synopsis: - state = {active, inactive, inert, void} Specs - state = {active, inactive, inert, void} Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking Methods resetdaemon Synopsis : RESETDAEMON Resets the daemon recording: i.e. Preceding recording is retained in Aux.Log but the signal processing will begin afresh. (Use when patient position changes, for example.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking saverecording Synopsis : SAVERECORDING SAVERECORDING( Aux ) SAVERECORDING( Aux, logFilename ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux, logFilename OutputNames : [N/A] DefiningClass : ProbeTracking recordphysiosignal Synopsis : RECORDPHYSIOSIGNAL Continuously tracks respiratory probe. Syntax [] = RECORDPHYSIOSIGNAL( Aux, Params ) [] = RECORDPHYSIOSIGNAL( Aux, Aux2, Params ) RECORDPHYSIOSIGNAL( Aux, Params ) will begin a new recording (and, optionally, real-time plotting) from the probe 'Aux'. With an additional probe input 'Aux2', dual recording is performed NOTE: Aux and Aux2 must possess the same sampling period (i.e. Aux.Specs.dt == Aux2.Specs.dt) ....................... The following Params.fields are supported .isSavingData default = true .filename default: Named by ProbeTracking.saverecording() .runTime Total sampling time in seconds. default = 15*60 [i.e. 15 minutes] .isPlottingInRealTime [default : true ] .refreshRate Rate at which the real-time display refreshes. Problems may arise if this is too fast! [default : 4 Hz ] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux1, varargin OutputNames : [N/A] DefiningClass : ProbeTracking recordandplotphysiosignal Synopsis : RECORDANDPLOTPHYSIOSIGNAL Calls ProbeTracking.recordphysiosignal() to record probe data, after which user is prompted whether to proceed (e.g. save + return) or re-record. [] = RECORDANDPLOTPHYSIOSIGNAL( Aux, Parameters ) See HELP ProbeTracking.recordphysiosignal() for accepted Parameters Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux, Params OutputNames : [N/A] DefiningClass : ProbeTracking killrecordingdaemon Synopsis : KILLRECORDINGDAEMON Sends STOP byte to daemon session Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking getupdate Synopsis : GETUPDATE [pRaw, p] = GETUPDATE( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : pRaw, p, t DefiningClass : ProbeTracking clearrecording Synopsis : CLEARRECORDING Empties subfields of Aux.Data [] = CLEARRECORDING( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking stoprecording Synopsis : STOPRECORDING Closes communication port/source + marks recording end time [] = STOPRECORDING( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking calibratelimiting Synopsis : CALIBRATELIMITING [] = CALIBRATELIMITING( Aux ) Record 1 min of signal to determine the theshold levels beyond which limiting will be applied. 5 standard deviations either above or below the mean determines levels. Limits are saved in Aux.Specs.clipLimits Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux, Params OutputNames : [N/A] DefiningClass : ProbeTracking beginrecording Synopsis : - Initialize & open (RS-232) communication port [isRecording] = BEGINRECORDING( Aux ) Opens Aux.Source Returns TRUE if successful Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : isRecording DefiningClass : ProbeTracking delete Synopsis : DELETE DELETE( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking copy Synopsis : COPY Aux = COPY( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : AuxCopy DefiningClass : ProbeTracking ProbeTracking Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Aux DefiningClass : ProbeTracking launchrecordingdaemon Synopsis : LAUNCHRECORDINGDAEMON [] = LAUNCHRECORDINDAEMON( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking createrecordingdaemon Synopsis : CREATERECORDINGDAEMON CREATERECORDINDAEMON( Aux ) Saves the instantiated Aux object, and launches a background (daemon) Matlab session to load the object and begin background recording. The daemon session reads directly from the USB (Com) port while the user session reads from a file buffer. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking writeupdatetologfile Synopsis : WRITEUPDATETOLOGFILE WRITEUPDATETOLOGFILE Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking readupdatefromlogfile Synopsis : READUPDATEFROMLOGFILE READUPDATEFROMLOGFILE Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : nSamples, pRaw, p, t, trigger DefiningClass : ProbeTracking createlogfile Synopsis : CREATELOGFILE [] = CREATELOGFILE( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking selectmedianmeasurement Synopsis : SELECTMEDIANMEASUREMENT medianMeasure = SELECTMEDIANMEASUREMENT( measurementLog ) medianMeasure = SELECTMEDIANMEASUREMENT( measurementLog, nSamplesApnea ) medianMeasure = SELECTMEDIANMEASUREMENT( measurementLog, nSamplesApnea, isUserSelectionEnabled ) Plots measurementLog and the user selects START and END (apnea) indices over which to calculate the median. The median measurement is superposed over the measurementLog graph and the user is asked if the result is satisfactory (or redo). Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLog, nSamplesApnea, isUserSelectionEnabled OutputNames : medianMeasure DefiningClass : ProbeTracking findflattest Synopsis : FINDFLATTEST iFlattest = FINDFLATTEST( measurementLog, nSamples ) Calculates measurementLog variance over sliding window (nSamples long) and returns index (iFlattest) corresponding to start of the most constant segment (e.g. a breath-hold). Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLog, nSamples OutputNames : iFlattest DefiningClass : ProbeTracking plotmeasurementlog Synopsis : PLOTMEASUREMENTLOG PLOTMEASUREMENTLOG( measurementLog ) ; PLOTMEASUREMENTLOG( measurementLog, Params ) Supported fields to Params struct .figureTitle [default: 'Respiration'] .sampleTimes vector (length == length(measurementLog)) of sample times in seconds .yLabel [default: 'Amplitude (AU)'] Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLog, Params OutputNames : [N/A] DefiningClass : ProbeTracking loadlog_siemens Synopsis : Load Siemens PMU recording [ Data ] = loadlog_siemens( filename ) Input filename name of PMU log (text) file Function based on load_PMU_resp.m by eva.alonso.ortiz@gmail.com which derived from https://github.com/timothyv/Physiological-Log-Extraction-for-Modeling--PhLEM--Toolbox https://cfn.upenn.edu/aguirre/wiki/public:pulse-oximetry_during_fmri_scanning Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : filename OutputNames : Data DefiningClass : ProbeTracking loadlog Synopsis : LOADLOG Loads a respiratory recording and returns Data struct Data = loadlog( filename ) filename must be the path to a .mat file saved by ProbeTracking, or to a text file with a .resp file extension, indicating a Siemens PMU recording, in which case loadlog wraps to loadlog_siemens() Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : filename OutputNames : Data DefiningClass : ProbeTracking loadmeasurementlog Synopsis : LOADMEASUREMENTLOG Reads binary file of data measurements (e.g. pressure recording) to return vector(s) of doubles. measurementLog = LOADMEASUREMENTLOG( measurementLogFilename ) ; [measurementLog, sampleTimes] = LOADMEASUREMENTLOG( measurementLogFilename, sampleTimesFilename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLogFilename, sampleTimesFilename OutputNames : p, sampleTimes DefiningClass : ProbeTracking declareprobe Synopsis : Declares serial object for probe [Source, AuxSpecs] = declareprobe( AuxSpecs ) AuxSpecs can have the following fields .isRecordingDaemonEnabled Perform device I/O (probe recording) and signal processing in a secondary background/daemon MATLAB session. User session can monitor the live recording with Probe.recordphysiosignal() [default = true] .portName Address of the probe-associated serial port within file system e.g. AuxSpecs.portName = '/dev/tty.usbmodem487312' ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : AuxSpecs OutputNames : Source, AuxSpecs DefiningClass : ProbeTracking empty Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ProbeTracking set \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. get \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. setdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. getdisp \u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation. eq \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ne \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. lt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. gt \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. le \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. ge \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. isvalid \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findprop \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. notify \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. addlistener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. listener \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation. findobj \u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ProbeTracking"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#probetracking","text":"Filetype: MATLAB\u00ae classdef Synopsis: - Respiratory probe This class deals with respiratory sensor recording. ....... Usage P = ProbeTracking() ; P = ProbeTracking( Specs ) ; When called without arguments, ProbeTracking will attempt to find a connected probe device (in /dev/) based on a set of known device names (operating system and station dependent). [TODO: Add KnownDevices.m ?] If a device is discovered, by default and if properly configured (see NOTE [1]), a second (\"daemon\") MATLAB session is launched in the background to record continuously from the device. To record and display the signal at any given moment, the user calls P.recordphysiosignal(), which reads back the live recording from the daemon session through a shared memory-mapping. A graphical STOP button appears which, when pressed, ends this windowed recording and saves it to file without ending the background recording (so P.recordphysiosignal() can be called again). For more options, type: help ProbeTracking.recordphysiosignal P = ProbeTracking( Specs ) ; Specs.isRecordingDaemonEnabled (bool) true: device I/O (probe recording) and signal processing are performed in a secondary background/daemon MATLAB session. User session can still monitor the live recording with Probe.recordphysiosignal() false: device I/O and signal processing is done in the same session. This is useful for debugging. For dual recording (e.g., pressure + capacitive probe), do the following: Plug both probes, then launch the deamon for one probe: P = ProbeTracking(); Then, create a new structure with portName of the 2nd probe: AuxSpecs.portName = 'tty.usbmodem4873121' (find the proper port address under /dev after plugging the usb) Create a new object (daemon): C = ProbeTracking(AuxSpecs) To record with both probes: P.recordphysiosignal(C) ....... NOTE [1]: The daemon configuration requires 3 things: 1. The file '~/startup.m' must exist and you must add the realtime_shimming_repository directory to the MATLAB path, e.g. addpath( genpath( '~/Code/realtime_shimming_repository/' ) ) ; 2. For #3 to work, matlab needs to exist in the system path, e.g. add the following lines (adapted to refer to your version of MATLAB) to ~/.bash_profile (or ~/.bashrc) # add MATLAB path export PATH=$PATH:/Applications/MATLAB_R2015a.app/bin/ 3. The user needs to start their MATLAB session from the command line, and from their home folder, e.g. user@polymtl ~ $ matlab & ....... P has properties: .Data .Log .Source .Specs ========================================================================= Author: ryan.topfer@polymtl.ca ========================================================================= Documentation for ProbeTracking doc ProbeTracking Details Attribute Value Hidden false Sealed false Abstract false Enumeration false ConstructOnLoad false HandleCompatible true RestrictsSubclassing false InferiorClasses : [N/A] ContainingPackage : [N/A] EventList : [N/A] EnumerationMemberList : [N/A] Superclasses: matlab.mixin.SetGet","title":"ProbeTracking"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#properties","text":"","title":"Properties"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#data","text":"Synopsis: ProbeTracking/Data is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking","title":"Data"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#log","text":"Synopsis: ProbeTracking/Log is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking","title":"Log"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#source","text":"Synopsis: ProbeTracking/Source is a property. Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking","title":"Source"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#specs","text":"Synopsis: - state = {active, inactive, inert, void} Specs - state = {active, inactive, inert, void} Details Attribute Value Dependent false Constant false Abstract false Transient false Hidden false GetObservable false SetObservable false AbortSet false NonCopyable false HasDefault false GetAccess : public SetAccess : public PartialMatchPriority : [N/A] GetMethod : SetMethod : DefaultValue : Validation : [N/A] DefiningClass : ProbeTracking","title":"Specs"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#methods","text":"","title":"Methods"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#resetdaemon","text":"Synopsis : RESETDAEMON Resets the daemon recording: i.e. Preceding recording is retained in Aux.Log but the signal processing will begin afresh. (Use when patient position changes, for example.) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"resetdaemon"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#saverecording","text":"Synopsis : SAVERECORDING SAVERECORDING( Aux ) SAVERECORDING( Aux, logFilename ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux, logFilename OutputNames : [N/A] DefiningClass : ProbeTracking","title":"saverecording"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#recordphysiosignal","text":"Synopsis : RECORDPHYSIOSIGNAL Continuously tracks respiratory probe. Syntax [] = RECORDPHYSIOSIGNAL( Aux, Params ) [] = RECORDPHYSIOSIGNAL( Aux, Aux2, Params ) RECORDPHYSIOSIGNAL( Aux, Params ) will begin a new recording (and, optionally, real-time plotting) from the probe 'Aux'. With an additional probe input 'Aux2', dual recording is performed NOTE: Aux and Aux2 must possess the same sampling period (i.e. Aux.Specs.dt == Aux2.Specs.dt) ....................... The following Params.fields are supported .isSavingData default = true .filename default: Named by ProbeTracking.saverecording() .runTime Total sampling time in seconds. default = 15*60 [i.e. 15 minutes] .isPlottingInRealTime [default : true ] .refreshRate Rate at which the real-time display refreshes. Problems may arise if this is too fast! [default : 4 Hz ] Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux1, varargin OutputNames : [N/A] DefiningClass : ProbeTracking","title":"recordphysiosignal"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#recordandplotphysiosignal","text":"Synopsis : RECORDANDPLOTPHYSIOSIGNAL Calls ProbeTracking.recordphysiosignal() to record probe data, after which user is prompted whether to proceed (e.g. save + return) or re-record. [] = RECORDANDPLOTPHYSIOSIGNAL( Aux, Parameters ) See HELP ProbeTracking.recordphysiosignal() for accepted Parameters Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux, Params OutputNames : [N/A] DefiningClass : ProbeTracking","title":"recordandplotphysiosignal"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#killrecordingdaemon","text":"Synopsis : KILLRECORDINGDAEMON Sends STOP byte to daemon session Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"killrecordingdaemon"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#getupdate","text":"Synopsis : GETUPDATE [pRaw, p] = GETUPDATE( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : pRaw, p, t DefiningClass : ProbeTracking","title":"getupdate"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#clearrecording","text":"Synopsis : CLEARRECORDING Empties subfields of Aux.Data [] = CLEARRECORDING( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"clearrecording"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#stoprecording","text":"Synopsis : STOPRECORDING Closes communication port/source + marks recording end time [] = STOPRECORDING( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"stoprecording"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#calibratelimiting","text":"Synopsis : CALIBRATELIMITING [] = CALIBRATELIMITING( Aux ) Record 1 min of signal to determine the theshold levels beyond which limiting will be applied. 5 standard deviations either above or below the mean determines levels. Limits are saved in Aux.Specs.clipLimits Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux, Params OutputNames : [N/A] DefiningClass : ProbeTracking","title":"calibratelimiting"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#beginrecording","text":"Synopsis : - Initialize & open (RS-232) communication port [isRecording] = BEGINRECORDING( Aux ) Opens Aux.Source Returns TRUE if successful Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : isRecording DefiningClass : ProbeTracking","title":"beginrecording"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#delete","text":"Synopsis : DELETE DELETE( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"delete"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#copy","text":"Synopsis : COPY Aux = COPY( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : Aux OutputNames : AuxCopy DefiningClass : ProbeTracking","title":"copy"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#probetracking_1","text":"Synopsis : Constructor Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : varargin OutputNames : Aux DefiningClass : ProbeTracking","title":"ProbeTracking"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#launchrecordingdaemon","text":"Synopsis : LAUNCHRECORDINGDAEMON [] = LAUNCHRECORDINDAEMON( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"launchrecordingdaemon"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#createrecordingdaemon","text":"Synopsis : CREATERECORDINGDAEMON CREATERECORDINDAEMON( Aux ) Saves the instantiated Aux object, and launches a background (daemon) Matlab session to load the object and begin background recording. The daemon session reads directly from the USB (Com) port while the user session reads from a file buffer. Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"createrecordingdaemon"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#writeupdatetologfile","text":"Synopsis : WRITEUPDATETOLOGFILE WRITEUPDATETOLOGFILE Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"writeupdatetologfile"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#readupdatefromlogfile","text":"Synopsis : READUPDATEFROMLOGFILE READUPDATEFROMLOGFILE Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : nSamples, pRaw, p, t, trigger DefiningClass : ProbeTracking","title":"readupdatefromlogfile"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#createlogfile","text":"Synopsis : CREATELOGFILE [] = CREATELOGFILE( Aux ) Details Attribute Value Static false Abstract false Sealed false ExplicitConversion false Hidden false Access : private InputNames : Aux OutputNames : [N/A] DefiningClass : ProbeTracking","title":"createlogfile"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#selectmedianmeasurement","text":"Synopsis : SELECTMEDIANMEASUREMENT medianMeasure = SELECTMEDIANMEASUREMENT( measurementLog ) medianMeasure = SELECTMEDIANMEASUREMENT( measurementLog, nSamplesApnea ) medianMeasure = SELECTMEDIANMEASUREMENT( measurementLog, nSamplesApnea, isUserSelectionEnabled ) Plots measurementLog and the user selects START and END (apnea) indices over which to calculate the median. The median measurement is superposed over the measurementLog graph and the user is asked if the result is satisfactory (or redo). Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLog, nSamplesApnea, isUserSelectionEnabled OutputNames : medianMeasure DefiningClass : ProbeTracking","title":"selectmedianmeasurement"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#findflattest","text":"Synopsis : FINDFLATTEST iFlattest = FINDFLATTEST( measurementLog, nSamples ) Calculates measurementLog variance over sliding window (nSamples long) and returns index (iFlattest) corresponding to start of the most constant segment (e.g. a breath-hold). Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLog, nSamples OutputNames : iFlattest DefiningClass : ProbeTracking","title":"findflattest"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#plotmeasurementlog","text":"Synopsis : PLOTMEASUREMENTLOG PLOTMEASUREMENTLOG( measurementLog ) ; PLOTMEASUREMENTLOG( measurementLog, Params ) Supported fields to Params struct .figureTitle [default: 'Respiration'] .sampleTimes vector (length == length(measurementLog)) of sample times in seconds .yLabel [default: 'Amplitude (AU)'] Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLog, Params OutputNames : [N/A] DefiningClass : ProbeTracking","title":"plotmeasurementlog"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#loadlog_siemens","text":"Synopsis : Load Siemens PMU recording [ Data ] = loadlog_siemens( filename ) Input filename name of PMU log (text) file Function based on load_PMU_resp.m by eva.alonso.ortiz@gmail.com which derived from https://github.com/timothyv/Physiological-Log-Extraction-for-Modeling--PhLEM--Toolbox https://cfn.upenn.edu/aguirre/wiki/public:pulse-oximetry_during_fmri_scanning Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : filename OutputNames : Data DefiningClass : ProbeTracking","title":"loadlog_siemens"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#loadlog","text":"Synopsis : LOADLOG Loads a respiratory recording and returns Data struct Data = loadlog( filename ) filename must be the path to a .mat file saved by ProbeTracking, or to a text file with a .resp file extension, indicating a Siemens PMU recording, in which case loadlog wraps to loadlog_siemens() Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : filename OutputNames : Data DefiningClass : ProbeTracking","title":"loadlog"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#loadmeasurementlog","text":"Synopsis : LOADMEASUREMENTLOG Reads binary file of data measurements (e.g. pressure recording) to return vector(s) of doubles. measurementLog = LOADMEASUREMENTLOG( measurementLogFilename ) ; [measurementLog, sampleTimes] = LOADMEASUREMENTLOG( measurementLogFilename, sampleTimesFilename ) Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : measurementLogFilename, sampleTimesFilename OutputNames : p, sampleTimes DefiningClass : ProbeTracking","title":"loadmeasurementlog"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#declareprobe","text":"Synopsis : Declares serial object for probe [Source, AuxSpecs] = declareprobe( AuxSpecs ) AuxSpecs can have the following fields .isRecordingDaemonEnabled Perform device I/O (probe recording) and signal processing in a secondary background/daemon MATLAB session. User session can monitor the live recording with Probe.recordphysiosignal() [default = true] .portName Address of the probe-associated serial port within file system e.g. AuxSpecs.portName = '/dev/tty.usbmodem487312' ; Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden false Access : public InputNames : AuxSpecs OutputNames : Source, AuxSpecs DefiningClass : ProbeTracking","title":"declareprobe"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#empty","text":"Synopsis : Returns an empty object array of the given size Details Attribute Value Static true Abstract false Sealed false ExplicitConversion false Hidden true Access : public InputNames : varargin OutputNames : E DefiningClass : ProbeTracking","title":"empty"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#set","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"set"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#get","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"get"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#setdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"setdisp"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#getdisp","text":"\u2014 built-in method derived from class matlab.mixin.SetGet . For more info, refer to the MATLAB documentation.","title":"getdisp"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#eq","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"eq"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#ne","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ne"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#lt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"lt"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#gt","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"gt"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#le","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"le"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#ge","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"ge"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#isvalid","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"isvalid"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#findprop","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findprop"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#notify","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#notify_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"notify"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#addlistener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#listener","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#addlistener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#listener_1","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#addlistener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#listener_2","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#addlistener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#listener_3","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#addlistener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"addlistener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#listener_4","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"listener"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/ProbeTracking/#findobj","text":"\u2014 built-in method derived from class handle . For more info, refer to the MATLAB documentation.","title":"findobj"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/filter_signal/","text":"filter_signal Filetype: MATLAB\u00ae function Synopsis: Filter the input probe signal for drifts and high frequency glitches. Input: probe_type {'capacitive', 'pressure'}: Type of respiratory sensor signal {str, vector}: Signal to filter. If signal is a string, it is considered as a file name. If it is a vector it is considered as the raw signal to filter. Attributes nInputs : 2 nOutputs : 1","title":"filter_signal"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/filter_signal/#filter_signal","text":"Filetype: MATLAB\u00ae function Synopsis: Filter the input probe signal for drifts and high frequency glitches. Input: probe_type {'capacitive', 'pressure'}: Type of respiratory sensor signal {str, vector}: Signal to filter. If signal is a string, it is considered as a file name. If it is a vector it is considered as the raw signal to filter.","title":"filter_signal"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/filter_signal/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/get_capacitive_probe_signal/","text":"get_capacitive_probe_signal Filetype: MATLAB\u00ae function Synopsis: Main function that retrieves capacitive probe signal in real time and filter it appropriately. FS: Structure that gathers info from probe data_cprobe: signal from probe Attributes nInputs : 0 nOutputs : 0","title":"get_capacitive_probe_signal"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/get_capacitive_probe_signal/#get_capacitive_probe_signal","text":"Filetype: MATLAB\u00ae function Synopsis: Main function that retrieves capacitive probe signal in real time and filter it appropriately. FS: Structure that gathers info from probe data_cprobe: signal from probe","title":"get_capacitive_probe_signal"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/get_capacitive_probe_signal/#attributes","text":"nInputs : 0 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/tracking_CapacitiveProbe/","text":"tracking_CapacitiveProbe Filetype: MATLAB\u00ae script Synopsis: is a script. tracking_CapacitiveProbe is a script.","title":"tracking_CapacitiveProbe"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/tracking_CapacitiveProbe/#tracking_capacitiveprobe","text":"Filetype: MATLAB\u00ae script Synopsis: is a script. tracking_CapacitiveProbe is a script.","title":"tracking_CapacitiveProbe"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/CapacitiveProbe/new_respiratory_probe_tracking/","text":"new_respiratory_probe_tracking Filetype: MATLAB\u00ae script Synopsis: is a script. new_respiratory_probe_tracking is a script.","title":"new_respiratory_probe_tracking"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/CapacitiveProbe/new_respiratory_probe_tracking/#new_respiratory_probe_tracking","text":"Filetype: MATLAB\u00ae script Synopsis: is a script. new_respiratory_probe_tracking is a script.","title":"new_respiratory_probe_tracking"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/CapacitiveProbe/new_respiratory_probe_tracking_filtered/","text":"new_respiratory_probe_tracking_filtered Filetype: MATLAB\u00ae script Synopsis: is a script. new_respiratory_probe_tracking_filtered is a script.","title":"new_respiratory_probe_tracking_filtered"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/CapacitiveProbe/new_respiratory_probe_tracking_filtered/#new_respiratory_probe_tracking_filtered","text":"Filetype: MATLAB\u00ae script Synopsis: is a script. new_respiratory_probe_tracking_filtered is a script.","title":"new_respiratory_probe_tracking_filtered"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/PressureProbe/probe/","text":"probe Filetype: MATLAB\u00ae function Synopsis: PROBE Description Reads pressure data from microcontroller Syntax PROBE( Parameters ) ....................... The following Parameter.fields are supported .isPlottingInRealtime default = false Plots pressure vs. time during acquisition. .isSavingPressureLog default = true .pressureLogFilename default = [./pressureLog.bin] .pressureTimesFilename default = [PATH_TO_PRESSURE_LOG /pressureTimes.bin] .isForcingOverwrite default = false Will overwrite the log files if they already exist. .runTime default = 60 Total sampling time in seconds. .skipSampleFactor default = 1 The sampling rate of the microcontroller itself is fixed at 100 Hz. 100 Hz is therefore the maximum sampling rate. Should computational efficiency become an issue (MATLAB not keeping up with the microcontroller), lesser rates are possible by skipping samples. E.g. Should one wish to skip every third sample, Options.skipSampleFactor (which must always be an integer > 0) would be set to 3, corresponding to an effective sample rate of 100/3 Hz. To be supported: .portName Based on sonde.m written by Imanne Al Maachi. Updated 08/2015 by Ryan topfer@ualberta.ca ========================================================================= Attributes nInputs : 1 nOutputs : 0","title":"probe"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/PressureProbe/probe/#probe","text":"Filetype: MATLAB\u00ae function Synopsis: PROBE Description Reads pressure data from microcontroller Syntax PROBE( Parameters ) ....................... The following Parameter.fields are supported .isPlottingInRealtime default = false Plots pressure vs. time during acquisition. .isSavingPressureLog default = true .pressureLogFilename default = [./pressureLog.bin] .pressureTimesFilename default = [PATH_TO_PRESSURE_LOG /pressureTimes.bin] .isForcingOverwrite default = false Will overwrite the log files if they already exist. .runTime default = 60 Total sampling time in seconds. .skipSampleFactor default = 1 The sampling rate of the microcontroller itself is fixed at 100 Hz. 100 Hz is therefore the maximum sampling rate. Should computational efficiency become an issue (MATLAB not keeping up with the microcontroller), lesser rates are possible by skipping samples. E.g. Should one wish to skip every third sample, Options.skipSampleFactor (which must always be an integer > 0) would be set to 3, corresponding to an effective sample rate of 100/3 Hz. To be supported: .portName Based on sonde.m written by Imanne Al Maachi. Updated 08/2015 by Ryan topfer@ualberta.ca =========================================================================","title":"probe"},{"location":"3_contributing/api_documentation/aux_hardware/RespiratoryProbe/PressureProbe/probe/#attributes","text":"nInputs : 1 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/example/GuidedFloodFill/","text":"GuidedFloodFill Filetype: MATLAB\u00ae function Synopsis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GuidedFloodFill.m unwraps a single 2D image. Input: IM_phase, IM_unwrapped (seed points / pixels already unwrapped), unwrapped_binary the derivative variance, an adjoining matrix and a mask. Created by B.S. Spottiswoode on 11/11/2004 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Attributes nInputs : 6 nOutputs : 1","title":"GuidedFloodFill"},{"location":"3_contributing/api_documentation/example/GuidedFloodFill/#guidedfloodfill","text":"Filetype: MATLAB\u00ae function Synopsis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GuidedFloodFill.m unwraps a single 2D image. Input: IM_phase, IM_unwrapped (seed points / pixels already unwrapped), unwrapped_binary the derivative variance, an adjoining matrix and a mask. Created by B.S. Spottiswoode on 11/11/2004 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","title":"GuidedFloodFill"},{"location":"3_contributing/api_documentation/example/GuidedFloodFill/#attributes","text":"nInputs : 6 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/example/PhaseDerivativeVariance/","text":"PhaseDerivativeVariance Filetype: MATLAB\u00ae function Synopsis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PhaseDerivativeVariance creates a phase quality map by computing the variance of the partial derivatives of the locally unwrapped phase. This is then used to guide the phase unwrapping path. Uses only the 4 nearest neighbours. The user may also input a binary mask. Created by B.S. Spottiswoode on 18/10/2004 Last modified on 06/12/2004 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Attributes nInputs : -2 nOutputs : 1","title":"PhaseDerivativeVariance"},{"location":"3_contributing/api_documentation/example/PhaseDerivativeVariance/#phasederivativevariance","text":"Filetype: MATLAB\u00ae function Synopsis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PhaseDerivativeVariance creates a phase quality map by computing the variance of the partial derivatives of the locally unwrapped phase. This is then used to guide the phase unwrapping path. Uses only the 4 nearest neighbours. The user may also input a binary mask. Created by B.S. Spottiswoode on 18/10/2004 Last modified on 06/12/2004 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","title":"PhaseDerivativeVariance"},{"location":"3_contributing/api_documentation/example/PhaseDerivativeVariance/#attributes","text":"nInputs : -2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/example/QualityGuidedUnwrap2D_EAO/","text":"QualityGuidedUnwrap2D_EAO Filetype: MATLAB\u00ae function Synopsis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% QualityGuidedUnwrap2D implements 2D quality guided path following phase unwrapping algorithm. Technique adapted from: D. C. Ghiglia and M. D. Pritt, Two-Dimensional Phase Unwrapping: Theory, Algorithms and Software. New York: Wiley-Interscience, 1998. Inputs: 1. Complex image in .mat double format 2. Binary mask (optional) Outputs: 1. Unwrapped phase image 2. Phase quality map This code can easily be extended for 3D phase unwrapping. Posted by Bruce Spottiswoode on 22 December 2008 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Attributes nInputs : -3 nOutputs : 3","title":"QualityGuidedUnwrap2D_EAO"},{"location":"3_contributing/api_documentation/example/QualityGuidedUnwrap2D_EAO/#qualityguidedunwrap2d_eao","text":"Filetype: MATLAB\u00ae function Synopsis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% QualityGuidedUnwrap2D implements 2D quality guided path following phase unwrapping algorithm. Technique adapted from: D. C. Ghiglia and M. D. Pritt, Two-Dimensional Phase Unwrapping: Theory, Algorithms and Software. New York: Wiley-Interscience, 1998. Inputs: 1. Complex image in .mat double format 2. Binary mask (optional) Outputs: 1. Unwrapped phase image 2. Phase quality map This code can easily be extended for 3D phase unwrapping. Posted by Bruce Spottiswoode on 22 December 2008 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%","title":"QualityGuidedUnwrap2D_EAO"},{"location":"3_contributing/api_documentation/example/QualityGuidedUnwrap2D_EAO/#attributes","text":"nInputs : -3 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/example/createfieldmap/","text":"createfieldmap Filetype: MATLAB\u00ae script Synopsis: PROCESSFIELDMAP e.g. script to create field map from GRE dicoms ========================================================================= Author: ryan.topfer@polymtl.ca =========================================================================","title":"createfieldmap"},{"location":"3_contributing/api_documentation/example/createfieldmap/#createfieldmap","text":"Filetype: MATLAB\u00ae script Synopsis: PROCESSFIELDMAP e.g. script to create field map from GRE dicoms ========================================================================= Author: ryan.topfer@polymtl.ca =========================================================================","title":"createfieldmap"},{"location":"3_contributing/api_documentation/example/demozshim/","text":"demozshim Filetype: MATLAB\u00ae script Synopsis: DEMOZSHIM ========================================================================= Author: ryan.topfer@polymtl.ca =========================================================================","title":"demozshim"},{"location":"3_contributing/api_documentation/example/demozshim/#demozshim","text":"Filetype: MATLAB\u00ae script Synopsis: DEMOZSHIM ========================================================================= Author: ryan.topfer@polymtl.ca =========================================================================","title":"demozshim"},{"location":"3_contributing/api_documentation/example/eval_acdc_74/","text":"eval_acdc_74 Filetype: MATLAB\u00ae script Synopsis: EVAL_ACDC_74 evaluate acdc_74 'real-time' field maps","title":"eval_acdc_74"},{"location":"3_contributing/api_documentation/example/eval_acdc_74/#eval_acdc_74","text":"Filetype: MATLAB\u00ae script Synopsis: EVAL_ACDC_74 evaluate acdc_74 'real-time' field maps","title":"eval_acdc_74"},{"location":"3_contributing/api_documentation/example/experiment/","text":"experiment Filetype: MATLAB\u00ae script Synopsis: Dependencies: dcm2niix version v1.0.20200331 (https://github.com/rordenlab/dcm2niix) Note: older versions do not properly convert json files for the phase data (one element of ImageType is missing). dcm2bids (https://github.com/cbedetti/Dcm2Bids) 1)a cd to directory of experiment.m and enter the following command: matlab -nodisplay -nosplash -r 'experiment;exit' 1)b The experiment.m can also be opened in matlab's editor and run there","title":"experiment"},{"location":"3_contributing/api_documentation/example/experiment/#experiment","text":"Filetype: MATLAB\u00ae script Synopsis: Dependencies: dcm2niix version v1.0.20200331 (https://github.com/rordenlab/dcm2niix) Note: older versions do not properly convert json files for the phase data (one element of ImageType is missing). dcm2bids (https://github.com/cbedetti/Dcm2Bids) 1)a cd to directory of experiment.m and enter the following command: matlab -nodisplay -nosplash -r 'experiment;exit' 1)b The experiment.m can also be opened in matlab's editor and run there","title":"experiment"},{"location":"3_contributing/api_documentation/example/realtime_zshim/","text":"realtime_zshim Filetype: MATLAB\u00ae function Synopsis:* _ * * * * * * * * * * *_ function realtime_zshim(scan_obj, varargin) DESCRIPTION: This function will generate static and dynaminc (due to respiration) Gz components based on a fieldmap time series (magnitude and phase images to be found in 'FM_mag_path' and 'FM_phase_path') and respiratory trace information obtained from Siemens bellows (PMUresp_signal.resp). An additional multi-gradient echo (MGRE) magnitiude image is used (found in MGRE_mag_path) to generate an ROI and resample the static and dynaminc Gz component maps to match the MGRE image. Lastly the average Gz values within the ROI are computed for each slice. INPUTS: (1) If working with a DICOM socket transfer (online processing mode): realtime_zshim(\"scan_obj\", 0) (move files from mounted drive) or realtime_zshim(\"scan_obj\", 1) (copy files from mounted drive) (2) If working with previously sorted DICOMS (offline processing): realtime_zshim(\"scan_obj\") -> \"scan_obj\" should be either 'phantom' or 'human' 'phantom' -> a central square-shaped ROI will be generated for averaging the Gz field 'human' -> The spinal cord toolbox (SCT) will be used to segment the spinal cord Attributes nInputs : -2 nOutputs : 0","title":"realtime_zshim"},{"location":"3_contributing/api_documentation/example/realtime_zshim/#realtime_zshim","text":"Filetype: MATLAB\u00ae function Synopsis:* _ * * * * * * * * * * *_ function realtime_zshim(scan_obj, varargin) DESCRIPTION: This function will generate static and dynaminc (due to respiration) Gz components based on a fieldmap time series (magnitude and phase images to be found in 'FM_mag_path' and 'FM_phase_path') and respiratory trace information obtained from Siemens bellows (PMUresp_signal.resp). An additional multi-gradient echo (MGRE) magnitiude image is used (found in MGRE_mag_path) to generate an ROI and resample the static and dynaminc Gz component maps to match the MGRE image. Lastly the average Gz values within the ROI are computed for each slice. INPUTS: (1) If working with a DICOM socket transfer (online processing mode): realtime_zshim(\"scan_obj\", 0) (move files from mounted drive) or realtime_zshim(\"scan_obj\", 1) (copy files from mounted drive) (2) If working with previously sorted DICOMS (offline processing): realtime_zshim(\"scan_obj\") -> \"scan_obj\" should be either 'phantom' or 'human' 'phantom' -> a central square-shaped ROI will be generated for averaging the Gz field 'human' -> The spinal cord toolbox (SCT) will be used to segment the spinal cord","title":"realtime_zshim"},{"location":"3_contributing/api_documentation/example/realtime_zshim/#attributes","text":"nInputs : -2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/example/shimdemo/","text":"shimdemo Filetype: MATLAB\u00ae script Synopsis: Example script to perform offline shim optimization based on Siemens gradient echo (time-series) data","title":"shimdemo"},{"location":"3_contributing/api_documentation/example/shimdemo/#shimdemo","text":"Filetype: MATLAB\u00ae script Synopsis: Example script to perform offline shim optimization based on Siemens gradient echo (time-series) data","title":"shimdemo"},{"location":"3_contributing/api_documentation/external/medfilt3/","text":"medfilt3 Filetype: MATLAB\u00ae function Synopsis: 1-D, 2-D and 3-D median filtering. B = MEDFILT3(A,[M N P]) performs median filtering of the 3-D array A. Each output pixel contains the median value in the M-by-N-by-P neighborhood around the corresponding pixel in the input array. B = MEDFILT3(A,[M N]) performs median filtering of the matrix A. Each output pixel contains the median value in the M-by-N neighborhood around the corresponding pixel. B = MEDFILT3(A,M) performs median filtering of the vector A. Each output pixel contains the median value in the M neighborhood around the corresponding pixel. B = MEDFILT3(A) performs median filtering using a 3 or 3x3 or 3x3x3 neighborhood according to the size of A. B = MEDFILT3(A,...,PADOPT) pads array A using PADOPT option: String values for PADOPT (default = 'replicate'): 'circular' Pads with circular repetition of elements. 'replicate' Repeats border elements of A. (DEFAULT) 'symmetric' Pads array with mirror reflections of itself. If PADOPT is a scalar, A is padded with this scalar. Class Support ------------- Input array can be numeric or logical. The returned array is of class single or double. Notes ----- M, N and P must be odd integers. If not, they are incremented by 1. If NANMEDIAN exists (Statistics Toolbox is required), then MEDFILT3 treats NaNs as missing values. If you work with very large 3D arrays, an \"Out of memory\" error may appear. The chunk factor (CHUNKFACTOR, default value = 1) must be increased to reduce the size of the chunks. This will imply more iterations whose number is directly proportional to CHUNKFACTOR. Use the following syntax: MEDFILT3(A,[...],PADOPT,CHUNKFACTOR) Examples -------- %>> 1-D median filtering << t = linspace(0,2*pi,100); y = cos(t); I = round(rand(1,5)*99+1); y(I) = rand(size(I)); ys = medfilt3(y,5); plot(t,y,':',t,ys) %>> 2-D median filtering << % original image I = imread('eight.tif'); % noisy image J = I; rand('state',sum(100*clock)) J(rand(size(J))<0.01) = 255; J(rand(size(J))<0.01) = 0; % denoised image K = medfilt3(J); % figures figure subplot(121),imshow(J), subplot(122), imshow(K) %>> 3-D median filtering << rand('state',0) [x,y,z,V] = flow(50); noisyV = V + 0.1*double(rand(size(V))>0.95); clear V figure subplot(121) hpatch = patch(isosurface(x,y,z,noisyV,0)); isonormals(x,y,z,noisyV,hpatch) set(hpatch,'FaceColor','red','EdgeColor','none') daspect([1,4,4]), view([-65,20]), axis tight off camlight left; lighting phong subplot(122) %-------- denoisedV = medfilt3(noisyV,7); %-------- hpatch = patch(isosurface(x,y,z,denoisedV,0)); isonormals(x,y,z,denoisedV,hpatch) set(hpatch,'FaceColor','red','EdgeColor','none') daspect([1,4,4]), view([-65,20]), axis tight off camlight left; lighting phong See also MEDFILT1, MEDFILT2, HMF. -- Damien Garcia -- 2007/08, revised 2010/04 website: <a href=\"matlab:web('http://www.biomecardio.com')\">www.BiomeCardio.com</a> RT::20180722::downloaded code from: https://github.com/havaeimo/Matlab/blob/master/Matlab/MATLAB/medfilt3.m Attributes nInputs : 4 nOutputs : 1","title":"medfilt3"},{"location":"3_contributing/api_documentation/external/medfilt3/#medfilt3","text":"Filetype: MATLAB\u00ae function Synopsis: 1-D, 2-D and 3-D median filtering. B = MEDFILT3(A,[M N P]) performs median filtering of the 3-D array A. Each output pixel contains the median value in the M-by-N-by-P neighborhood around the corresponding pixel in the input array. B = MEDFILT3(A,[M N]) performs median filtering of the matrix A. Each output pixel contains the median value in the M-by-N neighborhood around the corresponding pixel. B = MEDFILT3(A,M) performs median filtering of the vector A. Each output pixel contains the median value in the M neighborhood around the corresponding pixel. B = MEDFILT3(A) performs median filtering using a 3 or 3x3 or 3x3x3 neighborhood according to the size of A. B = MEDFILT3(A,...,PADOPT) pads array A using PADOPT option: String values for PADOPT (default = 'replicate'): 'circular' Pads with circular repetition of elements. 'replicate' Repeats border elements of A. (DEFAULT) 'symmetric' Pads array with mirror reflections of itself. If PADOPT is a scalar, A is padded with this scalar. Class Support ------------- Input array can be numeric or logical. The returned array is of class single or double. Notes ----- M, N and P must be odd integers. If not, they are incremented by 1. If NANMEDIAN exists (Statistics Toolbox is required), then MEDFILT3 treats NaNs as missing values. If you work with very large 3D arrays, an \"Out of memory\" error may appear. The chunk factor (CHUNKFACTOR, default value = 1) must be increased to reduce the size of the chunks. This will imply more iterations whose number is directly proportional to CHUNKFACTOR. Use the following syntax: MEDFILT3(A,[...],PADOPT,CHUNKFACTOR) Examples -------- %>> 1-D median filtering << t = linspace(0,2*pi,100); y = cos(t); I = round(rand(1,5)*99+1); y(I) = rand(size(I)); ys = medfilt3(y,5); plot(t,y,':',t,ys) %>> 2-D median filtering << % original image I = imread('eight.tif'); % noisy image J = I; rand('state',sum(100*clock)) J(rand(size(J))<0.01) = 255; J(rand(size(J))<0.01) = 0; % denoised image K = medfilt3(J); % figures figure subplot(121),imshow(J), subplot(122), imshow(K) %>> 3-D median filtering << rand('state',0) [x,y,z,V] = flow(50); noisyV = V + 0.1*double(rand(size(V))>0.95); clear V figure subplot(121) hpatch = patch(isosurface(x,y,z,noisyV,0)); isonormals(x,y,z,noisyV,hpatch) set(hpatch,'FaceColor','red','EdgeColor','none') daspect([1,4,4]), view([-65,20]), axis tight off camlight left; lighting phong subplot(122) %-------- denoisedV = medfilt3(noisyV,7); %-------- hpatch = patch(isosurface(x,y,z,denoisedV,0)); isonormals(x,y,z,denoisedV,hpatch) set(hpatch,'FaceColor','red','EdgeColor','none') daspect([1,4,4]), view([-65,20]), axis tight off camlight left; lighting phong See also MEDFILT1, MEDFILT2, HMF. -- Damien Garcia -- 2007/08, revised 2010/04 website: <a href=\"matlab:web('http://www.biomecardio.com')\">www.BiomeCardio.com</a> RT::20180722::downloaded code from: https://github.com/havaeimo/Matlab/blob/master/Matlab/MATLAB/medfilt3.m","title":"medfilt3"},{"location":"3_contributing/api_documentation/external/medfilt3/#attributes","text":"nInputs : 4 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/myisfield/","text":"myisfield Filetype: MATLAB\u00ae function Synopsis: MYISFIELD myisfield( Obj, fieldName ) Obj is the name of the structure, object, or an array of structures to search fieldName is the name of the field for which the function searches -> Returns TRUE if fieldName exists -> Returns FALSE otherwise from http://www.mathworks.com/matlabcentral/fileexchange/36862-viewprofiles/content/viewProfiles/myIsField.m Copyright (c) 2012, Brandon Armstrong All rights reserved. Attributes nInputs : 2 nOutputs : 1","title":"myisfield"},{"location":"3_contributing/api_documentation/external/myisfield/#myisfield","text":"Filetype: MATLAB\u00ae function Synopsis: MYISFIELD myisfield( Obj, fieldName ) Obj is the name of the structure, object, or an array of structures to search fieldName is the name of the field for which the function searches -> Returns TRUE if fieldName exists -> Returns FALSE otherwise from http://www.mathworks.com/matlabcentral/fileexchange/36862-viewprofiles/content/viewProfiles/myIsField.m Copyright (c) 2012, Brandon Armstrong All rights reserved.","title":"myisfield"},{"location":"3_contributing/api_documentation/external/myisfield/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/affine/","text":"affine Filetype: MATLAB\u00ae function Synopsis: Using 2D or 3D affine matrix to rotate, translate, scale, reflect and shear a 2D image or 3D volume. 2D image is represented by a 2D matrix, 3D volume is represented by a 3D matrix, and data type can be real integer or floating-point. You may notice that MATLAB has a function called 'imtransform.m' for 2D spatial transformation. However, keep in mind that 'imtransform.m' assumes y for the 1st dimension, and x for the 2nd dimension. They are equivalent otherwise. In addition, if you adjust the 'new_elem_size' parameter, this 'affine.m' is equivalent to 'interp2.m' for 2D image, and equivalent to 'interp3.m' for 3D volume. Usage: [new_img new_M] = ... affine(old_img, old_M, [new_elem_size], [verbose], [bg], [method]); old_img - original 2D image or 3D volume. We assume x for the 1st dimension, y for the 2nd dimension, and z for the 3rd dimension. old_M - a 3x3 2D affine matrix for 2D image, or a 4x4 3D affine matrix for 3D volume. We assume x for the 1st dimension, y for the 2nd dimension, and z for the 3rd dimension. new_elem_size (optional) - size of voxel along x y z direction for a transformed 3D volume, or size of pixel along x y for a transformed 2D image. We assume x for the 1st dimension y for the 2nd dimension, and z for the 3rd dimension. 'new_elem_size' is 1 if it is default or empty. You can increase its value to decrease the resampling rate, and make the 2D image or 3D volume more coarse. It works just like 'interp3'. verbose (optional) - 1, 0 1: show transforming progress in percentage 2: progress will not be displayed 'verbose' is 1 if it is default or empty. bg (optional) - background voxel intensity in any extra corner that is caused by the interpolation. 0 in most cases. If it is default or empty, 'bg' will be the average of two corner voxel intensities in original data. method (optional) - 1, 2, or 3 1: for Trilinear interpolation 2: for Nearest Neighbor interpolation 3: for Fischer's Bresenham interpolation 'method' is 1 if it is default or empty. new_img - transformed 2D image or 3D volume new_M - transformed affine matrix Example 1 (3D rotation): load mri.mat; old_img = double(squeeze(D)); old_M = [0.88 0.5 3 -90; -0.5 0.88 3 -126; 0 0 2 -72; 0 0 0 1]; new_img = affine(old_img, old_M, 2); [x y z] = meshgrid(1:128,1:128,1:27); sz = size(new_img); [x1 y1 z1] = meshgrid(1:sz(2),1:sz(1),1:sz(3)); figure; slice(x, y, z, old_img, 64, 64, 13.5); shading flat; colormap(map); view(-66, 66); figure; slice(x1, y1, z1, new_img, sz(1)/2, sz(2)/2, sz(3)/2); shading flat; colormap(map); view(-66, 66); Example 2 (2D interpolation): load mri.mat; old_img=D(:,:,1,13)'; old_M = [1 0 0; 0 1 0; 0 0 1]; new_img = affine(old_img, old_M, [.2 .4]); figure; image(old_img); colormap(map); figure; image(new_img); colormap(map); This program is inspired by: SPM5 Software from Wellcome Trust Centre for Neuroimaging http://www.fil.ion.ucl.ac.uk/spm/software Fischer, J., A. del Rio (2004). A Fast Method for Applying Rigid Transformations to Volume Data, WSCG2004 Conference. http://wscg.zcu.cz/wscg2004/Papers_2004_Short/M19.pdf Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 6 nOutputs : 2","title":"affine"},{"location":"3_contributing/api_documentation/external/NIFTI/affine/#affine","text":"Filetype: MATLAB\u00ae function Synopsis: Using 2D or 3D affine matrix to rotate, translate, scale, reflect and shear a 2D image or 3D volume. 2D image is represented by a 2D matrix, 3D volume is represented by a 3D matrix, and data type can be real integer or floating-point. You may notice that MATLAB has a function called 'imtransform.m' for 2D spatial transformation. However, keep in mind that 'imtransform.m' assumes y for the 1st dimension, and x for the 2nd dimension. They are equivalent otherwise. In addition, if you adjust the 'new_elem_size' parameter, this 'affine.m' is equivalent to 'interp2.m' for 2D image, and equivalent to 'interp3.m' for 3D volume. Usage: [new_img new_M] = ... affine(old_img, old_M, [new_elem_size], [verbose], [bg], [method]); old_img - original 2D image or 3D volume. We assume x for the 1st dimension, y for the 2nd dimension, and z for the 3rd dimension. old_M - a 3x3 2D affine matrix for 2D image, or a 4x4 3D affine matrix for 3D volume. We assume x for the 1st dimension, y for the 2nd dimension, and z for the 3rd dimension. new_elem_size (optional) - size of voxel along x y z direction for a transformed 3D volume, or size of pixel along x y for a transformed 2D image. We assume x for the 1st dimension y for the 2nd dimension, and z for the 3rd dimension. 'new_elem_size' is 1 if it is default or empty. You can increase its value to decrease the resampling rate, and make the 2D image or 3D volume more coarse. It works just like 'interp3'. verbose (optional) - 1, 0 1: show transforming progress in percentage 2: progress will not be displayed 'verbose' is 1 if it is default or empty. bg (optional) - background voxel intensity in any extra corner that is caused by the interpolation. 0 in most cases. If it is default or empty, 'bg' will be the average of two corner voxel intensities in original data. method (optional) - 1, 2, or 3 1: for Trilinear interpolation 2: for Nearest Neighbor interpolation 3: for Fischer's Bresenham interpolation 'method' is 1 if it is default or empty. new_img - transformed 2D image or 3D volume new_M - transformed affine matrix Example 1 (3D rotation): load mri.mat; old_img = double(squeeze(D)); old_M = [0.88 0.5 3 -90; -0.5 0.88 3 -126; 0 0 2 -72; 0 0 0 1]; new_img = affine(old_img, old_M, 2); [x y z] = meshgrid(1:128,1:128,1:27); sz = size(new_img); [x1 y1 z1] = meshgrid(1:sz(2),1:sz(1),1:sz(3)); figure; slice(x, y, z, old_img, 64, 64, 13.5); shading flat; colormap(map); view(-66, 66); figure; slice(x1, y1, z1, new_img, sz(1)/2, sz(2)/2, sz(3)/2); shading flat; colormap(map); view(-66, 66); Example 2 (2D interpolation): load mri.mat; old_img=D(:,:,1,13)'; old_M = [1 0 0; 0 1 0; 0 0 1]; new_img = affine(old_img, old_M, [.2 .4]); figure; image(old_img); colormap(map); figure; image(new_img); colormap(map); This program is inspired by: SPM5 Software from Wellcome Trust Centre for Neuroimaging http://www.fil.ion.ucl.ac.uk/spm/software Fischer, J., A. del Rio (2004). A Fast Method for Applying Rigid Transformations to Volume Data, WSCG2004 Conference. http://wscg.zcu.cz/wscg2004/Papers_2004_Short/M19.pdf Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"affine"},{"location":"3_contributing/api_documentation/external/NIFTI/affine/#attributes","text":"nInputs : 6 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/bipolar/","text":"bipolar Filetype: MATLAB\u00ae function Synopsis: returns an M-by-3 matrix containing a blue-red colormap, in in which red stands for positive, blue stands for negative, and white stands for 0. Usage: cmap = bipolar(M, lo, hi, contrast); or cmap = bipolar; cmap: output M-by-3 matrix for BIPOLAR colormap. M: number of shades in the colormap. By default, it is the same length as the current colormap. lo: the lowest value to represent. hi: the highest value to represent. Inspired from the LORETA PASCAL program: http://www.unizh.ch/keyinst/NewLORETA jimmy@rotman-baycrest.on.ca Attributes nInputs : 4 nOutputs : 1","title":"bipolar"},{"location":"3_contributing/api_documentation/external/NIFTI/bipolar/#bipolar","text":"Filetype: MATLAB\u00ae function Synopsis: returns an M-by-3 matrix containing a blue-red colormap, in in which red stands for positive, blue stands for negative, and white stands for 0. Usage: cmap = bipolar(M, lo, hi, contrast); or cmap = bipolar; cmap: output M-by-3 matrix for BIPOLAR colormap. M: number of shades in the colormap. By default, it is the same length as the current colormap. lo: the lowest value to represent. hi: the highest value to represent. Inspired from the LORETA PASCAL program: http://www.unizh.ch/keyinst/NewLORETA jimmy@rotman-baycrest.on.ca","title":"bipolar"},{"location":"3_contributing/api_documentation/external/NIFTI/bipolar/#attributes","text":"nInputs : 4 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/bresenham_line3d/","text":"bresenham_line3d Filetype: MATLAB\u00ae function Synopsis: Generate X Y Z coordinates of a 3D Bresenham's line between two given points. A very useful application of this algorithm can be found in the implementation of Fischer's Bresenham interpolation method in my another program that can rotate three dimensional image volume with an affine matrix: http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=21080 Usage: [X Y Z] = bresenham_line3d(P1, P2, [precision]); P1 - vector for Point1, where P1 = [x1 y1 z1] P2 - vector for Point2, where P2 = [x2 y2 z2] precision (optional) - Although according to Bresenham's line algorithm, point coordinates x1 y1 z1 and x2 y2 z2 should be integer numbers, this program extends its limit to all real numbers. If any of them are floating numbers, you should specify how many digits of decimal that you would like to preserve. Be aware that the length of output X Y Z coordinates will increase in 10 times for each decimal digit that you want to preserve. By default, the precision is 0, which means that they will be rounded to the nearest integer. X - a set of x coordinates on Bresenham's line Y - a set of y coordinates on Bresenham's line Z - a set of z coordinates on Bresenham's line Therefore, all points in XYZ set (i.e. P(i) = [X(i) Y(i) Z(i)]) will constitute the Bresenham's line between P1 and P1. Example: P1 = [12 37 6]; P2 = [46 3 35]; [X Y Z] = bresenham_line3d(P1, P2); figure; plot3(X,Y,Z,'s','markerface','b'); This program is ported to MATLAB from: B.Pendleton. line3d - 3D Bresenham's (a 3D line drawing algorithm) ftp://ftp.isc.org/pub/usenet/comp.sources.unix/volume26/line3d, 1992 Which is also referenced by: Fischer, J., A. del Rio (2004). A Fast Method for Applying Rigid Transformations to Volume Data, WSCG2004 Conference. http://wscg.zcu.cz/wscg2004/Papers_2004_Short/M19.pdf Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 3 nOutputs : 3","title":"bresenham_line3d"},{"location":"3_contributing/api_documentation/external/NIFTI/bresenham_line3d/#bresenham_line3d","text":"Filetype: MATLAB\u00ae function Synopsis: Generate X Y Z coordinates of a 3D Bresenham's line between two given points. A very useful application of this algorithm can be found in the implementation of Fischer's Bresenham interpolation method in my another program that can rotate three dimensional image volume with an affine matrix: http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=21080 Usage: [X Y Z] = bresenham_line3d(P1, P2, [precision]); P1 - vector for Point1, where P1 = [x1 y1 z1] P2 - vector for Point2, where P2 = [x2 y2 z2] precision (optional) - Although according to Bresenham's line algorithm, point coordinates x1 y1 z1 and x2 y2 z2 should be integer numbers, this program extends its limit to all real numbers. If any of them are floating numbers, you should specify how many digits of decimal that you would like to preserve. Be aware that the length of output X Y Z coordinates will increase in 10 times for each decimal digit that you want to preserve. By default, the precision is 0, which means that they will be rounded to the nearest integer. X - a set of x coordinates on Bresenham's line Y - a set of y coordinates on Bresenham's line Z - a set of z coordinates on Bresenham's line Therefore, all points in XYZ set (i.e. P(i) = [X(i) Y(i) Z(i)]) will constitute the Bresenham's line between P1 and P1. Example: P1 = [12 37 6]; P2 = [46 3 35]; [X Y Z] = bresenham_line3d(P1, P2); figure; plot3(X,Y,Z,'s','markerface','b'); This program is ported to MATLAB from: B.Pendleton. line3d - 3D Bresenham's (a 3D line drawing algorithm) ftp://ftp.isc.org/pub/usenet/comp.sources.unix/volume26/line3d, 1992 Which is also referenced by: Fischer, J., A. del Rio (2004). A Fast Method for Applying Rigid Transformations to Volume Data, WSCG2004 Conference. http://wscg.zcu.cz/wscg2004/Papers_2004_Short/M19.pdf Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"bresenham_line3d"},{"location":"3_contributing/api_documentation/external/NIFTI/bresenham_line3d/#attributes","text":"nInputs : 3 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/collapse_nii_scan/","text":"collapse_nii_scan Filetype: MATLAB\u00ae function Synopsis: Collapse multiple single-scan NIFTI files into a multiple-scan NIFTI file Usage: collapse_nii_scan(scan_file_pattern, [collapsed_fileprefix], [scan_file_folder]) Here, scan_file_pattern should look like: 'myscan_0*.img' If collapsed_fileprefix is omit, 'multi_scan' will be used If scan_file_folder is omit, current file folder will be used The order of volumes in the collapsed file will be the order of corresponding filenames for those selected scan files. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 3 nOutputs : 0","title":"collapse_nii_scan"},{"location":"3_contributing/api_documentation/external/NIFTI/collapse_nii_scan/#collapse_nii_scan","text":"Filetype: MATLAB\u00ae function Synopsis: Collapse multiple single-scan NIFTI files into a multiple-scan NIFTI file Usage: collapse_nii_scan(scan_file_pattern, [collapsed_fileprefix], [scan_file_folder]) Here, scan_file_pattern should look like: 'myscan_0*.img' If collapsed_fileprefix is omit, 'multi_scan' will be used If scan_file_folder is omit, current file folder will be used The order of volumes in the collapsed file will be the order of corresponding filenames for those selected scan files. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"collapse_nii_scan"},{"location":"3_contributing/api_documentation/external/NIFTI/collapse_nii_scan/#attributes","text":"nInputs : 3 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/expand_nii_scan/","text":"expand_nii_scan Filetype: MATLAB\u00ae function Synopsis: Expand a multiple-scan NIFTI file into multiple single-scan NIFTI files Usage: expand_nii_scan(multi_scan_filename, [img_idx], [path_to_save]) NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 3 nOutputs : 0","title":"expand_nii_scan"},{"location":"3_contributing/api_documentation/external/NIFTI/expand_nii_scan/#expand_nii_scan","text":"Filetype: MATLAB\u00ae function Synopsis: Expand a multiple-scan NIFTI file into multiple single-scan NIFTI files Usage: expand_nii_scan(multi_scan_filename, [img_idx], [path_to_save]) NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"expand_nii_scan"},{"location":"3_contributing/api_documentation/external/NIFTI/expand_nii_scan/#attributes","text":"nInputs : 3 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/extra_nii_hdr/","text":"extra_nii_hdr Filetype: MATLAB\u00ae function Synopsis: Decode extra NIFTI header information into hdr.extra Usage: hdr = extra_nii_hdr(hdr) hdr can be obtained from load_nii_hdr NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 1 nOutputs : 1","title":"extra_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/extra_nii_hdr/#extra_nii_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: Decode extra NIFTI header information into hdr.extra Usage: hdr = extra_nii_hdr(hdr) hdr can be obtained from load_nii_hdr NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"extra_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/extra_nii_hdr/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/flip_lr/","text":"flip_lr Filetype: MATLAB\u00ae function Synopsis: When you load any ANALYZE or NIfTI file with 'load_nii.m', and view it with 'view_nii.m', you may find that the image is L-R flipped. This is because of the confusion of radiological and neurological convention in the medical image before NIfTI format is adopted. You can find more details from: http://www.rotman-baycrest.on.ca/~jimmy/UseANALYZE.htm Sometime, people even want to convert RAS (standard orientation) back to LAS orientation to satisfy the legend programs or processes. This program is only written for those purpose. So PLEASE BE VERY CAUTIOUS WHEN USING THIS 'FLIP_LR.M' PROGRAM. With 'flip_lr.m', you can convert any ANALYZE or NIfTI (no matter 3D or 4D) file to a flipped NIfTI file. This is implemented simply by flipping the affine matrix in the NIfTI header. Since the L-R orientation is determined there, so the image will be flipped. Usage: flip_lr(original_fn, flipped_fn, [old_RGB],[tolerance],[preferredForm]) original_fn - filename of the original ANALYZE or NIfTI (3D or 4D) file flipped_fn - filename of the L-R flipped NIfTI file old_RGB (optional) - a scale number to tell difference of new RGB24 from old RGB24. New RGB24 uses RGB triple sequentially for each voxel, like [R1 G1 B1 R2 G2 B2 ...]. Analyze 6.0 from AnalyzeDirect uses old RGB24, in a way like [R1 R2 ... G1 G2 ... B1 B2 ...] for each slices. If the image that you view is garbled, try to set old_RGB variable to 1 and try again, because it could be in old RGB24. It will be set to 0, if it is default or empty. tolerance (optional) - distortion allowed for non-orthogonal rotation or shearing in NIfTI affine matrix. It will be set to 0.1 (10%), if it is default or empty. preferredForm (optional) - selects which transformation from voxels to RAS coordinates; values are s,q,S,Q. Lower case s,q indicate \"prefer sform or qform, but use others if preferred not present\". Upper case indicate the program is forced to use the specificied tranform or fail loading. 'preferredForm' will be 's', if it is default or empty. - Jeff Gunter Example: flip_lr('avg152T1_LR_nifti.nii', 'flipped_lr.nii'); flip_lr('avg152T1_RL_nifti.nii', 'flipped_rl.nii'); You will find that 'avg152T1_LR_nifti.nii' and 'avg152T1_RL_nifti.nii' are the same, and 'flipped_lr.nii' and 'flipped_rl.nii' are also the the same, but they are L-R flipped from 'avg152T1_*'. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 5 nOutputs : 0","title":"flip_lr"},{"location":"3_contributing/api_documentation/external/NIFTI/flip_lr/#flip_lr","text":"Filetype: MATLAB\u00ae function Synopsis: When you load any ANALYZE or NIfTI file with 'load_nii.m', and view it with 'view_nii.m', you may find that the image is L-R flipped. This is because of the confusion of radiological and neurological convention in the medical image before NIfTI format is adopted. You can find more details from: http://www.rotman-baycrest.on.ca/~jimmy/UseANALYZE.htm Sometime, people even want to convert RAS (standard orientation) back to LAS orientation to satisfy the legend programs or processes. This program is only written for those purpose. So PLEASE BE VERY CAUTIOUS WHEN USING THIS 'FLIP_LR.M' PROGRAM. With 'flip_lr.m', you can convert any ANALYZE or NIfTI (no matter 3D or 4D) file to a flipped NIfTI file. This is implemented simply by flipping the affine matrix in the NIfTI header. Since the L-R orientation is determined there, so the image will be flipped. Usage: flip_lr(original_fn, flipped_fn, [old_RGB],[tolerance],[preferredForm]) original_fn - filename of the original ANALYZE or NIfTI (3D or 4D) file flipped_fn - filename of the L-R flipped NIfTI file old_RGB (optional) - a scale number to tell difference of new RGB24 from old RGB24. New RGB24 uses RGB triple sequentially for each voxel, like [R1 G1 B1 R2 G2 B2 ...]. Analyze 6.0 from AnalyzeDirect uses old RGB24, in a way like [R1 R2 ... G1 G2 ... B1 B2 ...] for each slices. If the image that you view is garbled, try to set old_RGB variable to 1 and try again, because it could be in old RGB24. It will be set to 0, if it is default or empty. tolerance (optional) - distortion allowed for non-orthogonal rotation or shearing in NIfTI affine matrix. It will be set to 0.1 (10%), if it is default or empty. preferredForm (optional) - selects which transformation from voxels to RAS coordinates; values are s,q,S,Q. Lower case s,q indicate \"prefer sform or qform, but use others if preferred not present\". Upper case indicate the program is forced to use the specificied tranform or fail loading. 'preferredForm' will be 's', if it is default or empty. - Jeff Gunter Example: flip_lr('avg152T1_LR_nifti.nii', 'flipped_lr.nii'); flip_lr('avg152T1_RL_nifti.nii', 'flipped_rl.nii'); You will find that 'avg152T1_LR_nifti.nii' and 'avg152T1_RL_nifti.nii' are the same, and 'flipped_lr.nii' and 'flipped_rl.nii' are also the the same, but they are L-R flipped from 'avg152T1_*'. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"flip_lr"},{"location":"3_contributing/api_documentation/external/NIFTI/flip_lr/#attributes","text":"nInputs : 5 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/get_nii_frame/","text":"get_nii_frame Filetype: MATLAB\u00ae function Synopsis: Return time frame of a NIFTI dataset. Support both *.nii and .hdr/ .img file extension. If file extension is not provided, .hdr/ .img will be used as default. It is a lightweighted \"load_nii_hdr\", and is equivalent to hdr.dime.dim(5) Usage: [ total_scan ] = get_nii_frame(filename) filename - NIFTI file name. Returned values: total_scan - total number of image scans for the time frame NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 1 nOutputs : 1","title":"get_nii_frame"},{"location":"3_contributing/api_documentation/external/NIFTI/get_nii_frame/#get_nii_frame","text":"Filetype: MATLAB\u00ae function Synopsis: Return time frame of a NIFTI dataset. Support both *.nii and .hdr/ .img file extension. If file extension is not provided, .hdr/ .img will be used as default. It is a lightweighted \"load_nii_hdr\", and is equivalent to hdr.dime.dim(5) Usage: [ total_scan ] = get_nii_frame(filename) filename - NIFTI file name. Returned values: total_scan - total number of image scans for the time frame NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"get_nii_frame"},{"location":"3_contributing/api_documentation/external/NIFTI/get_nii_frame/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii/","text":"load_nii Filetype: MATLAB\u00ae function Synopsis: Load NIFTI or ANALYZE dataset. Support both .nii and .hdr/*.img file extension. If file extension is not provided, .hdr/ .img will be used as default. A subset of NIFTI transform is included. For non-orthogonal rotation, shearing etc., please use 'reslice_nii.m' to reslice the NIFTI file. It will not cause negative effect, as long as you remember not to do slice time correction after reslicing the NIFTI file. Output variable nii will be in RAS orientation, i.e. X axis from Left to Right, Y axis from Posterior to Anterior, and Z axis from Inferior to Superior. Usage: nii = load_nii(filename, [img_idx], [dim5_idx], [dim6_idx], ... [dim7_idx], [old_RGB], [tolerance], [preferredForm]) filename - NIFTI or ANALYZE file name. img_idx (optional) - a numerical array of 4th dimension indices, which is the indices of image scan volume. The number of images scan volumes can be obtained from get_nii_frame.m, or simply hdr.dime.dim(5). Only the specified volumes will be loaded. All available image volumes will be loaded, if it is default or empty. dim5_idx (optional) - a numerical array of 5th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim6_idx (optional) - a numerical array of 6th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim7_idx (optional) - a numerical array of 7th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. old_RGB (optional) - a scale number to tell difference of new RGB24 from old RGB24. New RGB24 uses RGB triple sequentially for each voxel, like [R1 G1 B1 R2 G2 B2 ...]. Analyze 6.0 from AnalyzeDirect uses old RGB24, in a way like [R1 R2 ... G1 G2 ... B1 B2 ...] for each slices. If the image that you view is garbled, try to set old_RGB variable to 1 and try again, because it could be in old RGB24. It will be set to 0, if it is default or empty. tolerance (optional) - distortion allowed in the loaded image for any non-orthogonal rotation or shearing of NIfTI affine matrix. If you set 'tolerance' to 0, it means that you do not allow any distortion. If you set 'tolerance' to 1, it means that you do not care any distortion. The image will fail to be loaded if it can not be tolerated. The tolerance will be set to 0.1 (10%), if it is default or empty. preferredForm (optional) - selects which transformation from voxels to RAS coordinates; values are s,q,S,Q. Lower case s,q indicate \"prefer sform or qform, but use others if preferred not present\". Upper case indicate the program is forced to use the specificied tranform or fail loading. 'preferredForm' will be 's', if it is default or empty. - Jeff Gunter Returned values: nii structure: hdr - struct with NIFTI header fields. filetype - Analyze format .hdr/.img (0); NIFTI .hdr/.img (1); NIFTI .nii (2) fileprefix - NIFTI filename without extension. machine - machine string variable. img - 3D (or 4D) matrix of NIFTI data. original - the original header before any affine transform. Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 8 nOutputs : 1","title":"load_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii/#load_nii","text":"Filetype: MATLAB\u00ae function Synopsis: Load NIFTI or ANALYZE dataset. Support both .nii and .hdr/*.img file extension. If file extension is not provided, .hdr/ .img will be used as default. A subset of NIFTI transform is included. For non-orthogonal rotation, shearing etc., please use 'reslice_nii.m' to reslice the NIFTI file. It will not cause negative effect, as long as you remember not to do slice time correction after reslicing the NIFTI file. Output variable nii will be in RAS orientation, i.e. X axis from Left to Right, Y axis from Posterior to Anterior, and Z axis from Inferior to Superior. Usage: nii = load_nii(filename, [img_idx], [dim5_idx], [dim6_idx], ... [dim7_idx], [old_RGB], [tolerance], [preferredForm]) filename - NIFTI or ANALYZE file name. img_idx (optional) - a numerical array of 4th dimension indices, which is the indices of image scan volume. The number of images scan volumes can be obtained from get_nii_frame.m, or simply hdr.dime.dim(5). Only the specified volumes will be loaded. All available image volumes will be loaded, if it is default or empty. dim5_idx (optional) - a numerical array of 5th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim6_idx (optional) - a numerical array of 6th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim7_idx (optional) - a numerical array of 7th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. old_RGB (optional) - a scale number to tell difference of new RGB24 from old RGB24. New RGB24 uses RGB triple sequentially for each voxel, like [R1 G1 B1 R2 G2 B2 ...]. Analyze 6.0 from AnalyzeDirect uses old RGB24, in a way like [R1 R2 ... G1 G2 ... B1 B2 ...] for each slices. If the image that you view is garbled, try to set old_RGB variable to 1 and try again, because it could be in old RGB24. It will be set to 0, if it is default or empty. tolerance (optional) - distortion allowed in the loaded image for any non-orthogonal rotation or shearing of NIfTI affine matrix. If you set 'tolerance' to 0, it means that you do not allow any distortion. If you set 'tolerance' to 1, it means that you do not care any distortion. The image will fail to be loaded if it can not be tolerated. The tolerance will be set to 0.1 (10%), if it is default or empty. preferredForm (optional) - selects which transformation from voxels to RAS coordinates; values are s,q,S,Q. Lower case s,q indicate \"prefer sform or qform, but use others if preferred not present\". Upper case indicate the program is forced to use the specificied tranform or fail loading. 'preferredForm' will be 's', if it is default or empty. - Jeff Gunter Returned values: nii structure: hdr - struct with NIFTI header fields. filetype - Analyze format .hdr/.img (0); NIFTI .hdr/.img (1); NIFTI .nii (2) fileprefix - NIFTI filename without extension. machine - machine string variable. img - 3D (or 4D) matrix of NIFTI data. original - the original header before any affine transform. Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"load_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii/#attributes","text":"nInputs : 8 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_ext/","text":"load_nii_ext Filetype: MATLAB\u00ae function Synopsis: Load NIFTI header extension after its header is loaded using load_nii_hdr. Usage: ext = load_nii_ext(filename) filename - NIFTI file name. Returned values: ext - Structure of NIFTI header extension, which includes num_ext, and all the extended header sections in the header extension. Each extended header section will have its esize, ecode, and edata, where edata can be plain text, xml, or any raw data that was saved in the extended header section. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 1 nOutputs : 1","title":"load_nii_ext"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_ext/#load_nii_ext","text":"Filetype: MATLAB\u00ae function Synopsis: Load NIFTI header extension after its header is loaded using load_nii_hdr. Usage: ext = load_nii_ext(filename) filename - NIFTI file name. Returned values: ext - Structure of NIFTI header extension, which includes num_ext, and all the extended header sections in the header extension. Each extended header section will have its esize, ecode, and edata, where edata can be plain text, xml, or any raw data that was saved in the extended header section. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"load_nii_ext"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_ext/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_hdr/","text":"load_nii_hdr Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 1 nOutputs : 4","title":"load_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_hdr/#load_nii_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"load_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_hdr/#attributes","text":"nInputs : 1 nOutputs : 4","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_img/","text":"load_nii_img Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 9 nOutputs : 2","title":"load_nii_img"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_img/#load_nii_img","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"load_nii_img"},{"location":"3_contributing/api_documentation/external/NIFTI/load_nii_img/#attributes","text":"nInputs : 9 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch0_nii_hdr/","text":"load_untouch0_nii_hdr Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 2 nOutputs : 1","title":"load_untouch0_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch0_nii_hdr/#load_untouch0_nii_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"load_untouch0_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch0_nii_hdr/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_header_only/","text":"load_untouch_header_only Filetype: MATLAB\u00ae function Synopsis: Load NIfTI / Analyze header without applying any appropriate affine geometric transform or voxel intensity scaling. It is equivalent to hdr field when using load_untouch_nii to load dataset. Support both .nii and .hdr file extension. If file extension is not provided, *.hdr will be used as default. Usage: [header, ext, filetype, machine] = load_untouch_header_only(filename) filename - NIfTI / Analyze file name. Returned values: header - struct with NIfTI / Analyze header fields. ext - NIfTI extension if it is not empty. filetype - 0 for Analyze format ( .hdr/ .img); 1 for NIFTI format in 2 files ( .hdr/ .img); 2 for NIFTI format in 1 file (*.nii). machine - a string, see below for details. The default here is 'ieee-le'. 'native' or 'n' - local machine format - the default 'ieee-le' or 'l' - IEEE floating point with little-endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big-endian byte ordering 'vaxd' or 'd' - VAX D floating point and VAX ordering 'vaxg' or 'g' - VAX G floating point and VAX ordering 'cray' or 'c' - Cray floating point with big-endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little-endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big-endian byte ordering and 64 bit long data type. Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 1 nOutputs : 4","title":"load_untouch_header_only"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_header_only/#load_untouch_header_only","text":"Filetype: MATLAB\u00ae function Synopsis: Load NIfTI / Analyze header without applying any appropriate affine geometric transform or voxel intensity scaling. It is equivalent to hdr field when using load_untouch_nii to load dataset. Support both .nii and .hdr file extension. If file extension is not provided, *.hdr will be used as default. Usage: [header, ext, filetype, machine] = load_untouch_header_only(filename) filename - NIfTI / Analyze file name. Returned values: header - struct with NIfTI / Analyze header fields. ext - NIfTI extension if it is not empty. filetype - 0 for Analyze format ( .hdr/ .img); 1 for NIFTI format in 2 files ( .hdr/ .img); 2 for NIFTI format in 1 file (*.nii). machine - a string, see below for details. The default here is 'ieee-le'. 'native' or 'n' - local machine format - the default 'ieee-le' or 'l' - IEEE floating point with little-endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big-endian byte ordering 'vaxd' or 'd' - VAX D floating point and VAX ordering 'vaxg' or 'g' - VAX G floating point and VAX ordering 'cray' or 'c' - Cray floating point with big-endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little-endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big-endian byte ordering and 64 bit long data type. Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"load_untouch_header_only"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_header_only/#attributes","text":"nInputs : 1 nOutputs : 4","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii/","text":"load_untouch_nii Filetype: MATLAB\u00ae function Synopsis: Load NIFTI or ANALYZE dataset, but not applying any appropriate affine geometric transform or voxel intensity scaling. Although according to NIFTI website, all those header information are supposed to be applied to the loaded NIFTI image, there are some situations that people do want to leave the original NIFTI header and data untouched. They will probably just use MATLAB to do certain image processing regardless of image orientation, and to save data back with the same NIfTI header. Since this program is only served for those situations, please use it together with \"save_untouch_nii.m\", and do not use \"save_nii.m\" or \"view_nii.m\" for the data that is loaded by \"load_untouch_nii.m\". For normal situation, you should use \"load_nii.m\" instead. Usage: nii = load_untouch_nii(filename, [img_idx], [dim5_idx], [dim6_idx], ... [dim7_idx], [old_RGB], [slice_idx]) filename - NIFTI or ANALYZE file name. img_idx (optional) - a numerical array of image volume indices. Only the specified volumes will be loaded. All available image volumes will be loaded, if it is default or empty. The number of images scans can be obtained from get_nii_frame.m, or simply: hdr.dime.dim(5). dim5_idx (optional) - a numerical array of 5th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim6_idx (optional) - a numerical array of 6th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim7_idx (optional) - a numerical array of 7th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. old_RGB (optional) - a scale number to tell difference of new RGB24 from old RGB24. New RGB24 uses RGB triple sequentially for each voxel, like [R1 G1 B1 R2 G2 B2 ...]. Analyze 6.0 from AnalyzeDirect uses old RGB24, in a way like [R1 R2 ... G1 G2 ... B1 B2 ...] for each slices. If the image that you view is garbled, try to set old_RGB variable to 1 and try again, because it could be in old RGB24. It will be set to 0, if it is default or empty. slice_idx (optional) - a numerical array of image slice indices. Only the specified volumes will be loaded. All available image slices will be loaded, if it is default or empty. Returned values: nii structure: hdr - struct with NIFTI header fields. filetype - Analyze format .hdr/.img (0); NIFTI .hdr/.img (1); NIFTI .nii (2) fileprefix - NIFTI filename without extension. machine - machine string variable. img - 3D (or 4D) matrix of NIFTI data. Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 7 nOutputs : 1","title":"load_untouch_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii/#load_untouch_nii","text":"Filetype: MATLAB\u00ae function Synopsis: Load NIFTI or ANALYZE dataset, but not applying any appropriate affine geometric transform or voxel intensity scaling. Although according to NIFTI website, all those header information are supposed to be applied to the loaded NIFTI image, there are some situations that people do want to leave the original NIFTI header and data untouched. They will probably just use MATLAB to do certain image processing regardless of image orientation, and to save data back with the same NIfTI header. Since this program is only served for those situations, please use it together with \"save_untouch_nii.m\", and do not use \"save_nii.m\" or \"view_nii.m\" for the data that is loaded by \"load_untouch_nii.m\". For normal situation, you should use \"load_nii.m\" instead. Usage: nii = load_untouch_nii(filename, [img_idx], [dim5_idx], [dim6_idx], ... [dim7_idx], [old_RGB], [slice_idx]) filename - NIFTI or ANALYZE file name. img_idx (optional) - a numerical array of image volume indices. Only the specified volumes will be loaded. All available image volumes will be loaded, if it is default or empty. The number of images scans can be obtained from get_nii_frame.m, or simply: hdr.dime.dim(5). dim5_idx (optional) - a numerical array of 5th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim6_idx (optional) - a numerical array of 6th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. dim7_idx (optional) - a numerical array of 7th dimension indices. Only the specified range will be loaded. All available range will be loaded, if it is default or empty. old_RGB (optional) - a scale number to tell difference of new RGB24 from old RGB24. New RGB24 uses RGB triple sequentially for each voxel, like [R1 G1 B1 R2 G2 B2 ...]. Analyze 6.0 from AnalyzeDirect uses old RGB24, in a way like [R1 R2 ... G1 G2 ... B1 B2 ...] for each slices. If the image that you view is garbled, try to set old_RGB variable to 1 and try again, because it could be in old RGB24. It will be set to 0, if it is default or empty. slice_idx (optional) - a numerical array of image slice indices. Only the specified volumes will be loaded. All available image slices will be loaded, if it is default or empty. Returned values: nii structure: hdr - struct with NIFTI header fields. filetype - Analyze format .hdr/.img (0); NIFTI .hdr/.img (1); NIFTI .nii (2) fileprefix - NIFTI filename without extension. machine - machine string variable. img - 3D (or 4D) matrix of NIFTI data. Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"load_untouch_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii/#attributes","text":"nInputs : 7 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii_hdr/","text":"load_untouch_nii_hdr Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 3 nOutputs : 1","title":"load_untouch_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii_hdr/#load_untouch_nii_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"load_untouch_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii_hdr/#attributes","text":"nInputs : 3 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii_img/","text":"load_untouch_nii_img Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 10 nOutputs : 2","title":"load_untouch_nii_img"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii_img/#load_untouch_nii_img","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"load_untouch_nii_img"},{"location":"3_contributing/api_documentation/external/NIFTI/load_untouch_nii_img/#attributes","text":"nInputs : 10 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/make_ana/","text":"make_ana Filetype: MATLAB\u00ae function Synopsis: Make ANALYZE 7.5 data structure specified by a 3D or 4D matrix. Optional parameters can also be included, such as: voxel_size, origin, datatype, and description. Once the ANALYZE structure is made, it can be saved into ANALYZE 7.5 format data file using \"save_untouch_nii\" command (for more detail, type: help save_untouch_nii). Usage: ana = make_ana(img, [voxel_size], [origin], [datatype], [description]) Where: img: a 3D matrix [x y z], or a 4D matrix with time series [x y z t]. When image is in RGB format, make sure that the size of 4th dimension is always 3 (i.e. [R G B]). In that case, make sure that you must specify RGB datatype to 128. voxel_size (optional): Voxel size in millimeter for each dimension. Default is [1 1 1]. origin (optional): The AC origin. Default is [0 0 0]. datatype (optional): Storage data type: 2 - uint8, 4 - int16, 8 - int32, 16 - float32, 64 - float64, 128 - RGB24 Default will use the data type of 'img' matrix For RGB image, you must specify it to 128. description (optional): Description of data. Default is ''. e.g.: origin = [33 44 13]; datatype = 64; ana = make_ana(img, [], origin, datatype); % default voxel_size ANALYZE 7.5 format: http://www.rotman-baycrest.on.ca/~jimmy/ANALYZE75.pdf Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : -1 nOutputs : 1","title":"make_ana"},{"location":"3_contributing/api_documentation/external/NIFTI/make_ana/#make_ana","text":"Filetype: MATLAB\u00ae function Synopsis: Make ANALYZE 7.5 data structure specified by a 3D or 4D matrix. Optional parameters can also be included, such as: voxel_size, origin, datatype, and description. Once the ANALYZE structure is made, it can be saved into ANALYZE 7.5 format data file using \"save_untouch_nii\" command (for more detail, type: help save_untouch_nii). Usage: ana = make_ana(img, [voxel_size], [origin], [datatype], [description]) Where: img: a 3D matrix [x y z], or a 4D matrix with time series [x y z t]. When image is in RGB format, make sure that the size of 4th dimension is always 3 (i.e. [R G B]). In that case, make sure that you must specify RGB datatype to 128. voxel_size (optional): Voxel size in millimeter for each dimension. Default is [1 1 1]. origin (optional): The AC origin. Default is [0 0 0]. datatype (optional): Storage data type: 2 - uint8, 4 - int16, 8 - int32, 16 - float32, 64 - float64, 128 - RGB24 Default will use the data type of 'img' matrix For RGB image, you must specify it to 128. description (optional): Description of data. Default is ''. e.g.: origin = [33 44 13]; datatype = 64; ana = make_ana(img, [], origin, datatype); % default voxel_size ANALYZE 7.5 format: http://www.rotman-baycrest.on.ca/~jimmy/ANALYZE75.pdf Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"make_ana"},{"location":"3_contributing/api_documentation/external/NIFTI/make_ana/#attributes","text":"nInputs : -1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/make_nii/","text":"make_nii Filetype: MATLAB\u00ae function Synopsis: Make NIfTI structure specified by an N-D matrix. Usually, N is 3 for 3D matrix [x y z], or 4 for 4D matrix with time series [x y z t]. Optional parameters can also be included, such as: voxel_size, origin, datatype, and description. Once the NIfTI structure is made, it can be saved into NIfTI file using \"save_nii\" command (for more detail, type: help save_nii). Usage: nii = make_nii(img, [voxel_size], [origin], [datatype], [description]) Where: img: Usually, img is a 3D matrix [x y z], or a 4D matrix with time series [x y z t]. However, NIfTI allows a maximum of 7D matrix. When the image is in RGB format, make sure that the size of 4th dimension is always 3 (i.e. [R G B]). In that case, make sure that you must specify RGB datatype, which is either 128 or 511. voxel_size (optional): Voxel size in millimeter for each dimension. Default is [1 1 1]. origin (optional): The AC origin. Default is [0 0 0]. datatype (optional): Storage data type: 2 - uint8, 4 - int16, 8 - int32, 16 - float32, 64 - float64, 128 - RGB24, 256 - int8, 511 - RGB96, 512 - uint16, 768 - uint32 Default will use the data type of 'img' matrix For RGB image, you must specify it to either 128 or 511. description (optional): Description of data. Default is ''. e.g.: origin = [33 44 13]; datatype = 64; nii = make_nii(img, [], origin, datatype); % default voxel_size NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : -1 nOutputs : 1","title":"make_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/make_nii/#make_nii","text":"Filetype: MATLAB\u00ae function Synopsis: Make NIfTI structure specified by an N-D matrix. Usually, N is 3 for 3D matrix [x y z], or 4 for 4D matrix with time series [x y z t]. Optional parameters can also be included, such as: voxel_size, origin, datatype, and description. Once the NIfTI structure is made, it can be saved into NIfTI file using \"save_nii\" command (for more detail, type: help save_nii). Usage: nii = make_nii(img, [voxel_size], [origin], [datatype], [description]) Where: img: Usually, img is a 3D matrix [x y z], or a 4D matrix with time series [x y z t]. However, NIfTI allows a maximum of 7D matrix. When the image is in RGB format, make sure that the size of 4th dimension is always 3 (i.e. [R G B]). In that case, make sure that you must specify RGB datatype, which is either 128 or 511. voxel_size (optional): Voxel size in millimeter for each dimension. Default is [1 1 1]. origin (optional): The AC origin. Default is [0 0 0]. datatype (optional): Storage data type: 2 - uint8, 4 - int16, 8 - int32, 16 - float32, 64 - float64, 128 - RGB24, 256 - int8, 511 - RGB96, 512 - uint16, 768 - uint32 Default will use the data type of 'img' matrix For RGB image, you must specify it to either 128 or 511. description (optional): Description of data. Default is ''. e.g.: origin = [33 44 13]; datatype = 64; nii = make_nii(img, [], origin, datatype); % default voxel_size NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"make_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/make_nii/#attributes","text":"nInputs : -1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/mat_into_hdr/","text":"mat_into_hdr Filetype: MATLAB\u00ae function Synopsis: The old versions of SPM (any version before SPM5) store an affine matrix of the SPM Reoriented image into a matlab file (.mat extension). The file name of this SPM matlab file is the same as the SPM Reoriented image file (.img/.hdr extension). This program will convert the ANALYZE 7.5 SPM Reoriented image file into NIfTI format, and integrate the affine matrix in the SPM matlab file into its header file (.hdr extension). WARNING: Before you run this program, please save the header file (.hdr extension) into another file name or into another folder location, because all header files (.hdr extension) will be overwritten after they are converted into NIfTI format. Usage: mat_into_hdr(filename); filename: file name(s) with .hdr or .mat file extension, like: ' .hdr', or ' .mat', or a single .hdr or .mat file. e.g. mat_into_hdr('T1.hdr') mat_into_hdr('*.mat') Attributes nInputs : 1 nOutputs : 0","title":"mat_into_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/mat_into_hdr/#mat_into_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: The old versions of SPM (any version before SPM5) store an affine matrix of the SPM Reoriented image into a matlab file (.mat extension). The file name of this SPM matlab file is the same as the SPM Reoriented image file (.img/.hdr extension). This program will convert the ANALYZE 7.5 SPM Reoriented image file into NIfTI format, and integrate the affine matrix in the SPM matlab file into its header file (.hdr extension). WARNING: Before you run this program, please save the header file (.hdr extension) into another file name or into another folder location, because all header files (.hdr extension) will be overwritten after they are converted into NIfTI format. Usage: mat_into_hdr(filename); filename: file name(s) with .hdr or .mat file extension, like: ' .hdr', or ' .mat', or a single .hdr or .mat file. e.g. mat_into_hdr('T1.hdr') mat_into_hdr('*.mat')","title":"mat_into_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/mat_into_hdr/#attributes","text":"nInputs : 1 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/reslice_nii/","text":"reslice_nii Filetype: MATLAB\u00ae function Synopsis: The basic application of the 'reslice_nii.m' program is to perform any 3D affine transform defined by a NIfTI format image. In addition, the 'reslice_nii.m' program can also be applied to generate an isotropic image from either a NIfTI format image or an ANALYZE format image. The resliced NIfTI file will always be in RAS orientation. This program only supports real integer or floating-point data type. For other data type, the program will exit with an error message \"Transform of this NIFTI data is not supported by the program\". Usage: reslice_nii(old_fn, new_fn, [voxel_size], [verbose], [bg], ... [method], [img_idx], [preferredForm]); old_fn - filename for original NIfTI file new_fn - filename for resliced NIfTI file voxel_size (optional) - size of a voxel in millimeter along x y z direction for resliced NIfTI file. 'voxel_size' will use the rounded minimum voxel_size in original NIfTI header, if it is default or empty. verbose (optional) - 1, 0 1: show transforming progress in percentage 2: progress will not be displayed 'verbose' is 1 if it is default or empty. bg (optional) - background voxel intensity in any extra corner that is caused by 3D interpolation. 0 in most cases. 'bg' will be the average of two corner voxel intensities in original image volume, if it is default or empty. method (optional) - 1, 2, or 3 1: for Trilinear interpolation 2: for Nearest Neighbor interpolation 3: for Fischer's Bresenham interpolation 'method' is 1 if it is default or empty. img_idx (optional) - a numerical array of image volume indices. Only the specified volumes will be loaded. All available image volumes will be loaded, if it is default or empty. The number of images scans can be obtained from get_nii_frame.m, or simply: hdr.dime.dim(5). preferredForm (optional) - selects which transformation from voxels to RAS coordinates; values are s,q,S,Q. Lower case s,q indicate \"prefer sform or qform, but use others if preferred not present\". Upper case indicate the program is forced to use the specificied tranform or fail loading. 'preferredForm' will be 's', if it is default or empty. - Jeff Gunter NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 8 nOutputs : 0","title":"reslice_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/reslice_nii/#reslice_nii","text":"Filetype: MATLAB\u00ae function Synopsis: The basic application of the 'reslice_nii.m' program is to perform any 3D affine transform defined by a NIfTI format image. In addition, the 'reslice_nii.m' program can also be applied to generate an isotropic image from either a NIfTI format image or an ANALYZE format image. The resliced NIfTI file will always be in RAS orientation. This program only supports real integer or floating-point data type. For other data type, the program will exit with an error message \"Transform of this NIFTI data is not supported by the program\". Usage: reslice_nii(old_fn, new_fn, [voxel_size], [verbose], [bg], ... [method], [img_idx], [preferredForm]); old_fn - filename for original NIfTI file new_fn - filename for resliced NIfTI file voxel_size (optional) - size of a voxel in millimeter along x y z direction for resliced NIfTI file. 'voxel_size' will use the rounded minimum voxel_size in original NIfTI header, if it is default or empty. verbose (optional) - 1, 0 1: show transforming progress in percentage 2: progress will not be displayed 'verbose' is 1 if it is default or empty. bg (optional) - background voxel intensity in any extra corner that is caused by 3D interpolation. 0 in most cases. 'bg' will be the average of two corner voxel intensities in original image volume, if it is default or empty. method (optional) - 1, 2, or 3 1: for Trilinear interpolation 2: for Nearest Neighbor interpolation 3: for Fischer's Bresenham interpolation 'method' is 1 if it is default or empty. img_idx (optional) - a numerical array of image volume indices. Only the specified volumes will be loaded. All available image volumes will be loaded, if it is default or empty. The number of images scans can be obtained from get_nii_frame.m, or simply: hdr.dime.dim(5). preferredForm (optional) - selects which transformation from voxels to RAS coordinates; values are s,q,S,Q. Lower case s,q indicate \"prefer sform or qform, but use others if preferred not present\". Upper case indicate the program is forced to use the specificied tranform or fail loading. 'preferredForm' will be 's', if it is default or empty. - Jeff Gunter NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"reslice_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/reslice_nii/#attributes","text":"nInputs : 8 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_file_menu/","text":"rri_file_menu Filetype: MATLAB\u00ae function Synopsis: Imbed a file menu to any figure. If file menu exist, it will append to the existing file menu. This file menu includes: Copy to clipboard, print, save, close etc. Usage: rri_file_menu(fig); rri_file_menu(fig,0) means no 'Close' menu. Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : -2 nOutputs : 0","title":"rri_file_menu"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_file_menu/#rri_file_menu","text":"Filetype: MATLAB\u00ae function Synopsis: Imbed a file menu to any figure. If file menu exist, it will append to the existing file menu. This file menu includes: Copy to clipboard, print, save, close etc. Usage: rri_file_menu(fig); rri_file_menu(fig,0) means no 'Close' menu. Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"rri_file_menu"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_file_menu/#attributes","text":"nInputs : -2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_orient/","text":"rri_orient Filetype: MATLAB\u00ae function Synopsis: Convert image of different orientations to standard Analyze orientation Usage: nii = rri_orient(nii); Attributes nInputs : -2 nOutputs : 3","title":"rri_orient"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_orient/#rri_orient","text":"Filetype: MATLAB\u00ae function Synopsis: Convert image of different orientations to standard Analyze orientation Usage: nii = rri_orient(nii);","title":"rri_orient"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_orient/#attributes","text":"nInputs : -2 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_orient_ui/","text":"rri_orient_ui Filetype: MATLAB\u00ae function Synopsis: Return orientation of the current image: orient is orientation 1x3 matrix, in that: Three elements represent: [x y z] Element value: 1 - Left to Right; 2 - Posterior to Anterior; 3 - Inferior to Superior; 4 - Right to Left; 5 - Anterior to Posterior; 6 - Superior to Inferior; e.g.: Standard RAS Orientation: [1 2 3] Standard RHOS Orientation: [2 4 3] Attributes nInputs : -1 nOutputs : 1","title":"rri_orient_ui"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_orient_ui/#rri_orient_ui","text":"Filetype: MATLAB\u00ae function Synopsis: Return orientation of the current image: orient is orientation 1x3 matrix, in that: Three elements represent: [x y z] Element value: 1 - Left to Right; 2 - Posterior to Anterior; 3 - Inferior to Superior; 4 - Right to Left; 5 - Anterior to Posterior; 6 - Superior to Inferior; e.g.: Standard RAS Orientation: [1 2 3] Standard RHOS Orientation: [2 4 3]","title":"rri_orient_ui"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_orient_ui/#attributes","text":"nInputs : -1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_select_file/","text":"rri_select_file Filetype: MATLAB\u00ae function Synopsis: USAGE: [selected_file, selected_path] = ... USAGE: [selected_file, selected_path] = ... rri_select_file(dir_name, fig_title) Allow user to select a file from a list of Matlab competible file format Example: [selected_file, selected_path] = ... rri_select_file('/usr','Select Data File'); See Also RRI_GETFILES Attributes nInputs : -1 nOutputs : 2","title":"rri_select_file"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_select_file/#rri_select_file","text":"Filetype: MATLAB\u00ae function Synopsis: USAGE: [selected_file, selected_path] = ... USAGE: [selected_file, selected_path] = ... rri_select_file(dir_name, fig_title) Allow user to select a file from a list of Matlab competible file format Example: [selected_file, selected_path] = ... rri_select_file('/usr','Select Data File'); See Also RRI_GETFILES","title":"rri_select_file"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_select_file/#attributes","text":"nInputs : -1 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_xhair/","text":"rri_xhair Filetype: MATLAB\u00ae function Synopsis: rri_xhair: create a pair of full_cross_hair at point [x y] in axes h_ax, and return xhair struct Usage: xhair = rri_xhair([x y], xhair, h_ax); If omit xhair, rri_xhair will create a pair of xhair; otherwise, rri_xhair will update the xhair. If omit h_ax, current axes will be used. Attributes nInputs : -1 nOutputs : 1","title":"rri_xhair"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_xhair/#rri_xhair","text":"Filetype: MATLAB\u00ae function Synopsis: rri_xhair: create a pair of full_cross_hair at point [x y] in axes h_ax, and return xhair struct Usage: xhair = rri_xhair([x y], xhair, h_ax); If omit xhair, rri_xhair will create a pair of xhair; otherwise, rri_xhair will update the xhair. If omit h_ax, current axes will be used.","title":"rri_xhair"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_xhair/#attributes","text":"nInputs : -1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_zoom_menu/","text":"rri_zoom_menu Filetype: MATLAB\u00ae function Synopsis: Imbed a zoom menu to any figure. Usage: rri_zoom_menu(fig); Attributes nInputs : 1 nOutputs : 1","title":"rri_zoom_menu"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_zoom_menu/#rri_zoom_menu","text":"Filetype: MATLAB\u00ae function Synopsis: Imbed a zoom menu to any figure. Usage: rri_zoom_menu(fig);","title":"rri_zoom_menu"},{"location":"3_contributing/api_documentation/external/NIFTI/rri_zoom_menu/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii/","text":"save_nii Filetype: MATLAB\u00ae function Synopsis: Save NIFTI dataset. Support both .nii and .hdr/*.img file extension. If file extension is not provided, .hdr/ .img will be used as default. Usage: save_nii(nii, filename, [old_RGB]) nii.hdr - struct with NIFTI header fields (from load_nii.m or make_nii.m) nii.img - 3D (or 4D) matrix of NIFTI data. filename - NIFTI file name. old_RGB - an optional boolean variable to handle special RGB data sequence [R1 R2 ... G1 G2 ... B1 B2 ...] that is used only by AnalyzeDirect (Analyze Software). Since both NIfTI and Analyze file format use RGB triple [R1 G1 B1 R2 G2 B2 ...] sequentially for each voxel, this variable is set to FALSE by default. If you would like the saved image only to be opened by AnalyzeDirect Software, set old_RGB to TRUE (or 1). It will be set to 0, if it is default or empty. Tip: to change the data type, set nii.hdr.dime.datatype, and nii.hdr.dime.bitpix to: 0 None (Unknown bit per voxel) % DT_NONE, DT_UNKNOWN 1 Binary (ubit1, bitpix=1) % DT_BINARY 2 Unsigned char (uchar or uint8, bitpix=8) % DT_UINT8, NIFTI_TYPE_UINT8 4 Signed short (int16, bitpix=16) % DT_INT16, NIFTI_TYPE_INT16 8 Signed integer (int32, bitpix=32) % DT_INT32, NIFTI_TYPE_INT32 16 Floating point (single or float32, bitpix=32) % DT_FLOAT32, NIFTI_TYPE_FLOAT32 32 Complex, 2 float32 (Use float32, bitpix=64) % DT_COMPLEX64, NIFTI_TYPE_COMPLEX64 64 Double precision (double or float64, bitpix=64) % DT_FLOAT64, NIFTI_TYPE_FLOAT64 128 uint RGB (Use uint8, bitpix=24) % DT_RGB24, NIFTI_TYPE_RGB24 256 Signed char (schar or int8, bitpix=8) % DT_INT8, NIFTI_TYPE_INT8 511 Single RGB (Use float32, bitpix=96) % DT_RGB96, NIFTI_TYPE_RGB96 512 Unsigned short (uint16, bitpix=16) % DT_UNINT16, NIFTI_TYPE_UNINT16 768 Unsigned integer (uint32, bitpix=32) % DT_UNINT32, NIFTI_TYPE_UNINT32 1024 Signed long long (int64, bitpix=64) % DT_INT64, NIFTI_TYPE_INT64 1280 Unsigned long long (uint64, bitpix=64) % DT_UINT64, NIFTI_TYPE_UINT64 1536 Long double, float128 (Unsupported, bitpix=128) % DT_FLOAT128, NIFTI_TYPE_FLOAT128 1792 Complex128, 2 float64 (Use float64, bitpix=128) % DT_COMPLEX128, NIFTI_TYPE_COMPLEX128 2048 Complex256, 2 float128 (Unsupported, bitpix=256) % DT_COMPLEX128, NIFTI_TYPE_COMPLEX128 Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) \"old_RGB\" related codes in \"save_nii.m\" are added by Mike Harms (2006.06.28) Attributes nInputs : 3 nOutputs : 0","title":"save_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii/#save_nii","text":"Filetype: MATLAB\u00ae function Synopsis: Save NIFTI dataset. Support both .nii and .hdr/*.img file extension. If file extension is not provided, .hdr/ .img will be used as default. Usage: save_nii(nii, filename, [old_RGB]) nii.hdr - struct with NIFTI header fields (from load_nii.m or make_nii.m) nii.img - 3D (or 4D) matrix of NIFTI data. filename - NIFTI file name. old_RGB - an optional boolean variable to handle special RGB data sequence [R1 R2 ... G1 G2 ... B1 B2 ...] that is used only by AnalyzeDirect (Analyze Software). Since both NIfTI and Analyze file format use RGB triple [R1 G1 B1 R2 G2 B2 ...] sequentially for each voxel, this variable is set to FALSE by default. If you would like the saved image only to be opened by AnalyzeDirect Software, set old_RGB to TRUE (or 1). It will be set to 0, if it is default or empty. Tip: to change the data type, set nii.hdr.dime.datatype, and nii.hdr.dime.bitpix to: 0 None (Unknown bit per voxel) % DT_NONE, DT_UNKNOWN 1 Binary (ubit1, bitpix=1) % DT_BINARY 2 Unsigned char (uchar or uint8, bitpix=8) % DT_UINT8, NIFTI_TYPE_UINT8 4 Signed short (int16, bitpix=16) % DT_INT16, NIFTI_TYPE_INT16 8 Signed integer (int32, bitpix=32) % DT_INT32, NIFTI_TYPE_INT32 16 Floating point (single or float32, bitpix=32) % DT_FLOAT32, NIFTI_TYPE_FLOAT32 32 Complex, 2 float32 (Use float32, bitpix=64) % DT_COMPLEX64, NIFTI_TYPE_COMPLEX64 64 Double precision (double or float64, bitpix=64) % DT_FLOAT64, NIFTI_TYPE_FLOAT64 128 uint RGB (Use uint8, bitpix=24) % DT_RGB24, NIFTI_TYPE_RGB24 256 Signed char (schar or int8, bitpix=8) % DT_INT8, NIFTI_TYPE_INT8 511 Single RGB (Use float32, bitpix=96) % DT_RGB96, NIFTI_TYPE_RGB96 512 Unsigned short (uint16, bitpix=16) % DT_UNINT16, NIFTI_TYPE_UNINT16 768 Unsigned integer (uint32, bitpix=32) % DT_UNINT32, NIFTI_TYPE_UNINT32 1024 Signed long long (int64, bitpix=64) % DT_INT64, NIFTI_TYPE_INT64 1280 Unsigned long long (uint64, bitpix=64) % DT_UINT64, NIFTI_TYPE_UINT64 1536 Long double, float128 (Unsupported, bitpix=128) % DT_FLOAT128, NIFTI_TYPE_FLOAT128 1792 Complex128, 2 float64 (Use float64, bitpix=128) % DT_COMPLEX128, NIFTI_TYPE_COMPLEX128 2048 Complex256, 2 float128 (Unsupported, bitpix=256) % DT_COMPLEX128, NIFTI_TYPE_COMPLEX128 Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) \"old_RGB\" related codes in \"save_nii.m\" are added by Mike Harms (2006.06.28)","title":"save_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii/#attributes","text":"nInputs : 3 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii_ext/","text":"save_nii_ext Filetype: MATLAB\u00ae function Synopsis: Save NIFTI header extension. Usage: save_nii_ext(ext, fid) ext - struct with NIFTI header extension fields. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 2 nOutputs : 0","title":"save_nii_ext"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii_ext/#save_nii_ext","text":"Filetype: MATLAB\u00ae function Synopsis: Save NIFTI header extension. Usage: save_nii_ext(ext, fid) ext - struct with NIFTI header extension fields. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"save_nii_ext"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii_ext/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii_hdr/","text":"save_nii_hdr Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 2 nOutputs : 0","title":"save_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii_hdr/#save_nii_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"save_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/save_nii_hdr/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch0_nii_hdr/","text":"save_untouch0_nii_hdr Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 2 nOutputs : 0","title":"save_untouch0_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch0_nii_hdr/#save_untouch0_nii_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"save_untouch0_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch0_nii_hdr/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_nii/","text":"save_untouch_nii Filetype: MATLAB\u00ae function Synopsis: Save NIFTI or ANALYZE dataset that is loaded by \"load_untouch_nii.m\". The output image format and file extension will be the same as the input one (NIFTI.nii, NIFTI.img or ANALYZE.img). Therefore, any file extension that you specified will be ignored. Usage: save_untouch_nii(nii, filename) nii - nii structure that is loaded by \"load_untouch_nii.m\" filename - NIFTI or ANALYZE file name. Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 2 nOutputs : 0","title":"save_untouch_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_nii/#save_untouch_nii","text":"Filetype: MATLAB\u00ae function Synopsis: Save NIFTI or ANALYZE dataset that is loaded by \"load_untouch_nii.m\". The output image format and file extension will be the same as the input one (NIFTI.nii, NIFTI.img or ANALYZE.img). Therefore, any file extension that you specified will be ignored. Usage: save_untouch_nii(nii, filename) nii - nii structure that is loaded by \"load_untouch_nii.m\" filename - NIFTI or ANALYZE file name. Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"save_untouch_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_nii/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_nii_hdr/","text":"save_untouch_nii_hdr Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 2 nOutputs : 0","title":"save_untouch_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_nii_hdr/#save_untouch_nii_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"save_untouch_nii_hdr"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_nii_hdr/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_slice/","text":"save_untouch_slice Filetype: MATLAB\u00ae function Synopsis: Save back to the back to the original image a portion of slices that were loaded by \"load_untouch_nii\". You can process those slices matrix in any way, as long as their dimension is not changed. Usage: save_untouch_slice(slice, filename, ... slice_idx, [img_idx], [dim5_idx], [dim6_idx], [dim7_idx]) Example: nii = load_nii('avg152T1_LR_nifti.nii'); save_nii(nii, 'test.nii'); view_nii(nii); nii = load_untouch_nii('test.nii','','','','','',[40 51:53]); nii.img = ones(91,109,4)*122; save_untouch_slice(nii.img, 'test.nii', [40 51:52]); nii = load_nii('test.nii'); view_nii(nii); Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 7 nOutputs : 0","title":"save_untouch_slice"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_slice/#save_untouch_slice","text":"Filetype: MATLAB\u00ae function Synopsis: Save back to the back to the original image a portion of slices that were loaded by \"load_untouch_nii\". You can process those slices matrix in any way, as long as their dimension is not changed. Usage: save_untouch_slice(slice, filename, ... slice_idx, [img_idx], [dim5_idx], [dim6_idx], [dim7_idx]) Example: nii = load_nii('avg152T1_LR_nifti.nii'); save_nii(nii, 'test.nii'); view_nii(nii); nii = load_untouch_nii('test.nii','','','','','',[40 51:53]); nii.img = ones(91,109,4)*122; save_untouch_slice(nii.img, 'test.nii', [40 51:52]); nii = load_nii('test.nii'); view_nii(nii); Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"save_untouch_slice"},{"location":"3_contributing/api_documentation/external/NIFTI/save_untouch_slice/#attributes","text":"nInputs : 7 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/unxform_nii/","text":"unxform_nii Filetype: MATLAB\u00ae function Synopsis: Undo the flipping and rotations performed by xform_nii; spit back only the raw img data block. Initial cut will only deal with 3D volumes strongly assume we have called xform_nii to write down the steps used in xform_nii. Usage: a = load_nii('original_name'); manipulate a.img to make array b; if you use unxform_nii to un-tranform the image (img) data block, then nii.original.hdr is the corresponding header. nii.original.img = unxform_nii(a, b); save_nii(nii.original,'newname'); Where, 'newname' is created with data in the same space as the original_name data Jeff Gunter, 26-JUN-06 Attributes nInputs : 2 nOutputs : 1","title":"unxform_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/unxform_nii/#unxform_nii","text":"Filetype: MATLAB\u00ae function Synopsis: Undo the flipping and rotations performed by xform_nii; spit back only the raw img data block. Initial cut will only deal with 3D volumes strongly assume we have called xform_nii to write down the steps used in xform_nii. Usage: a = load_nii('original_name'); manipulate a.img to make array b; if you use unxform_nii to un-tranform the image (img) data block, then nii.original.hdr is the corresponding header. nii.original.img = unxform_nii(a, b); save_nii(nii.original,'newname'); Where, 'newname' is created with data in the same space as the original_name data Jeff Gunter, 26-JUN-06","title":"unxform_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/unxform_nii/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/verify_nii_ext/","text":"verify_nii_ext Filetype: MATLAB\u00ae function Synopsis: Verify NIFTI header extension to make sure that each extension section must be an integer multiple of 16 byte long that includes the first 8 bytes of esize and ecode. If the length of extension section is not the above mentioned case, edata should be padded with all 0. Usage: [ext, esize_total] = verify_nii_ext(ext) ext - Structure of NIFTI header extension, which includes num_ext, and all the extended header sections in the header extension. Each extended header section will have its esize, ecode, and edata, where edata can be plain text, xml, or any raw data that was saved in the extended header section. esize_total - Sum of all esize variable in all header sections. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : 1 nOutputs : 2","title":"verify_nii_ext"},{"location":"3_contributing/api_documentation/external/NIFTI/verify_nii_ext/#verify_nii_ext","text":"Filetype: MATLAB\u00ae function Synopsis: Verify NIFTI header extension to make sure that each extension section must be an integer multiple of 16 byte long that includes the first 8 bytes of esize and ecode. If the length of extension section is not the above mentioned case, edata should be padded with all 0. Usage: [ext, esize_total] = verify_nii_ext(ext) ext - Structure of NIFTI header extension, which includes num_ext, and all the extended header sections in the header extension. Each extended header section will have its esize, ecode, and edata, where edata can be plain text, xml, or any raw data that was saved in the extended header section. esize_total - Sum of all esize variable in all header sections. NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"verify_nii_ext"},{"location":"3_contributing/api_documentation/external/NIFTI/verify_nii_ext/#attributes","text":"nInputs : 1 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii/","text":"view_nii Filetype: MATLAB\u00ae function Synopsis: VIEW_NII: Create or update a 3-View (Front, Top, Side) of the brain data that is specified by nii structure Usage: status = view_nii([h], nii, [option]) or status = view_nii(h, [option]) Where, h is the figure on which the 3-View will be plotted; nii is the brain data in NIFTI format; option is a struct that configures the view plotted, can be: option.command = 'init' option.command = 'update' option.command = 'clearnii' option.command = 'updatenii' option.command = 'updateimg' (nii is nii.img here) option.usecolorbar = 0 | [1] option.usepanel = 0 | [1] option.usecrosshair = 0 | [1] option.usestretch = 0 | [1] option.useimagesc = 0 | [1] option.useinterp = [0] | 1 option.setarea = [x y w h] | [0.05 0.05 0.9 0.9] option.setunit = ['vox'] | 'mm' option.setviewpoint = [x y z] | [origin] option.setscanid = [t] | [1] option.setcrosshaircolor = [r g b] | [1 0 0] option.setcolorindex = From 1 to 9 (default is 2 or 3) option.setcolormap = (Mx3 matrix, 0 <= val <= 1) option.setcolorlevel = No more than 256 (default 256) option.sethighcolor = [] option.setcbarminmax = [] option.setvalue = [] option.glblocminmax = [] option.setbuttondown = '' option.setcomplex = [0] | 1 | 2 Options description in detail: command: A char string that can control program. init: If option.command='init', the program will display a 3-View plot on the figure specified by figure h or on a new figure. If there is already a 3-View plot on the figure, please use option.command = 'updatenii' (see detail below); otherwise, the new 3-View plot will superimpose on the old one. If there is no option provided, the program will assume that this is an initial plot. If the figure handle is omitted, the program knows that it is an initial plot. update: If there is no command specified, and a figure handle of the existing 3-View plot is provided, the program will choose option.command='update' to update the 3-View plot with some new option items. clearnii: Clear 3-View plot on specific figure updatenii: If a new nii is going to be loaded on a fig that has already 3-View plot on it, use this command to clear existing 3-View plot, and then display with new nii. So, the new nii will not superimpose on the existing one. All options for 'init' can be used for 'updatenii'. updateimg: If a new 3D matrix with the same dimension is going to be loaded, option.command='updateimg' can be used as a light-weighted 'updatenii, since it only updates the 3 slices with new values. inputing argument nii should be a 3D matrix (nii.img) instead of nii struct. No other option should be used together with 'updateimg' to keep this command as simple as possible. usecolorbar: If specified and usecolorbar=0, the program will not include the colorbar in plot area; otherwise, a colorbar will be included in plot area. usepanel: If specified and usepanel=0, the control panel at lower right cornor will be invisible; otherwise, it will be visible. usecrosshair: If specified and usecrosshair=0, the crosshair will be invisible; otherwise, it will be visible. usestretch: If specified and usestretch=0, the 3 slices will not be stretched, and will be displayed according to the actual voxel size; otherwise, the 3 slices will be stretched to the edge. useimagesc: If specified and useimagesc=0, images data will be used directly to match the colormap (like 'image' command); otherwise, image data will be scaled to full colormap with 'imagesc' command in Matlab. useinterp: If specified and useinterp=1, the image will be displayed using interpolation. Otherwise, it will be displayed like mosaic, and each tile stands for a pixel. This option does not apply to 'setvalue' option is set. setarea: 3-View plot will be displayed on this specific region. If it is not specified, program will set the plot area to [0.05 0.05 0.9 0.9]. setunit: It can be specified to setunit='voxel' or 'mm' and the view will change the axes unit of [X Y Z] accordingly. setviewpoint: If specified, [X Y Z] values will be used to set the viewpoint of 3-View plot. setscanid: If specified, [t] value will be used to display the specified image scan in NIFTI data. setcrosshaircolor: If specified, [r g b] value will be used for Crosshair Color. Otherwise, red will be the default. setcolorindex: If specified, the 3-View will choose the following colormap: 2 - Bipolar; 3 - Gray; 4 - Jet; 5 - Cool; 6 - Bone; 7 - Hot; 8 - Copper; 9 - Pink; If not specified, it will choose 3 - Gray if all data values are not less than 0; otherwise, it will choose 2 - Bipolar if there is value less than 0. (Contrast control can only apply to 3 - Gray colormap. setcolormap: 3-View plot will use it as a customized colormap. It is a 3-column matrix with value between 0 and 1. If using MS-Windows version of Matlab, the number of rows can not be more than 256, because of Matlab limitation. When colormap is used, setcolorlevel option will be disabled automatically. setcolorlevel: If specified (must be no more than 256, and cannot be used for customized colormap), row number of colormap will be squeezed down to this level; otherwise, it will assume that setcolorlevel=256. sethighcolor: If specified, program will squeeze down the colormap, and allocate sethighcolor (an Mx3 matrix) to high-end portion of the colormap. The sum of M and setcolorlevel should be less than 256. If setcolormap option is used, sethighcolor will be inserted on top of the setcolormap, and the setcolorlevel option will be disabled automatically. setcbarminmax: if specified, the [min max] will be used to set the min and max of the colorbar, which does not include any data for highcolor. setvalue: If specified, setvalue.val (with the same size as the source data on solution points) in the source area setvalue.idx will be superimposed on the current nii image. So, the size of setvalue.val should be equal to the size of setvalue.idx. To use this feature, it needs single or double nii structure for background image. glblocminmax: If specified, pgm will use glblocminmax to calculate the colormap, instead of minmax of image. setbuttondown: If specified, pgm will evaluate the command after a click or slide action is invoked to the new view point. setcomplex: This option will decide how complex data to be displayed: 0 - Real part of complex data; 1 - Imaginary part of complex data; 2 - Modulus (magnitude) of complex data; If not specified, it will be set to 0 (Real part of complex data as default option. This option only apply when option.command is set to 'init or 'updatenii'. Additional Options for 'update' command: option.enablecursormove = [1] | 0 option.enableviewpoint = 0 | [1] option.enableorigin = 0 | [1] option.enableunit = 0 | [1] option.enablecrosshair = 0 | [1] option.enablehistogram = 0 | [1] option.enablecolormap = 0 | [1] option.enablecontrast = 0 | [1] option.enablebrightness = 0 | [1] option.enableslider = 0 | [1] option.enabledirlabel = 0 | [1] e.g.: nii = load_nii('T1'); % T1.img/hdr view_nii(nii); or h = figure('unit','normal','pos', [0.18 0.08 0.64 0.85]); opt.setarea = [0.05 0.05 0.9 0.9]; view_nii(h, nii, opt); Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca) Attributes nInputs : -1 nOutputs : 1","title":"view_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii/#view_nii","text":"Filetype: MATLAB\u00ae function Synopsis: VIEW_NII: Create or update a 3-View (Front, Top, Side) of the brain data that is specified by nii structure Usage: status = view_nii([h], nii, [option]) or status = view_nii(h, [option]) Where, h is the figure on which the 3-View will be plotted; nii is the brain data in NIFTI format; option is a struct that configures the view plotted, can be: option.command = 'init' option.command = 'update' option.command = 'clearnii' option.command = 'updatenii' option.command = 'updateimg' (nii is nii.img here) option.usecolorbar = 0 | [1] option.usepanel = 0 | [1] option.usecrosshair = 0 | [1] option.usestretch = 0 | [1] option.useimagesc = 0 | [1] option.useinterp = [0] | 1 option.setarea = [x y w h] | [0.05 0.05 0.9 0.9] option.setunit = ['vox'] | 'mm' option.setviewpoint = [x y z] | [origin] option.setscanid = [t] | [1] option.setcrosshaircolor = [r g b] | [1 0 0] option.setcolorindex = From 1 to 9 (default is 2 or 3) option.setcolormap = (Mx3 matrix, 0 <= val <= 1) option.setcolorlevel = No more than 256 (default 256) option.sethighcolor = [] option.setcbarminmax = [] option.setvalue = [] option.glblocminmax = [] option.setbuttondown = '' option.setcomplex = [0] | 1 | 2","title":"view_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii/#options-description-in-detail","text":"command: A char string that can control program. init: If option.command='init', the program will display a 3-View plot on the figure specified by figure h or on a new figure. If there is already a 3-View plot on the figure, please use option.command = 'updatenii' (see detail below); otherwise, the new 3-View plot will superimpose on the old one. If there is no option provided, the program will assume that this is an initial plot. If the figure handle is omitted, the program knows that it is an initial plot. update: If there is no command specified, and a figure handle of the existing 3-View plot is provided, the program will choose option.command='update' to update the 3-View plot with some new option items. clearnii: Clear 3-View plot on specific figure updatenii: If a new nii is going to be loaded on a fig that has already 3-View plot on it, use this command to clear existing 3-View plot, and then display with new nii. So, the new nii will not superimpose on the existing one. All options for 'init' can be used for 'updatenii'. updateimg: If a new 3D matrix with the same dimension is going to be loaded, option.command='updateimg' can be used as a light-weighted 'updatenii, since it only updates the 3 slices with new values. inputing argument nii should be a 3D matrix (nii.img) instead of nii struct. No other option should be used together with 'updateimg' to keep this command as simple as possible. usecolorbar: If specified and usecolorbar=0, the program will not include the colorbar in plot area; otherwise, a colorbar will be included in plot area. usepanel: If specified and usepanel=0, the control panel at lower right cornor will be invisible; otherwise, it will be visible. usecrosshair: If specified and usecrosshair=0, the crosshair will be invisible; otherwise, it will be visible. usestretch: If specified and usestretch=0, the 3 slices will not be stretched, and will be displayed according to the actual voxel size; otherwise, the 3 slices will be stretched to the edge. useimagesc: If specified and useimagesc=0, images data will be used directly to match the colormap (like 'image' command); otherwise, image data will be scaled to full colormap with 'imagesc' command in Matlab. useinterp: If specified and useinterp=1, the image will be displayed using interpolation. Otherwise, it will be displayed like mosaic, and each tile stands for a pixel. This option does not apply to 'setvalue' option is set. setarea: 3-View plot will be displayed on this specific region. If it is not specified, program will set the plot area to [0.05 0.05 0.9 0.9]. setunit: It can be specified to setunit='voxel' or 'mm' and the view will change the axes unit of [X Y Z] accordingly. setviewpoint: If specified, [X Y Z] values will be used to set the viewpoint of 3-View plot. setscanid: If specified, [t] value will be used to display the specified image scan in NIFTI data. setcrosshaircolor: If specified, [r g b] value will be used for Crosshair Color. Otherwise, red will be the default. setcolorindex: If specified, the 3-View will choose the following colormap: 2 - Bipolar; 3 - Gray; 4 - Jet; 5 - Cool; 6 - Bone; 7 - Hot; 8 - Copper; 9 - Pink; If not specified, it will choose 3 - Gray if all data values are not less than 0; otherwise, it will choose 2 - Bipolar if there is value less than 0. (Contrast control can only apply to 3 - Gray colormap. setcolormap: 3-View plot will use it as a customized colormap. It is a 3-column matrix with value between 0 and 1. If using MS-Windows version of Matlab, the number of rows can not be more than 256, because of Matlab limitation. When colormap is used, setcolorlevel option will be disabled automatically. setcolorlevel: If specified (must be no more than 256, and cannot be used for customized colormap), row number of colormap will be squeezed down to this level; otherwise, it will assume that setcolorlevel=256. sethighcolor: If specified, program will squeeze down the colormap, and allocate sethighcolor (an Mx3 matrix) to high-end portion of the colormap. The sum of M and setcolorlevel should be less than 256. If setcolormap option is used, sethighcolor will be inserted on top of the setcolormap, and the setcolorlevel option will be disabled automatically. setcbarminmax: if specified, the [min max] will be used to set the min and max of the colorbar, which does not include any data for highcolor. setvalue: If specified, setvalue.val (with the same size as the source data on solution points) in the source area setvalue.idx will be superimposed on the current nii image. So, the size of setvalue.val should be equal to the size of setvalue.idx. To use this feature, it needs single or double nii structure for background image. glblocminmax: If specified, pgm will use glblocminmax to calculate the colormap, instead of minmax of image. setbuttondown: If specified, pgm will evaluate the command after a click or slide action is invoked to the new view point. setcomplex: This option will decide how complex data to be displayed: 0 - Real part of complex data; 1 - Imaginary part of complex data; 2 - Modulus (magnitude) of complex data; If not specified, it will be set to 0 (Real part of complex data as default option. This option only apply when option.command is set to 'init or 'updatenii'.","title":"Options description in detail:"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii/#additional-options-for-update-command","text":"option.enablecursormove = [1] | 0 option.enableviewpoint = 0 | [1] option.enableorigin = 0 | [1] option.enableunit = 0 | [1] option.enablecrosshair = 0 | [1] option.enablehistogram = 0 | [1] option.enablecolormap = 0 | [1] option.enablecontrast = 0 | [1] option.enablebrightness = 0 | [1] option.enableslider = 0 | [1] option.enabledirlabel = 0 | [1] e.g.: nii = load_nii('T1'); % T1.img/hdr view_nii(nii); or h = figure('unit','normal','pos', [0.18 0.08 0.64 0.85]); opt.setarea = [0.05 0.05 0.9 0.9]; view_nii(h, nii, opt); Part of this file is copied and modified from: http://www.mathworks.com/matlabcentral/fileexchange/1878-mri-analyze-tools NIFTI data format can be found on: http://nifti.nimh.nih.gov Jimmy Shen (jimmy@rotman-baycrest.on.ca)","title":"Additional Options for 'update' command:"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii/#attributes","text":"nInputs : -1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii_menu/","text":"view_nii_menu Filetype: MATLAB\u00ae function Synopsis: Imbed Zoom, Interp, and Info menu to view_nii window. Usage: view_nii_menu(fig); Attributes nInputs : -2 nOutputs : 1","title":"view_nii_menu"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii_menu/#view_nii_menu","text":"Filetype: MATLAB\u00ae function Synopsis: Imbed Zoom, Interp, and Info menu to view_nii window. Usage: view_nii_menu(fig);","title":"view_nii_menu"},{"location":"3_contributing/api_documentation/external/NIFTI/view_nii_menu/#attributes","text":"nInputs : -2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/NIFTI/xform_nii/","text":"xform_nii Filetype: MATLAB\u00ae function Synopsis: internal function internal function Attributes nInputs : 3 nOutputs : 1","title":"xform_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/xform_nii/#xform_nii","text":"Filetype: MATLAB\u00ae function Synopsis: internal function internal function","title":"xform_nii"},{"location":"3_contributing/api_documentation/external/NIFTI/xform_nii/#attributes","text":"nInputs : 3 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/append_pdfs/","text":"append_pdfs Filetype: MATLAB\u00ae function Synopsis: Appends/concatenates multiple PDF files Example: append_pdfs(output, input1, input2, ...) append_pdfs(output, input_list{:}) append_pdfs test.pdf temp1.pdf temp2.pdf This function appends multiple PDF files to an existing PDF file, or concatenates them into a PDF file if the output file doesn't yet exist. This function requires that you have ghostscript installed on your system. Ghostscript can be downloaded from: http://www.ghostscript.com IN: output - string of output file name (including the extension, .pdf). If it exists it is appended to; if not, it is created. input1 - string of an input file name (including the extension, .pdf). All input files are appended in order. input_list - cell array list of input file name strings. All input files are appended in order. Attributes nInputs : -1 nOutputs : 0","title":"append_pdfs"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/append_pdfs/#append_pdfs","text":"Filetype: MATLAB\u00ae function Synopsis: Appends/concatenates multiple PDF files Example: append_pdfs(output, input1, input2, ...) append_pdfs(output, input_list{:}) append_pdfs test.pdf temp1.pdf temp2.pdf This function appends multiple PDF files to an existing PDF file, or concatenates them into a PDF file if the output file doesn't yet exist. This function requires that you have ghostscript installed on your system. Ghostscript can be downloaded from: http://www.ghostscript.com IN: output - string of output file name (including the extension, .pdf). If it exists it is appended to; if not, it is created. input1 - string of an input file name (including the extension, .pdf). All input files are appended in order. input_list - cell array list of input file name strings. All input files are appended in order.","title":"append_pdfs"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/append_pdfs/#attributes","text":"nInputs : -1 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/copyfig/","text":"copyfig Filetype: MATLAB\u00ae function Synopsis: Create a copy of a figure, without changing the figure Examples: fh_new = copyfig(fh_old) This function will create a copy of a figure, but not change the figure, as copyobj sometimes does, e.g. by changing legends. IN: fh_old - The handle of the figure to be copied. Default: gcf. OUT: fh_new - The handle of the created figure. Attributes nInputs : 1 nOutputs : 1","title":"copyfig"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/copyfig/#copyfig","text":"Filetype: MATLAB\u00ae function Synopsis: Create a copy of a figure, without changing the figure Examples: fh_new = copyfig(fh_old) This function will create a copy of a figure, but not change the figure, as copyobj sometimes does, e.g. by changing legends. IN: fh_old - The handle of the figure to be copied. Default: gcf. OUT: fh_new - The handle of the created figure.","title":"copyfig"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/copyfig/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/crop_borders/","text":"crop_borders Filetype: MATLAB\u00ae function Synopsis: Crop the borders of an image or stack of images [B, vA, vB, bb_rel] = crop_borders(A, bcol, [padding]) IN: A - HxWxCxN stack of images. bcol - Cx1 background colour vector. padding - scalar indicating how much padding to have in relation to the cropped-image-size (0<=padding<=1). Default: 0 OUT: B - JxKxCxN cropped stack of images. vA - coordinates in A that contain the cropped image vB - coordinates in B where the cropped version of A is placed bb_rel - relative bounding box (used for eps-cropping) Attributes nInputs : 3 nOutputs : 4","title":"crop_borders"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/crop_borders/#crop_borders","text":"Filetype: MATLAB\u00ae function Synopsis: Crop the borders of an image or stack of images [B, vA, vB, bb_rel] = crop_borders(A, bcol, [padding]) IN: A - HxWxCxN stack of images. bcol - Cx1 background colour vector. padding - scalar indicating how much padding to have in relation to the cropped-image-size (0<=padding<=1). Default: 0 OUT: B - JxKxCxN cropped stack of images. vA - coordinates in A that contain the cropped image vB - coordinates in B where the cropped version of A is placed bb_rel - relative bounding box (used for eps-cropping)","title":"crop_borders"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/crop_borders/#attributes","text":"nInputs : 3 nOutputs : 4","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/eps2pdf/","text":"eps2pdf Filetype: MATLAB\u00ae function Synopsis: Convert an eps file to pdf format using ghostscript Examples: eps2pdf source dest eps2pdf(source, dest, crop) eps2pdf(source, dest, crop, append) eps2pdf(source, dest, crop, append, gray) eps2pdf(source, dest, crop, append, gray, quality) eps2pdf(source, dest, crop, append, gray, quality, gs_options) This function converts an eps file to pdf format. The output can be optionally cropped and also converted to grayscale. If the output pdf file already exists then the eps file can optionally be appended as a new page on the end of the eps file. The level of bitmap compression can also optionally be set. This function requires that you have ghostscript installed on your system. Ghostscript can be downloaded from: http://www.ghostscript.com Inputs: source - filename of the source eps file to convert. The filename is assumed to already have the extension \".eps\". dest - filename of the destination pdf file. The filename is assumed to already have the extension \".pdf\". crop - boolean indicating whether to crop the borders off the pdf. Default: true. append - boolean indicating whether the eps should be appended to the end of the pdf as a new page (if the pdf exists already). Default: false. gray - boolean indicating whether the output pdf should be grayscale or not. Default: false. quality - scalar indicating the level of image bitmap quality to output. A larger value gives a higher quality. quality > 100 gives lossless output. Default: ghostscript prepress default. gs_options - optional ghostscript options (e.g.: '-dNoOutputFonts'). If multiple options are needed, enclose in call array: {'-a','-b'} Attributes nInputs : 7 nOutputs : 0","title":"eps2pdf"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/eps2pdf/#eps2pdf","text":"Filetype: MATLAB\u00ae function Synopsis: Convert an eps file to pdf format using ghostscript Examples: eps2pdf source dest eps2pdf(source, dest, crop) eps2pdf(source, dest, crop, append) eps2pdf(source, dest, crop, append, gray) eps2pdf(source, dest, crop, append, gray, quality) eps2pdf(source, dest, crop, append, gray, quality, gs_options) This function converts an eps file to pdf format. The output can be optionally cropped and also converted to grayscale. If the output pdf file already exists then the eps file can optionally be appended as a new page on the end of the eps file. The level of bitmap compression can also optionally be set. This function requires that you have ghostscript installed on your system. Ghostscript can be downloaded from: http://www.ghostscript.com Inputs: source - filename of the source eps file to convert. The filename is assumed to already have the extension \".eps\". dest - filename of the destination pdf file. The filename is assumed to already have the extension \".pdf\". crop - boolean indicating whether to crop the borders off the pdf. Default: true. append - boolean indicating whether the eps should be appended to the end of the pdf as a new page (if the pdf exists already). Default: false. gray - boolean indicating whether the output pdf should be grayscale or not. Default: false. quality - scalar indicating the level of image bitmap quality to output. A larger value gives a higher quality. quality > 100 gives lossless output. Default: ghostscript prepress default. gs_options - optional ghostscript options (e.g.: '-dNoOutputFonts'). If multiple options are needed, enclose in call array: {'-a','-b'}","title":"eps2pdf"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/eps2pdf/#attributes","text":"nInputs : 7 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/export_fig/","text":"export_fig Filetype: MATLAB\u00ae function Synopsis: Exports figures in a publication-quality format Examples: imageData = export_fig [imageData, alpha] = export_fig export_fig filename export_fig filename -format1 -format2 export_fig ... -nocrop export_fig ... -transparent export_fig ... -native export_fig ... -m export_fig ... -r export_fig ... -a export_fig ... -q export_fig ... -p export_fig ... -d export_fig ... -depsc export_fig ... - export_fig ... - export_fig ... -append export_fig ... -bookmark export_fig ... -clipboard export_fig ... -update export_fig ... -nofontswap export_fig(..., handle) This function saves a figure or single axes to one or more vector and/or bitmap file formats, and/or outputs a rasterized version to the workspace, with the following properties: - Figure/axes reproduced as it appears on screen - Cropped borders (optional) - Embedded fonts (vector formats) - Improved line and grid line styles - Anti-aliased graphics (bitmap formats) - Render images at native resolution (optional for bitmap formats) - Transparent background supported (pdf, eps, png) - Semi-transparent patch objects supported (png only) - RGB, CMYK or grayscale output (CMYK only with pdf, eps, tiff) - Variable image compression, including lossless (pdf, eps, jpg) - Optionally append to file (pdf, tiff) - Vector formats: pdf, eps - Bitmap formats: png, tiff, jpg, bmp, export to workspace This function is especially suited to exporting figures for use in publications and presentations, because of the high quality and portability of media produced. Note that the background color and figure dimensions are reproduced (the latter approximately, and ignoring cropping & magnification) in the output file. For transparent background (and semi-transparent patch objects), use the -transparent option or set the figure 'Color' property to 'none'. To make axes transparent set the axes 'Color' property to 'none'. PDF, EPS and PNG are the only formats that support a transparent background, while only PNG format supports transparency of patch objects. The choice of renderer (opengl, zbuffer or painters) has a large impact on the quality of output. The default value (opengl for bitmaps, painters for vector formats) generally gives good results, but if you aren't satisfied then try another renderer. Notes: 1) For vector formats (EPS, PDF), only painters generates vector graphics. 2) For bitmaps, only opengl can render transparent patch objects correctly. 3) For bitmaps, only painters will correctly scale line dash and dot lengths when magnifying or anti-aliasing. 4) Fonts may be substitued with Courier when using painters. When exporting to vector format (PDF & EPS) and bitmap format using the painters renderer, this function requires that ghostscript is installed on your system. You can download this from: http://www.ghostscript.com When exporting to eps it additionally requires pdftops, from the Xpdf suite of functions. You can download this from: http://www.foolabs.com/xpdf Inputs: filename - string containing the name (optionally including full or relative path) of the file the figure is to be saved as. If a path is not specified, the figure is saved in the current directory. If no name and no output arguments are specified, the default name, 'export_fig_out', is used. If neither a file extension nor a format are specified, a \".png\" is added and the figure saved in that format. -format1, -format2, etc. - strings containing the extensions of the file formats the figure is to be saved as. Valid options are: '-pdf', '-eps', '-png', '-tif', '-jpg' and '-bmp'. All combinations of formats are valid. -nocrop - option indicating that the borders of the output are not to be cropped. -transparent - option indicating that the figure background is to be made transparent (png, pdf and eps output only). -m - option where val indicates the factor to magnify the on-screen figure pixel dimensions by when generating bitmap outputs (does not affect vector formats). Default: '-m1'. -r - option val indicates the resolution (in pixels per inch) to export bitmap and vector outputs at, keeping the dimensions of the on-screen figure. Default: '-r864' (for vector output only). Note that the -m option overides the -r option for bitmap outputs only. -native - option indicating that the output resolution (when outputting a bitmap format) should be such that the vertical resolution of the first suitable image found in the figure is at the native resolution of that image. To specify a particular image to use, give it the tag 'export_fig_native'. Notes: This overrides any value set with the -m and -r options. It also assumes that the image is displayed front-to-parallel with the screen. The output resolution is approximate and should not be relied upon. Anti-aliasing can have adverse effects on image quality (disable with the -a1 option). -a1, -a2, -a3, -a4 - option indicating the amount of anti-aliasing to use for bitmap outputs. '-a1' means no anti- aliasing; '-a4' is the maximum amount (default). - - option to force a particular renderer (painters, opengl or zbuffer). Default value: opengl for bitmap formats or figures with patches and/or transparent annotations; painters for vector formats without patches/transparencies. - - option indicating which colorspace color figures should be saved in: RGB (default), CMYK or gray. CMYK is only supported in pdf, eps and tiff output. -q - option to vary bitmap image quality (in pdf, eps and jpg files only). Larger val, in the range 0-100, gives higher quality/lower compression. val > 100 gives lossless compression. Default: '-q95' for jpg, ghostscript prepress default for pdf & eps. Note: lossless compression can sometimes give a smaller file size than the default lossy compression, depending on the type of images. -p - option to pad a border of width val to exported files, where val is either a relative size with respect to cropped image size (i.e. p=0.01 adds a 1% border). For EPS & PDF formats, val can also be integer in units of 1/72\" points (abs(val)>1). val can be positive (padding) or negative (extra cropping). If used, the -nocrop flag will be ignored, i.e. the image will always be cropped and then padded. Default: 0 (i.e. no padding). -append - option indicating that if the file (pdfs only) already exists, the figure is to be appended as a new page, instead of being overwritten (default). -bookmark - option to indicate that a bookmark with the name of the figure is to be created in the output file (pdf only). -clipboard - option to save output as an image on the system clipboard. Note: background transparency is not preserved in clipboard -d - option to indicate a ghostscript setting. For example, -dMaxBitmap=0 or -dNoOutputFonts (Ghostscript 9.15+). -depsc - option to use EPS level-3 rather than the default level-2 print device. This solves some bugs with Matlab's default -depsc2 device such as discolored subplot lines on images (vector formats only). -update - option to download and install the latest version of export_fig -nofontswap - option to avoid font swapping. Font swapping is automatically done in vector formats (only): 11 standard Matlab fonts are replaced by the original figure fonts. This option prevents this. handle - The handle of the figure, axes or uipanels (can be an array of handles, but the objects must be in the same figure) to be saved. Default: gcf. Outputs: imageData - MxNxC uint8 image array of the exported image. alpha - MxN single array of alphamatte values in the range [0,1], for the case when the background is transparent. Some helpful examples and tips can be found at: https://github.com/altmany/export_fig See also PRINT, SAVEAS, ScreenCapture (on the Matlab File Exchange) Attributes nInputs : -1 nOutputs : 2","title":"export_fig"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/export_fig/#export_fig","text":"Filetype: MATLAB\u00ae function Synopsis: Exports figures in a publication-quality format Examples: imageData = export_fig [imageData, alpha] = export_fig export_fig filename export_fig filename -format1 -format2 export_fig ... -nocrop export_fig ... -transparent export_fig ... -native export_fig ... -m export_fig ... -r export_fig ... -a export_fig ... -q export_fig ... -p export_fig ... -d export_fig ... -depsc export_fig ... - export_fig ... - export_fig ... -append export_fig ... -bookmark export_fig ... -clipboard export_fig ... -update export_fig ... -nofontswap export_fig(..., handle) This function saves a figure or single axes to one or more vector and/or bitmap file formats, and/or outputs a rasterized version to the workspace, with the following properties: - Figure/axes reproduced as it appears on screen - Cropped borders (optional) - Embedded fonts (vector formats) - Improved line and grid line styles - Anti-aliased graphics (bitmap formats) - Render images at native resolution (optional for bitmap formats) - Transparent background supported (pdf, eps, png) - Semi-transparent patch objects supported (png only) - RGB, CMYK or grayscale output (CMYK only with pdf, eps, tiff) - Variable image compression, including lossless (pdf, eps, jpg) - Optionally append to file (pdf, tiff) - Vector formats: pdf, eps - Bitmap formats: png, tiff, jpg, bmp, export to workspace This function is especially suited to exporting figures for use in publications and presentations, because of the high quality and portability of media produced. Note that the background color and figure dimensions are reproduced (the latter approximately, and ignoring cropping & magnification) in the output file. For transparent background (and semi-transparent patch objects), use the -transparent option or set the figure 'Color' property to 'none'. To make axes transparent set the axes 'Color' property to 'none'. PDF, EPS and PNG are the only formats that support a transparent background, while only PNG format supports transparency of patch objects. The choice of renderer (opengl, zbuffer or painters) has a large impact on the quality of output. The default value (opengl for bitmaps, painters for vector formats) generally gives good results, but if you aren't satisfied then try another renderer. Notes: 1) For vector formats (EPS, PDF), only painters generates vector graphics. 2) For bitmaps, only opengl can render transparent patch objects correctly. 3) For bitmaps, only painters will correctly scale line dash and dot lengths when magnifying or anti-aliasing. 4) Fonts may be substitued with Courier when using painters. When exporting to vector format (PDF & EPS) and bitmap format using the painters renderer, this function requires that ghostscript is installed on your system. You can download this from: http://www.ghostscript.com When exporting to eps it additionally requires pdftops, from the Xpdf suite of functions. You can download this from: http://www.foolabs.com/xpdf Inputs: filename - string containing the name (optionally including full or relative path) of the file the figure is to be saved as. If a path is not specified, the figure is saved in the current directory. If no name and no output arguments are specified, the default name, 'export_fig_out', is used. If neither a file extension nor a format are specified, a \".png\" is added and the figure saved in that format. -format1, -format2, etc. - strings containing the extensions of the file formats the figure is to be saved as. Valid options are: '-pdf', '-eps', '-png', '-tif', '-jpg' and '-bmp'. All combinations of formats are valid. -nocrop - option indicating that the borders of the output are not to be cropped. -transparent - option indicating that the figure background is to be made transparent (png, pdf and eps output only). -m - option where val indicates the factor to magnify the on-screen figure pixel dimensions by when generating bitmap outputs (does not affect vector formats). Default: '-m1'. -r - option val indicates the resolution (in pixels per inch) to export bitmap and vector outputs at, keeping the dimensions of the on-screen figure. Default: '-r864' (for vector output only). Note that the -m option overides the -r option for bitmap outputs only. -native - option indicating that the output resolution (when outputting a bitmap format) should be such that the vertical resolution of the first suitable image found in the figure is at the native resolution of that image. To specify a particular image to use, give it the tag 'export_fig_native'. Notes: This overrides any value set with the -m and -r options. It also assumes that the image is displayed front-to-parallel with the screen. The output resolution is approximate and should not be relied upon. Anti-aliasing can have adverse effects on image quality (disable with the -a1 option). -a1, -a2, -a3, -a4 - option indicating the amount of anti-aliasing to use for bitmap outputs. '-a1' means no anti- aliasing; '-a4' is the maximum amount (default). - - option to force a particular renderer (painters, opengl or zbuffer). Default value: opengl for bitmap formats or figures with patches and/or transparent annotations; painters for vector formats without patches/transparencies. - - option indicating which colorspace color figures should be saved in: RGB (default), CMYK or gray. CMYK is only supported in pdf, eps and tiff output. -q - option to vary bitmap image quality (in pdf, eps and jpg files only). Larger val, in the range 0-100, gives higher quality/lower compression. val > 100 gives lossless compression. Default: '-q95' for jpg, ghostscript prepress default for pdf & eps. Note: lossless compression can sometimes give a smaller file size than the default lossy compression, depending on the type of images. -p - option to pad a border of width val to exported files, where val is either a relative size with respect to cropped image size (i.e. p=0.01 adds a 1% border). For EPS & PDF formats, val can also be integer in units of 1/72\" points (abs(val)>1). val can be positive (padding) or negative (extra cropping). If used, the -nocrop flag will be ignored, i.e. the image will always be cropped and then padded. Default: 0 (i.e. no padding). -append - option indicating that if the file (pdfs only) already exists, the figure is to be appended as a new page, instead of being overwritten (default). -bookmark - option to indicate that a bookmark with the name of the figure is to be created in the output file (pdf only). -clipboard - option to save output as an image on the system clipboard. Note: background transparency is not preserved in clipboard -d - option to indicate a ghostscript setting. For example, -dMaxBitmap=0 or -dNoOutputFonts (Ghostscript 9.15+). -depsc - option to use EPS level-3 rather than the default level-2 print device. This solves some bugs with Matlab's default -depsc2 device such as discolored subplot lines on images (vector formats only). -update - option to download and install the latest version of export_fig -nofontswap - option to avoid font swapping. Font swapping is automatically done in vector formats (only): 11 standard Matlab fonts are replaced by the original figure fonts. This option prevents this. handle - The handle of the figure, axes or uipanels (can be an array of handles, but the objects must be in the same figure) to be saved. Default: gcf. Outputs: imageData - MxNxC uint8 image array of the exported image. alpha - MxN single array of alphamatte values in the range [0,1], for the case when the background is transparent. Some helpful examples and tips can be found at: https://github.com/altmany/export_fig See also PRINT, SAVEAS, ScreenCapture (on the Matlab File Exchange)","title":"export_fig"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/export_fig/#attributes","text":"nInputs : -1 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/fix_lines/","text":"fix_lines Filetype: MATLAB\u00ae function Synopsis: Improves the line style of eps files generated by print Examples: fix_lines fname fix_lines fname fname2 fstrm_out = fixlines(fstrm_in) This function improves the style of lines in eps files generated by MATLAB's print function, making them more similar to those seen on screen. Grid lines are also changed from a dashed style to a dotted style, for greater differentiation from dashed lines. The function also places embedded fonts after the postscript header, in versions of MATLAB which place the fonts first (R2006b and earlier), in order to allow programs such as Ghostscript to find the bounding box information. IN: fname - Name or path of source eps file. fname2 - Name or path of destination eps file. Default: same as fname. fstrm_in - File contents of a MATLAB-generated eps file. OUT: fstrm_out - Contents of the eps file with line styles fixed. Attributes nInputs : 2 nOutputs : 1","title":"fix_lines"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/fix_lines/#fix_lines","text":"Filetype: MATLAB\u00ae function Synopsis: Improves the line style of eps files generated by print Examples: fix_lines fname fix_lines fname fname2 fstrm_out = fixlines(fstrm_in) This function improves the style of lines in eps files generated by MATLAB's print function, making them more similar to those seen on screen. Grid lines are also changed from a dashed style to a dotted style, for greater differentiation from dashed lines. The function also places embedded fonts after the postscript header, in versions of MATLAB which place the fonts first (R2006b and earlier), in order to allow programs such as Ghostscript to find the bounding box information. IN: fname - Name or path of source eps file. fname2 - Name or path of destination eps file. Default: same as fname. fstrm_in - File contents of a MATLAB-generated eps file. OUT: fstrm_out - Contents of the eps file with line styles fixed.","title":"fix_lines"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/fix_lines/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/ghostscript/","text":"ghostscript Filetype: MATLAB\u00ae function Synopsis: Calls a local GhostScript executable with the input command Example: [status result] = ghostscript(cmd) Attempts to locate a ghostscript executable, finally asking the user to specify the directory ghostcript was installed into. The resulting path is stored for future reference. Once found, the executable is called with the input command string. This function requires that you have Ghostscript installed on your system. You can download this from: http://www.ghostscript.com IN: cmd - Command string to be passed into ghostscript. OUT: status - 0 iff command ran without problem. result - Output from ghostscript. Attributes nInputs : 1 nOutputs : -1","title":"ghostscript"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/ghostscript/#ghostscript","text":"Filetype: MATLAB\u00ae function Synopsis: Calls a local GhostScript executable with the input command Example: [status result] = ghostscript(cmd) Attempts to locate a ghostscript executable, finally asking the user to specify the directory ghostcript was installed into. The resulting path is stored for future reference. Once found, the executable is called with the input command string. This function requires that you have Ghostscript installed on your system. You can download this from: http://www.ghostscript.com IN: cmd - Command string to be passed into ghostscript. OUT: status - 0 iff command ran without problem. result - Output from ghostscript.","title":"ghostscript"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/ghostscript/#attributes","text":"nInputs : 1 nOutputs : -1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/im2gif/","text":"im2gif Filetype: MATLAB\u00ae function Synopsis: Convert a multiframe image to an animated GIF file Examples: im2gif infile im2gif infile outfile im2gif(A, outfile) im2gif(..., '-nocrop') im2gif(..., '-nodither') im2gif(..., '-ncolors', n) im2gif(..., '-loops', n) im2gif(..., '-delay', n) This function converts a multiframe image to an animated GIF. To create an animation from a series of figures, export to a multiframe TIFF file using export_fig, then convert to a GIF, as follows: for a = 2 .^ (3:6) peaks(a); export_fig test.tif -nocrop -append end im2gif('test.tif', '-delay', 0.5); IN: infile - string containing the name of the input image. outfile - string containing the name of the output image (must have the .gif extension). Default: infile, with .gif extension. A - HxWxCxN array of input images, stacked along fourth dimension, to be converted to gif. -nocrop - option indicating that the borders of the output are not to be cropped. -nodither - option indicating that dithering is not to be used when converting the image. -ncolors - option pair, the value of which indicates the maximum number of colors the GIF can have. This can also be a quantization tolerance, between 0 and 1. Default/maximum: 256. -loops - option pair, the value of which gives the number of times the animation is to be looped. Default: 65535. -delay - option pair, the value of which gives the time, in seconds, between frames. Default: 1/15. Attributes nInputs : -2 nOutputs : 0","title":"im2gif"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/im2gif/#im2gif","text":"Filetype: MATLAB\u00ae function Synopsis: Convert a multiframe image to an animated GIF file Examples: im2gif infile im2gif infile outfile im2gif(A, outfile) im2gif(..., '-nocrop') im2gif(..., '-nodither') im2gif(..., '-ncolors', n) im2gif(..., '-loops', n) im2gif(..., '-delay', n) This function converts a multiframe image to an animated GIF. To create an animation from a series of figures, export to a multiframe TIFF file using export_fig, then convert to a GIF, as follows: for a = 2 .^ (3:6) peaks(a); export_fig test.tif -nocrop -append end im2gif('test.tif', '-delay', 0.5); IN: infile - string containing the name of the input image. outfile - string containing the name of the output image (must have the .gif extension). Default: infile, with .gif extension. A - HxWxCxN array of input images, stacked along fourth dimension, to be converted to gif. -nocrop - option indicating that the borders of the output are not to be cropped. -nodither - option indicating that dithering is not to be used when converting the image. -ncolors - option pair, the value of which indicates the maximum number of colors the GIF can have. This can also be a quantization tolerance, between 0 and 1. Default/maximum: 256. -loops - option pair, the value of which gives the number of times the animation is to be looped. Default: 65535. -delay - option pair, the value of which gives the time, in seconds, between frames. Default: 1/15.","title":"im2gif"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/im2gif/#attributes","text":"nInputs : -2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/isolate_axes/","text":"isolate_axes Filetype: MATLAB\u00ae function Synopsis: Isolate the specified axes in a figure on their own Examples: fh = isolate_axes(ah) fh = isolate_axes(ah, vis) This function will create a new figure containing the axes/uipanels specified, and also their associated legends and colorbars. The objects specified must all be in the same figure, but they will generally only be a subset of the objects in the figure. IN: ah - An array of axes and uipanel handles, which must come from the same figure. vis - A boolean indicating whether the new figure should be visible. Default: false. OUT: fh - The handle of the created figure. Attributes nInputs : 2 nOutputs : 1","title":"isolate_axes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/isolate_axes/#isolate_axes","text":"Filetype: MATLAB\u00ae function Synopsis: Isolate the specified axes in a figure on their own Examples: fh = isolate_axes(ah) fh = isolate_axes(ah, vis) This function will create a new figure containing the axes/uipanels specified, and also their associated legends and colorbars. The objects specified must all be in the same figure, but they will generally only be a subset of the objects in the figure. IN: ah - An array of axes and uipanel handles, which must come from the same figure. vis - A boolean indicating whether the new figure should be visible. Default: false. OUT: fh - The handle of the created figure.","title":"isolate_axes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/isolate_axes/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/pdf2eps/","text":"pdf2eps Filetype: MATLAB\u00ae function Synopsis: Convert a pdf file to eps format using pdftops Examples: pdf2eps source dest This function converts a pdf file to eps format. This function requires that you have pdftops, from the Xpdf suite of functions, installed on your system. This can be downloaded from: http://www.foolabs.com/xpdf IN: source - filename of the source pdf file to convert. The filename is assumed to already have the extension \".pdf\". dest - filename of the destination eps file. The filename is assumed to already have the extension \".eps\". Attributes nInputs : 2 nOutputs : 0","title":"pdf2eps"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/pdf2eps/#pdf2eps","text":"Filetype: MATLAB\u00ae function Synopsis: Convert a pdf file to eps format using pdftops Examples: pdf2eps source dest This function converts a pdf file to eps format. This function requires that you have pdftops, from the Xpdf suite of functions, installed on your system. This can be downloaded from: http://www.foolabs.com/xpdf IN: source - filename of the source pdf file to convert. The filename is assumed to already have the extension \".pdf\". dest - filename of the destination eps file. The filename is assumed to already have the extension \".eps\".","title":"pdf2eps"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/pdf2eps/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/pdftops/","text":"pdftops Filetype: MATLAB\u00ae function Synopsis: Calls a local pdftops executable with the input command Example: [status result] = pdftops(cmd) Attempts to locate a pdftops executable, finally asking the user to specify the directory pdftops was installed into. The resulting path is stored for future reference. Once found, the executable is called with the input command string. This function requires that you have pdftops (from the Xpdf package) installed on your system. You can download this from: http://www.foolabs.com/xpdf IN: cmd - Command string to be passed into pdftops. OUT: status - 0 iff command ran without problem. result - Output from pdftops. Attributes nInputs : 1 nOutputs : -1","title":"pdftops"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/pdftops/#pdftops","text":"Filetype: MATLAB\u00ae function Synopsis: Calls a local pdftops executable with the input command Example: [status result] = pdftops(cmd) Attempts to locate a pdftops executable, finally asking the user to specify the directory pdftops was installed into. The resulting path is stored for future reference. Once found, the executable is called with the input command string. This function requires that you have pdftops (from the Xpdf package) installed on your system. You can download this from: http://www.foolabs.com/xpdf IN: cmd - Command string to be passed into pdftops. OUT: status - 0 iff command ran without problem. result - Output from pdftops.","title":"pdftops"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/pdftops/#attributes","text":"nInputs : 1 nOutputs : -1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/print2array/","text":"print2array Filetype: MATLAB\u00ae function Synopsis: Exports a figure to an image array Examples: A = print2array A = print2array(figure_handle) A = print2array(figure_handle, resolution) A = print2array(figure_handle, resolution, renderer) A = print2array(figure_handle, resolution, renderer, gs_options) [A bcol] = print2array(...) This function outputs a bitmap image of the given figure, at the desired resolution. If renderer is '-painters' then ghostcript needs to be installed. This can be downloaded from: http://www.ghostscript.com IN: figure_handle - The handle of the figure to be exported. Default: gcf. resolution - Resolution of the output, as a factor of screen resolution. Default: 1. renderer - string containing the renderer paramater to be passed to print. Default: '-opengl'. gs_options - optional ghostscript options (e.g.: '-dNoOutputFonts'). If multiple options are needed, enclose in call array: {'-a','-b'} OUT: A - MxNx3 uint8 image of the figure. bcol - 1x3 uint8 vector of the background color Attributes nInputs : 4 nOutputs : 2","title":"print2array"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/print2array/#print2array","text":"Filetype: MATLAB\u00ae function Synopsis: Exports a figure to an image array Examples: A = print2array A = print2array(figure_handle) A = print2array(figure_handle, resolution) A = print2array(figure_handle, resolution, renderer) A = print2array(figure_handle, resolution, renderer, gs_options) [A bcol] = print2array(...) This function outputs a bitmap image of the given figure, at the desired resolution. If renderer is '-painters' then ghostcript needs to be installed. This can be downloaded from: http://www.ghostscript.com IN: figure_handle - The handle of the figure to be exported. Default: gcf. resolution - Resolution of the output, as a factor of screen resolution. Default: 1. renderer - string containing the renderer paramater to be passed to print. Default: '-opengl'. gs_options - optional ghostscript options (e.g.: '-dNoOutputFonts'). If multiple options are needed, enclose in call array: {'-a','-b'} OUT: A - MxNx3 uint8 image of the figure. bcol - 1x3 uint8 vector of the background color","title":"print2array"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/print2array/#attributes","text":"nInputs : 4 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/print2eps/","text":"print2eps Filetype: MATLAB\u00ae function Synopsis: Prints figures to eps with improved line styles Examples: print2eps filename print2eps(filename, fig_handle) print2eps(filename, fig_handle, export_options) print2eps(filename, fig_handle, export_options, print_options) This function saves a figure as an eps file, with two improvements over MATLAB's print command. First, it improves the line style, making dashed lines more like those on screen and giving grid lines a dotted line style. Secondly, it substitutes original font names back into the eps file, where these have been changed by MATLAB, for up to 11 different fonts. IN: filename - string containing the name (optionally including full or relative path) of the file the figure is to be saved as. A \".eps\" extension is added if not there already. If a path is not specified, the figure is saved in the current directory. fig_handle - The handle of the figure to be saved. Default: gcf(). export_options - array or struct of optional scalar values: bb_padding - Scalar value of amount of padding to add to border around the cropped image, in points (if >1) or percent (if <1). Can be negative as well as positive; Default: 0 crop - Crop amount. Deafult: 0 fontswap - Whether to swap non-default fonts in figure. Default: true renderer - Renderer used to generate bounding-box. Default: 'opengl' print_options - Additional parameter strings to be passed to the print command Attributes nInputs : -4 nOutputs : 0","title":"print2eps"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/print2eps/#print2eps","text":"Filetype: MATLAB\u00ae function Synopsis: Prints figures to eps with improved line styles Examples: print2eps filename print2eps(filename, fig_handle) print2eps(filename, fig_handle, export_options) print2eps(filename, fig_handle, export_options, print_options) This function saves a figure as an eps file, with two improvements over MATLAB's print command. First, it improves the line style, making dashed lines more like those on screen and giving grid lines a dotted line style. Secondly, it substitutes original font names back into the eps file, where these have been changed by MATLAB, for up to 11 different fonts. IN: filename - string containing the name (optionally including full or relative path) of the file the figure is to be saved as. A \".eps\" extension is added if not there already. If a path is not specified, the figure is saved in the current directory. fig_handle - The handle of the figure to be saved. Default: gcf(). export_options - array or struct of optional scalar values: bb_padding - Scalar value of amount of padding to add to border around the cropped image, in points (if >1) or percent (if <1). Can be negative as well as positive; Default: 0 crop - Crop amount. Deafult: 0 fontswap - Whether to swap non-default fonts in figure. Default: true renderer - Renderer used to generate bounding-box. Default: 'opengl' print_options - Additional parameter strings to be passed to the print command","title":"print2eps"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/print2eps/#attributes","text":"nInputs : -4 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/read_write_entire_textfile/","text":"read_write_entire_textfile Filetype: MATLAB\u00ae function Synopsis: Read or write a whole text file to/from memory Read or write an entire text file to/from memory, without leaving the file open if an error occurs. Reading: fstrm = read_write_entire_textfile(fname) Writing: read_write_entire_textfile(fname, fstrm) IN: fname - Pathname of text file to be read in. fstrm - String to be written to the file, including carriage returns. OUT: fstrm - String read from the file. If an fstrm input is given the output is the same as that input. Attributes nInputs : 2 nOutputs : 1","title":"read_write_entire_textfile"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/read_write_entire_textfile/#read_write_entire_textfile","text":"Filetype: MATLAB\u00ae function Synopsis: Read or write a whole text file to/from memory Read or write an entire text file to/from memory, without leaving the file open if an error occurs. Reading: fstrm = read_write_entire_textfile(fname) Writing: read_write_entire_textfile(fname, fstrm) IN: fname - Pathname of text file to be read in. fstrm - String to be written to the file, including carriage returns. OUT: fstrm - String read from the file. If an fstrm input is given the output is the same as that input.","title":"read_write_entire_textfile"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/read_write_entire_textfile/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/user_string/","text":"user_string Filetype: MATLAB\u00ae function Synopsis: Get/set a user specific string Examples: string = user_string(string_name) isSaved = user_string(string_name, new_string) Function to get and set a string in a system or user specific file. This enables, for example, system specific paths to binaries to be saved. The specified string will be saved in a file named .txt, either in a subfolder named .ignore under this file's folder, or in the user's prefdir folder (in case this file's folder is non-writable). IN: string_name - String containing the name of the string required, which sets the filename storing the string: .txt new_string - The new string to be saved in the .txt file OUT: string - The currently saved string. Default: '' isSaved - Boolean indicating whether the save was succesful Attributes nInputs : 2 nOutputs : 1","title":"user_string"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/user_string/#user_string","text":"Filetype: MATLAB\u00ae function Synopsis: Get/set a user specific string Examples: string = user_string(string_name) isSaved = user_string(string_name, new_string) Function to get and set a string in a system or user specific file. This enables, for example, system specific paths to binaries to be saved. The specified string will be saved in a file named .txt, either in a subfolder named .ignore under this file's folder, or in the user's prefdir folder (in case this file's folder is non-writable). IN: string_name - String containing the name of the string required, which sets the filename storing the string: .txt new_string - The new string to be saved in the .txt file OUT: string - The currently saved string. Default: '' isSaved - Boolean indicating whether the save was succesful","title":"user_string"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/user_string/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/using_hg2/","text":"using_hg2 Filetype: MATLAB\u00ae function Synopsis: Determine if the HG2 graphics engine is used tf = using_hg2(fig) IN: fig - handle to the figure in question. OUT: tf - boolean indicating whether the HG2 graphics engine is being used (true) or not (false). Attributes nInputs : 1 nOutputs : 1","title":"using_hg2"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/using_hg2/#using_hg2","text":"Filetype: MATLAB\u00ae function Synopsis: Determine if the HG2 graphics engine is used tf = using_hg2(fig) IN: fig - handle to the figure in question. OUT: tf - boolean indicating whether the HG2 graphics engine is being used (true) or not (false).","title":"using_hg2"},{"location":"3_contributing/api_documentation/external/altmany-export_fig-4c015d5/using_hg2/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/bpfilt/bpfilt/","text":"bpfilt Filetype: MATLAB\u00ae function Synopsis: Bandpass filtering Syntax: y = bpfilt(signal, f1, f2, [options]) Description: This function performs bandpass filtering of a time series with rectangle window. Input Arguments: signal - a column vector of time series. f1 - the lower bound of frequencies (in Hz). f2 - the upper bound of frequencies (in Hz). Options: fs - the sampling frequency in Hz. Default is 1 Hz. isplot - whether to produce plots. Output Arguments: y - the filtered time series. Examples: fs = 100; t = 1:1/fs:10; x = sin(t); y = bpfilt(x,20,30); See also References: History: 07/13/2016 - Initial script. 04/02/2019 by ryan.topfer@polymtl.ca Wonsang You(wsgyou@gmail.com) 07/13/2016 Copyright (c) 2016 Wonsang You. Folders named bpfilt external/bpfilt Attributes nInputs : 5 nOutputs : 1","title":"bpfilt"},{"location":"3_contributing/api_documentation/external/bpfilt/bpfilt/#bpfilt","text":"Filetype: MATLAB\u00ae function Synopsis: Bandpass filtering Syntax: y = bpfilt(signal, f1, f2, [options]) Description: This function performs bandpass filtering of a time series with rectangle window. Input Arguments: signal - a column vector of time series. f1 - the lower bound of frequencies (in Hz). f2 - the upper bound of frequencies (in Hz). Options: fs - the sampling frequency in Hz. Default is 1 Hz. isplot - whether to produce plots. Output Arguments: y - the filtered time series. Examples: fs = 100; t = 1:1/fs:10; x = sin(t); y = bpfilt(x,20,30); See also References: History: 07/13/2016 - Initial script. 04/02/2019 by ryan.topfer@polymtl.ca Wonsang You(wsgyou@gmail.com) 07/13/2016 Copyright (c) 2016 Wonsang You. Folders named bpfilt external/bpfilt","title":"bpfilt"},{"location":"3_contributing/api_documentation/external/bpfilt/bpfilt/#attributes","text":"nInputs : 5 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm2nii/","text":"dicm2nii Filetype: MATLAB\u00ae function Synopsis: Convert dicom and more into nii or img/hdr files. DICM2NII(dcmSource, niiFolder, outFormat, MoCoOption) The input arguments are all optional: 1. source file or folder. It can be a zip or tgz file, a folder containing dicom files, or other convertible files. It can also contain wildcards like 'run1_*' for all files start with 'run1_'. 2. folder to save result files. 3. output file format: 0 or 'nii' for single nii uncompressed. 1 or 'nii.gz' for single nii compressed (default). 2 or 'hdr' for hdr/img pair uncompressed. 3 or 'hdr.gz' for hdr/img pair compressed. 4 or '3D.nii' for 3D nii uncompressed (SPM12). 5 or '3D.nii.gz' for 3D nii compressed. 6 or '3D.hdr' for 3D hdr/img pair uncompressed (SPM8). 7 or '3D.hdr.gz' for 3D hdr/img pair compressed. 4. MoCo series options: 0 create files for both original and MoCo series. 1 ignore MoCo series if both present (default). 2 ignore original series if both present. Note that if only one of the two series is present, it will be converted always. In the future, this option may be removed, and all files will be converted. The optional output is converted PatientName(s). Typical examples: dicm2nii; % bring up user interface if there is no input argument dicm2nii('D:/myProj/zip/subj1.zip', 'D:/myProj/subj1/data'); % zip file dicm2nii('D:/myProj/subj1/dicom/', 'D:/myProj/subj1/data'); % folder Less useful examples: dicm2nii('D:/myProj/dicom/', 'D:/myProj/subj2/data', 'nii'); % no gz compress dicm2nii('D:/myProj/dicom/run2*', 'D:/myProj/subj/data'); % convert run2 only dicm2nii('D:/dicom/', 'D:/data', '3D.nii'); % SPM style files If there is no input, or any of the first two input is empty, the graphic user interface will appear. If the first input is a zip/tgz file, such as those downloaded from dicom server, DICM2NII will extract files into a temp folder, create NIfTI files into the data folder, and then delete the temp folder. For this reason, it is better to keep the compressed file as backup. If a folder is the data source, DICM2NII will convert all files in the folder and its subfolders (there is no need to sort files for different series). Please note that, if a file in the middle of a series is missing, the series will normally be skipped without converting, and a warning message in red text will be shown in Command Windows, and the message will also be saved into a text file under the data folder. For MoCo series, motion parameters, RBMoCoTrans and RBMoCoRot, are also saved. A Matlab data file, dcmHeaders.mat, is always saved into the data folder. This file contains dicom header from the first file for created series and some information from last file in field LastFile. Some extra information may also be saved into this file. Slice timing information, if available, is stored in nii header, such as slice_code and slice_duration. But the simple way may be to use the field SliceTiming in dcmHeaders.mat. That timing is actually those numbers for FSL when using custom slice timing. This is the universal method to specify any kind of slice order, and for now, is the only way which works for multiband. Slice order is one of the most confusing parameters, and it is recommended to use this method to avoid mistake. Following shows how to convert this timing into slice timing in ms and slice order for SPM: load('dcmHeaders.mat'); % or drag and drop the MAT file into Matlab s = h.myFuncSeries; % field name is the same as nii file name spm_ms = (0.5 - s.SliceTiming) * s.RepetitionTime; [~, spm_order] = sort(-s.SliceTiming); Some information, such as TE, phase encoding direction and effective dwell time are stored in descrip of nii header. These are useful for fieldmap B0 unwarp correction. Acquisition start time and date are also stored, and this may be useful if one wants to align the functional data to some physiological recording, like pulse, respiration or ECG. If there is DTI series, bval and bvec files will be generated for FSL etc. For DTI series, B_value and DiffusionGradientDirection for all directions are saved into the dcmHeaders.mat file. Starting from 20150514, the converter stores some useful information in NIfTI text extension (ecode=6). nii_tool can decode these information easily: ext = nii_tool('ext', 'myNiftiFile.nii'); % read NIfTI extension ext.edata_decoded contains all above mentioned information, and more. Please note that some information, such as the slice order information, phase encoding direction and DTI bvec are in image reference, rather than NIfTI coordinate system. This is because most analysis packages require information in image space. For this reason, in case the image in a NIfTI file is flipped or re-oriented, these information may not be correct anymore. The output file names adopt SeriesDescription or ProtocolName of each series used on scanner console. If both original and MoCo series are requested, '_MoCo' will be appended for MoCo series. For phase image, such as those from field map, '_phase' will be appended to the name. If multiple subjects data are mixed (strongly discouraged), subject name will be in file name. In case of name conflict, SeriesNumber, such as '_s005', will be appended to make file names unique. It is suggested to use short and descriptive SeriesDescription on the scanner console, and use names containing only letters, numbers and underscores. For SPM 3D files, the file names will have volume index in format of '_00001' appended to above name. Please report any bug to xiangrui.li@gmail.com or at http://www.mathworks.com/matlabcentral/fileexchange/42997 Folders named dicm2nii external/dicm2nii Attributes nInputs : -3 nOutputs : -1","title":"dicm2nii"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm2nii/#dicm2nii","text":"Filetype: MATLAB\u00ae function Synopsis: Convert dicom and more into nii or img/hdr files. DICM2NII(dcmSource, niiFolder, outFormat, MoCoOption) The input arguments are all optional: 1. source file or folder. It can be a zip or tgz file, a folder containing dicom files, or other convertible files. It can also contain wildcards like 'run1_*' for all files start with 'run1_'. 2. folder to save result files. 3. output file format: 0 or 'nii' for single nii uncompressed. 1 or 'nii.gz' for single nii compressed (default). 2 or 'hdr' for hdr/img pair uncompressed. 3 or 'hdr.gz' for hdr/img pair compressed. 4 or '3D.nii' for 3D nii uncompressed (SPM12). 5 or '3D.nii.gz' for 3D nii compressed. 6 or '3D.hdr' for 3D hdr/img pair uncompressed (SPM8). 7 or '3D.hdr.gz' for 3D hdr/img pair compressed. 4. MoCo series options: 0 create files for both original and MoCo series. 1 ignore MoCo series if both present (default). 2 ignore original series if both present. Note that if only one of the two series is present, it will be converted always. In the future, this option may be removed, and all files will be converted. The optional output is converted PatientName(s). Typical examples: dicm2nii; % bring up user interface if there is no input argument dicm2nii('D:/myProj/zip/subj1.zip', 'D:/myProj/subj1/data'); % zip file dicm2nii('D:/myProj/subj1/dicom/', 'D:/myProj/subj1/data'); % folder Less useful examples: dicm2nii('D:/myProj/dicom/', 'D:/myProj/subj2/data', 'nii'); % no gz compress dicm2nii('D:/myProj/dicom/run2*', 'D:/myProj/subj/data'); % convert run2 only dicm2nii('D:/dicom/', 'D:/data', '3D.nii'); % SPM style files If there is no input, or any of the first two input is empty, the graphic user interface will appear. If the first input is a zip/tgz file, such as those downloaded from dicom server, DICM2NII will extract files into a temp folder, create NIfTI files into the data folder, and then delete the temp folder. For this reason, it is better to keep the compressed file as backup. If a folder is the data source, DICM2NII will convert all files in the folder and its subfolders (there is no need to sort files for different series). Please note that, if a file in the middle of a series is missing, the series will normally be skipped without converting, and a warning message in red text will be shown in Command Windows, and the message will also be saved into a text file under the data folder. For MoCo series, motion parameters, RBMoCoTrans and RBMoCoRot, are also saved. A Matlab data file, dcmHeaders.mat, is always saved into the data folder. This file contains dicom header from the first file for created series and some information from last file in field LastFile. Some extra information may also be saved into this file. Slice timing information, if available, is stored in nii header, such as slice_code and slice_duration. But the simple way may be to use the field SliceTiming in dcmHeaders.mat. That timing is actually those numbers for FSL when using custom slice timing. This is the universal method to specify any kind of slice order, and for now, is the only way which works for multiband. Slice order is one of the most confusing parameters, and it is recommended to use this method to avoid mistake. Following shows how to convert this timing into slice timing in ms and slice order for SPM: load('dcmHeaders.mat'); % or drag and drop the MAT file into Matlab s = h.myFuncSeries; % field name is the same as nii file name spm_ms = (0.5 - s.SliceTiming) * s.RepetitionTime; [~, spm_order] = sort(-s.SliceTiming); Some information, such as TE, phase encoding direction and effective dwell time are stored in descrip of nii header. These are useful for fieldmap B0 unwarp correction. Acquisition start time and date are also stored, and this may be useful if one wants to align the functional data to some physiological recording, like pulse, respiration or ECG. If there is DTI series, bval and bvec files will be generated for FSL etc. For DTI series, B_value and DiffusionGradientDirection for all directions are saved into the dcmHeaders.mat file. Starting from 20150514, the converter stores some useful information in NIfTI text extension (ecode=6). nii_tool can decode these information easily: ext = nii_tool('ext', 'myNiftiFile.nii'); % read NIfTI extension ext.edata_decoded contains all above mentioned information, and more. Please note that some information, such as the slice order information, phase encoding direction and DTI bvec are in image reference, rather than NIfTI coordinate system. This is because most analysis packages require information in image space. For this reason, in case the image in a NIfTI file is flipped or re-oriented, these information may not be correct anymore. The output file names adopt SeriesDescription or ProtocolName of each series used on scanner console. If both original and MoCo series are requested, '_MoCo' will be appended for MoCo series. For phase image, such as those from field map, '_phase' will be appended to the name. If multiple subjects data are mixed (strongly discouraged), subject name will be in file name. In case of name conflict, SeriesNumber, such as '_s005', will be appended to make file names unique. It is suggested to use short and descriptive SeriesDescription on the scanner console, and use names containing only letters, numbers and underscores. For SPM 3D files, the file names will have volume index in format of '_00001' appended to above name. Please report any bug to xiangrui.li@gmail.com or at http://www.mathworks.com/matlabcentral/fileexchange/42997 Folders named dicm2nii external/dicm2nii","title":"dicm2nii"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm2nii/#attributes","text":"nInputs : -3 nOutputs : -1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_dict/","text":"dicm_dict Filetype: MATLAB\u00ae function Synopsis: Return dicom dictionary for specified vendor. dict = dicm_hdr(vendor, dicmFields); The vendor is used to assign those vendor-specific private tags for SIEMENS, GE and Philips. Other vendors can be added easily into the file. If only partial dictionary is needed, the struct fields can be used as the 2nd input. See also DICM_HDR, DICM2NII, DICM_IMG Attributes nInputs : 2 nOutputs : 1","title":"dicm_dict"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_dict/#dicm_dict","text":"Filetype: MATLAB\u00ae function Synopsis: Return dicom dictionary for specified vendor. dict = dicm_hdr(vendor, dicmFields); The vendor is used to assign those vendor-specific private tags for SIEMENS, GE and Philips. Other vendors can be added easily into the file. If only partial dictionary is needed, the struct fields can be used as the 2nd input. See also DICM_HDR, DICM2NII, DICM_IMG","title":"dicm_dict"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_dict/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_hdr/","text":"dicm_hdr Filetype: MATLAB\u00ae function Synopsis: Return header of a dicom file in a struct. [s, err] = dicm_hdr(dicomFileName, dict, iFrames); The mandatory 1st input is the dicom file name. The optional 2nd input can be a dicom dict, which may have only part of the full dict. The partial dict can be returned by dict = dicm_dict(vendor, fieldNames). The use of partial dict may speed up header read considerably. See rename_dicm for example. The optional 3rd intput is only needed for multi-frame dicom files. When there are many frames, it may be very slow to read all items in PerFrameFunctionalGroupsSequence for all frames. The 3rd input can be used to specify the frames to read. By default, items for only 1st, 2nd and last frames are read. The optional 2nd output contains information in case of error, and will be empty if there is no error. DICM_HDR is like dicominfo from Matlab, but is independent of Image Processing Toolbox. The limitation is it can deal with only little endian data for popular vendors. The advantage is that it decodes most private and shadow tags for Siemens, GE and Philips dicom, and runs faster, especially for partial header and multi-frame dicom. This can also read Philips PAR file and AFNI HEAD file, and return needed fields for dicm2nii to convert into nifti. See also DICM_DICT, DICM2NII, DICM_IMG, RENAME_DICM, SORT_DICM Attributes nInputs : 3 nOutputs : 3","title":"dicm_hdr"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_hdr/#dicm_hdr","text":"Filetype: MATLAB\u00ae function Synopsis: Return header of a dicom file in a struct. [s, err] = dicm_hdr(dicomFileName, dict, iFrames); The mandatory 1st input is the dicom file name. The optional 2nd input can be a dicom dict, which may have only part of the full dict. The partial dict can be returned by dict = dicm_dict(vendor, fieldNames). The use of partial dict may speed up header read considerably. See rename_dicm for example. The optional 3rd intput is only needed for multi-frame dicom files. When there are many frames, it may be very slow to read all items in PerFrameFunctionalGroupsSequence for all frames. The 3rd input can be used to specify the frames to read. By default, items for only 1st, 2nd and last frames are read. The optional 2nd output contains information in case of error, and will be empty if there is no error. DICM_HDR is like dicominfo from Matlab, but is independent of Image Processing Toolbox. The limitation is it can deal with only little endian data for popular vendors. The advantage is that it decodes most private and shadow tags for Siemens, GE and Philips dicom, and runs faster, especially for partial header and multi-frame dicom. This can also read Philips PAR file and AFNI HEAD file, and return needed fields for dicm2nii to convert into nifti. See also DICM_DICT, DICM2NII, DICM_IMG, RENAME_DICM, SORT_DICM","title":"dicm_hdr"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_hdr/#attributes","text":"nInputs : 3 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_img/","text":"dicm_img Filetype: MATLAB\u00ae function Synopsis: Read image of a dicom file. img = dicm_img(metaStructOrFilename, xpose); The mandatory first input is the dicom file name, or the struct returned by dicm_hdr. The output keeps the data type in dicom file. The second input is for special purpose. When it is provided and is false, the returned img won't be transposed. This is likely only useful for dicm2nii.m, where the Columns and Rows parameters become counter-intuitive. DICM_IMG is like dicomread from Matlab, but is independent of Image Processing Toolbox. Limitation: DICM_IMG reads only little endian format, and can deal with only JPEG compression. See also DICM_HDR, DICM_DICT, DICM2NII Attributes nInputs : 2 nOutputs : 1","title":"dicm_img"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_img/#dicm_img","text":"Filetype: MATLAB\u00ae function Synopsis: Read image of a dicom file. img = dicm_img(metaStructOrFilename, xpose); The mandatory first input is the dicom file name, or the struct returned by dicm_hdr. The output keeps the data type in dicom file. The second input is for special purpose. When it is provided and is false, the returned img won't be transposed. This is likely only useful for dicm2nii.m, where the Columns and Rows parameters become counter-intuitive. DICM_IMG is like dicomread from Matlab, but is independent of Image Processing Toolbox. Limitation: DICM_IMG reads only little endian format, and can deal with only JPEG compression. See also DICM_HDR, DICM_DICT, DICM2NII","title":"dicm_img"},{"location":"3_contributing/api_documentation/external/dicm2nii/dicm_img/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/dicm2nii/nii_tool/","text":"nii_tool Filetype: MATLAB\u00ae function Synopsis: Basic function to create, load and save NIfTI file. rst = nii_tool(cmd, para); To list all command, type nii_tool ? To get help information for each command, include '?' in cmd, for example: nii_tool init? nii_tool('init?') Here is a list of all command: nii_tool('default', 'version', 1, 'rgb_dim', 1); nii = nii_tool('init', img); nii_tool('save', nii, filename, force_3D); hdr = nii_tool('hdr', filename); img = nii_tool('img', filename_or_hdr); ext = nii_tool('ext', filename_or_hdr); nii = nii_tool('load', filename_or_hdr); nii = nii_tool('cat3D', filenames); nii_tool('RGBStyle', 'afni'); Detail for each command is described below. oldVal = nii_tool('default', 'version', 1, 'rgb_dim', 1); oldVal = nii_tool('default', struct('version', 1, 'rgb_dim', 1)); Set/query default NIfTI version and/or rgb_dim. To check the setting, run nii_tool('default') without other input. The input for 'default' command can be either a struct with fields of 'version' and/or 'rgb_dim', or parameter/value pairs. See nii_tool('RGBstyle') for meaning of rgb_dim. Note that the setting will be saved for future use. If one wants to change the settting temporarily, it is better to return the oldVal, and to restore it after done: oldVal = nii_tool('default', 'version', 2); % set version 2 as default % 'init' and 'save' NIfTI using above version nii_tool('default', oldVal); % restore default setting The default version setting affects 'init' command only. If you 'load' a NIfTI file, modify it, and then 'save' it, the version will be the same as the original file, unless it is changed explicitly (see help for 'save' command). All 'load' command ('load', 'hdr', 'ext', 'img') will read any version correctly, regardless of version setting. nii = nii_tool('init', img, RGB_dim); Initialize nii struct based on img, normally 3D or 4D array. Most fields in the returned nii.hdr contain default values, and need to be updated based on dicom or other information. Important ones include pixdim and s/qform_code and related parameters. The NIfTI datatype will depend on data type of img. Most Matlab data types are supported, including 8/16/32/64 bit signed and unsigned integers, single and double floating numbers. Single/double complex and logical array are also supported. nii_tool returns img with the same data type as it is stored, while numeric values in hdr are in double. This also applies to the struct returned by any nii_tool loading sub-functions. The optional third input is needed only if img contains RGB/RGBA data. It specifies which dimension in img is for RGB or RGBA. In other words, if a non-empty third input is provided, img will be interpreted as RGB or RGBA data. Another way to signify RGB/RGBA data is to permute color dim to 8th-dim of img (RGB_dim of 8 can be omitted then). Since NIfTI img can have up to 7 dim, nii_tool chooses to store RGB/RGBA in 8th dim. Although this looks lengthy (4th to 7th dim are often all ones), nii_tool can deal with up to 7 dim without causing any confusion. This is why the returned nii.img will always store RGB in 8th dim. hdr = nii_tool('hdr', filename); Return hdr struct of the provided NIfTI file. img = nii_tool('img', filename_or_hdr); Return image data in a NIfTI file. The second input can be NIfTI file name, or hdr struct returned by nii_tool('hdr', filename). ext = nii_tool('ext', filename_or_hdr); Return NIfTI extension in a NIfTI file. The second input can be NIfTI file name, or hdr struct returned by nii_tool('hdr', filename). The returned ext will have field 'edata_decoded' if 'ecode' is of known type, such as dicom (2), text (4 or 6) or Matlab (40). Here is an example to add data in myFile.mat as extension to nii struct, which can be from 'init' or 'load': fid = fopen('myFile.mat'); % open the MAT file myEdata = fread(fid, inf, '*uint8'); % load all bytes as byte column fclose(fid); len = int32(numel(myEdata)); % number of bytes in int32 myEdata = [typecast(len, 'uint8')'; myEdata]; % include len in myEdata nii.ext.ecode = 40; % 40 for Matlab extension nii.ext.edata = myEdata; % myEdata must be uint8 array nii_tool will take care of rest when you 'save' nii to a file. In case a NIfTI ext causes problem (for example, some FSL builds have problem in reading NIfTI img with ecode>30), one can remove the ext easily: nii = nii_tool('load', 'file_with_ext.nii'); % load the file with ext nii.ext = []; % or nii = rmfield(nii, 'ext'); % remove ext nii_tool('save', nii, 'file_without_ext.nii'); % save it nii = nii_tool('load', filename_or_hdr); Load NIfTI file into nii struct. The returned struct includes NIfTI 'hdr' and 'img', as well as 'ext' if the file contains NIfTI extension. nii_tool('save', nii, filename, force_3D); Save struct nii into filename. The format of the file is determined by the file extension, such as .img, .nii, .img.gz, .nii.gz etc. If filename is not provided, nii.hdr.file_name must contain a file name. Note that 'save' command always overwrites file in case of name conflict. If filename has no extension, '.nii' will be used as default. If the 4th input, force_3D, is true (default false), the output file will be 3D only, which means multiple volume data will be split into multiple files. This is the format SPM likes. You can use this command to convert 4D into 3D by 'load' a 4D file, then 'save' it as 3D files. The 3D file names will have 5-digit like '_00001' appended to indicate volume index. The NIfTI version can be set by nii_tool('default'). One can override the default version by specifying it in nii.hdr.version. To convert between versions, load a NIfTI file, specify new version, and save it. For example: nii = nii_tool('load', 'file_nifti1.nii'); % load version 1 file nii.hdr.version = 2; % force to NIfTI-2 nii_tool('save', nii, 'file_nifti2.nii'); % save as version 2 file Following example shows how to change data type of a nii file: nii = nii_tool('load', 'file_int16.nii'); % load int16 type file nii.img = single(nii.img); % change data type to single/float32 nii_tool('save', nii, 'file_float.nii'); % nii_tool will take care of hdr nii = nii_tool('cat3D', files); Concatenate SPM 3D files into a 4D dataset. The input 'files' can be cellstr with file names, or char with wildcards (* or ?). If it is cellstr, the volume order in the 4D data corresponds to those files. If wildcards are used, the volume order is based on alphabetical order of file names. Note that the files to be concatenated must have the same datatype, dim, voxel size, scaling slope and intercept, transformation matrix, etc. This is true if files are for the same series. Following example shows how to convert a series of 3D files into a 4D file: nii = nii_tool('cat3D', './data/fSubj2-0003*.nii'); % load files for series 3 nii_tool('save', nii, './data/fSubj2-0003_4D.nii'); % save as a 4D file oldStyle = nii_tool('RGBStyle', 'afni'); Set/query the method to save/load RGB or RGBA NIfTI file. The default method can be set by nii_tool('default', [version rgb_dim]), where rgb_dim can be 1, 3 or 4, as explained below. The default style is 'afni' style (or 1), which is defined by NIfTI standard, but is not well supported by fsl or mricron. If the second input is set to 'mricron' (or 3), nii_tool will save/load file using the old RGB fashion (dim 3 for RGB). This works for mricron at least till version 4 August 2014. If the second input is set to 'fsl' (or 4), nii_tool will save/load RGB or RGBA layer into 4th dimension (and the file is not encoded as RGB data, but as normal file). This violates the NIfTI rule, but it seems it is the only way, for now (till fsl version 5.0.8), to work for fslview. If no new style (second input) is provided, it means to query the current style (one of 'afni', 'mricron' and 'fsl'). Following shows how to convert between mricron style and fsl style: nii_tool('RGBStyle', 'mricron'); % later load/save uses mricron style nii = nii_tool('load', 'mricronStyle.nii'); % load dim3-RGB file nii_tool('RGBStyle', 'fsl'); % switch to fsl style nii_tool('save', nii, 'fslRGB.nii'); % fsl can read it as RGB Note that, if one wants to convert fsl style (non-RGB file by NIfTI standard) to other styles, an extra step is needed to change the RGB dim from 4th to 8th dim before 'save': nii = nii_tool('load', 'fslStyleFile.nii'); % no need to set 'RGBStyle' nii.img = permute(nii.img, [1:3 5:8 4]); % force it to be RGB data nii_tool('RGBStyle', 'mricron'); % switch to RGB mricron style nii_tool('save', nii, 'mricronRGB.nii'); % now mricron can read it as RGB Also note that the setting by nii_tool('RGBStyle') is effective only for current Matlab session. If one clears all, or starts a new Matlab session, the default style by nii_tool('default') will take effect. Attributes nInputs : -2 nOutputs : -1","title":"nii_tool"},{"location":"3_contributing/api_documentation/external/dicm2nii/nii_tool/#nii_tool","text":"Filetype: MATLAB\u00ae function Synopsis: Basic function to create, load and save NIfTI file. rst = nii_tool(cmd, para); To list all command, type nii_tool ? To get help information for each command, include '?' in cmd, for example: nii_tool init? nii_tool('init?') Here is a list of all command: nii_tool('default', 'version', 1, 'rgb_dim', 1); nii = nii_tool('init', img); nii_tool('save', nii, filename, force_3D); hdr = nii_tool('hdr', filename); img = nii_tool('img', filename_or_hdr); ext = nii_tool('ext', filename_or_hdr); nii = nii_tool('load', filename_or_hdr); nii = nii_tool('cat3D', filenames); nii_tool('RGBStyle', 'afni'); Detail for each command is described below. oldVal = nii_tool('default', 'version', 1, 'rgb_dim', 1); oldVal = nii_tool('default', struct('version', 1, 'rgb_dim', 1)); Set/query default NIfTI version and/or rgb_dim. To check the setting, run nii_tool('default') without other input. The input for 'default' command can be either a struct with fields of 'version' and/or 'rgb_dim', or parameter/value pairs. See nii_tool('RGBstyle') for meaning of rgb_dim. Note that the setting will be saved for future use. If one wants to change the settting temporarily, it is better to return the oldVal, and to restore it after done: oldVal = nii_tool('default', 'version', 2); % set version 2 as default % 'init' and 'save' NIfTI using above version nii_tool('default', oldVal); % restore default setting The default version setting affects 'init' command only. If you 'load' a NIfTI file, modify it, and then 'save' it, the version will be the same as the original file, unless it is changed explicitly (see help for 'save' command). All 'load' command ('load', 'hdr', 'ext', 'img') will read any version correctly, regardless of version setting. nii = nii_tool('init', img, RGB_dim); Initialize nii struct based on img, normally 3D or 4D array. Most fields in the returned nii.hdr contain default values, and need to be updated based on dicom or other information. Important ones include pixdim and s/qform_code and related parameters. The NIfTI datatype will depend on data type of img. Most Matlab data types are supported, including 8/16/32/64 bit signed and unsigned integers, single and double floating numbers. Single/double complex and logical array are also supported. nii_tool returns img with the same data type as it is stored, while numeric values in hdr are in double. This also applies to the struct returned by any nii_tool loading sub-functions. The optional third input is needed only if img contains RGB/RGBA data. It specifies which dimension in img is for RGB or RGBA. In other words, if a non-empty third input is provided, img will be interpreted as RGB or RGBA data. Another way to signify RGB/RGBA data is to permute color dim to 8th-dim of img (RGB_dim of 8 can be omitted then). Since NIfTI img can have up to 7 dim, nii_tool chooses to store RGB/RGBA in 8th dim. Although this looks lengthy (4th to 7th dim are often all ones), nii_tool can deal with up to 7 dim without causing any confusion. This is why the returned nii.img will always store RGB in 8th dim. hdr = nii_tool('hdr', filename); Return hdr struct of the provided NIfTI file. img = nii_tool('img', filename_or_hdr); Return image data in a NIfTI file. The second input can be NIfTI file name, or hdr struct returned by nii_tool('hdr', filename). ext = nii_tool('ext', filename_or_hdr); Return NIfTI extension in a NIfTI file. The second input can be NIfTI file name, or hdr struct returned by nii_tool('hdr', filename). The returned ext will have field 'edata_decoded' if 'ecode' is of known type, such as dicom (2), text (4 or 6) or Matlab (40). Here is an example to add data in myFile.mat as extension to nii struct, which can be from 'init' or 'load': fid = fopen('myFile.mat'); % open the MAT file myEdata = fread(fid, inf, '*uint8'); % load all bytes as byte column fclose(fid); len = int32(numel(myEdata)); % number of bytes in int32 myEdata = [typecast(len, 'uint8')'; myEdata]; % include len in myEdata nii.ext.ecode = 40; % 40 for Matlab extension nii.ext.edata = myEdata; % myEdata must be uint8 array nii_tool will take care of rest when you 'save' nii to a file. In case a NIfTI ext causes problem (for example, some FSL builds have problem in reading NIfTI img with ecode>30), one can remove the ext easily: nii = nii_tool('load', 'file_with_ext.nii'); % load the file with ext nii.ext = []; % or nii = rmfield(nii, 'ext'); % remove ext nii_tool('save', nii, 'file_without_ext.nii'); % save it nii = nii_tool('load', filename_or_hdr); Load NIfTI file into nii struct. The returned struct includes NIfTI 'hdr' and 'img', as well as 'ext' if the file contains NIfTI extension. nii_tool('save', nii, filename, force_3D); Save struct nii into filename. The format of the file is determined by the file extension, such as .img, .nii, .img.gz, .nii.gz etc. If filename is not provided, nii.hdr.file_name must contain a file name. Note that 'save' command always overwrites file in case of name conflict. If filename has no extension, '.nii' will be used as default. If the 4th input, force_3D, is true (default false), the output file will be 3D only, which means multiple volume data will be split into multiple files. This is the format SPM likes. You can use this command to convert 4D into 3D by 'load' a 4D file, then 'save' it as 3D files. The 3D file names will have 5-digit like '_00001' appended to indicate volume index. The NIfTI version can be set by nii_tool('default'). One can override the default version by specifying it in nii.hdr.version. To convert between versions, load a NIfTI file, specify new version, and save it. For example: nii = nii_tool('load', 'file_nifti1.nii'); % load version 1 file nii.hdr.version = 2; % force to NIfTI-2 nii_tool('save', nii, 'file_nifti2.nii'); % save as version 2 file Following example shows how to change data type of a nii file: nii = nii_tool('load', 'file_int16.nii'); % load int16 type file nii.img = single(nii.img); % change data type to single/float32 nii_tool('save', nii, 'file_float.nii'); % nii_tool will take care of hdr nii = nii_tool('cat3D', files); Concatenate SPM 3D files into a 4D dataset. The input 'files' can be cellstr with file names, or char with wildcards (* or ?). If it is cellstr, the volume order in the 4D data corresponds to those files. If wildcards are used, the volume order is based on alphabetical order of file names. Note that the files to be concatenated must have the same datatype, dim, voxel size, scaling slope and intercept, transformation matrix, etc. This is true if files are for the same series. Following example shows how to convert a series of 3D files into a 4D file: nii = nii_tool('cat3D', './data/fSubj2-0003*.nii'); % load files for series 3 nii_tool('save', nii, './data/fSubj2-0003_4D.nii'); % save as a 4D file oldStyle = nii_tool('RGBStyle', 'afni'); Set/query the method to save/load RGB or RGBA NIfTI file. The default method can be set by nii_tool('default', [version rgb_dim]), where rgb_dim can be 1, 3 or 4, as explained below. The default style is 'afni' style (or 1), which is defined by NIfTI standard, but is not well supported by fsl or mricron. If the second input is set to 'mricron' (or 3), nii_tool will save/load file using the old RGB fashion (dim 3 for RGB). This works for mricron at least till version 4 August 2014. If the second input is set to 'fsl' (or 4), nii_tool will save/load RGB or RGBA layer into 4th dimension (and the file is not encoded as RGB data, but as normal file). This violates the NIfTI rule, but it seems it is the only way, for now (till fsl version 5.0.8), to work for fslview. If no new style (second input) is provided, it means to query the current style (one of 'afni', 'mricron' and 'fsl'). Following shows how to convert between mricron style and fsl style: nii_tool('RGBStyle', 'mricron'); % later load/save uses mricron style nii = nii_tool('load', 'mricronStyle.nii'); % load dim3-RGB file nii_tool('RGBStyle', 'fsl'); % switch to fsl style nii_tool('save', nii, 'fslRGB.nii'); % fsl can read it as RGB Note that, if one wants to convert fsl style (non-RGB file by NIfTI standard) to other styles, an extra step is needed to change the RGB dim from 4th to 8th dim before 'save': nii = nii_tool('load', 'fslStyleFile.nii'); % no need to set 'RGBStyle' nii.img = permute(nii.img, [1:3 5:8 4]); % force it to be RGB data nii_tool('RGBStyle', 'mricron'); % switch to RGB mricron style nii_tool('save', nii, 'mricronRGB.nii'); % now mricron can read it as RGB Also note that the setting by nii_tool('RGBStyle') is effective only for current Matlab session. If one clears all, or starts a new Matlab session, the default style by nii_tool('default') will take effect.","title":"nii_tool"},{"location":"3_contributing/api_documentation/external/dicm2nii/nii_tool/#attributes","text":"nInputs : -2 nOutputs : -1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/dicm2nii/rename_dicm/","text":"rename_dicm Filetype: MATLAB\u00ae function Synopsis: Rename dicom files so the names are human readable. rename_dicm(files, outputNameFormat) The first input is the dicom file(s) or a folder containing dicom files. The second input is the format for the result file names. Support format include: 1: Protocol_#####.dcm, such as run1_00001.dcm. If there is MoCo series, or users did not change run names, there will be name conflict. 2: Subj-Ser#-Acq#-Inst#.dcm, such as 2334ZL-0004-0001-00001.dcm. This is the BrainVoyager format. It won't have any name confict, but it is long and less descriptive. Note that BrainVoyager itself has problem to distinguish the two series of images for Siemens fieldmap, while this code can avoid this problem. 3: Protocol_Se#_Inst#, such as run1_004_00001.dcm. This gives short names, while it is descriptive and there is no name conflict most of time. 4: Subj_Protocol_In#, such as 2334ZL_run1_00001.dcm. This is useful if files for different subjects are in the same folder. 5: Protocol_Ser#-Acq#-Inst#, such as run1_003_001_00001.dcm. This ensures no name conflict, and is the default. Whenever there is name confict, you will see red warning and the latter files won't be renamed. If the first input is not provided or empty, you will be asked to pick up a folder. See also DICM_HDR SORT_DICM Attributes nInputs : 2 nOutputs : 0","title":"rename_dicm"},{"location":"3_contributing/api_documentation/external/dicm2nii/rename_dicm/#rename_dicm","text":"Filetype: MATLAB\u00ae function Synopsis: Rename dicom files so the names are human readable. rename_dicm(files, outputNameFormat) The first input is the dicom file(s) or a folder containing dicom files. The second input is the format for the result file names. Support format include: 1: Protocol_#####.dcm, such as run1_00001.dcm. If there is MoCo series, or users did not change run names, there will be name conflict. 2: Subj-Ser#-Acq#-Inst#.dcm, such as 2334ZL-0004-0001-00001.dcm. This is the BrainVoyager format. It won't have any name confict, but it is long and less descriptive. Note that BrainVoyager itself has problem to distinguish the two series of images for Siemens fieldmap, while this code can avoid this problem. 3: Protocol_Se#_Inst#, such as run1_004_00001.dcm. This gives short names, while it is descriptive and there is no name conflict most of time. 4: Subj_Protocol_In#, such as 2334ZL_run1_00001.dcm. This is useful if files for different subjects are in the same folder. 5: Protocol_Ser#-Acq#-Inst#, such as run1_003_001_00001.dcm. This ensures no name conflict, and is the default. Whenever there is name confict, you will see red warning and the latter files won't be renamed. If the first input is not provided or empty, you will be asked to pick up a folder. See also DICM_HDR SORT_DICM","title":"rename_dicm"},{"location":"3_contributing/api_documentation/external/dicm2nii/rename_dicm/#attributes","text":"nInputs : 2 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/external/dicm2nii/sort_dicm/","text":"sort_dicm Filetype: MATLAB\u00ae function Synopsis: Sort dicom files for different subjects into subject folders. subjects = SORT_DICM(dicmFolder); The optional input is the top folder containing dicom file and/or subfodlers which may contain dicom files and/or subfolders. Optionally, it returns subfolder names for the dicom files. It is suggested not to mix dicom files for different subjects into a folder. However if, for any reason, a folder contains dicom files for multiple subjects, this function will create a subfolder under the dicom folder for each subject, and move corresponding files into each subject folder. If a subject has more than one studies, each study will have a subfolder. See also DICM2NII, DICM_HDR, RENAME_DICM Attributes nInputs : 1 nOutputs : -1","title":"sort_dicm"},{"location":"3_contributing/api_documentation/external/dicm2nii/sort_dicm/#sort_dicm","text":"Filetype: MATLAB\u00ae function Synopsis: Sort dicom files for different subjects into subject folders. subjects = SORT_DICM(dicmFolder); The optional input is the top folder containing dicom file and/or subfodlers which may contain dicom files and/or subfolders. Optionally, it returns subfolder names for the dicom files. It is suggested not to mix dicom files for different subjects into a folder. However if, for any reason, a folder contains dicom files for multiple subjects, this function will create a subfolder under the dicom folder for each subject, and move corresponding files into each subject folder. If a subject has more than one studies, each study will have a subfolder. See also DICM2NII, DICM_HDR, RENAME_DICM","title":"sort_dicm"},{"location":"3_contributing/api_documentation/external/dicm2nii/sort_dicm/#attributes","text":"nInputs : 1 nOutputs : -1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/c_str/","text":"c_str Filetype: MATLAB\u00ae function Synopsis: eja function to read C-style null-terminated strings (strips everything past the first null) Attributes nInputs : 1 nOutputs : 1","title":"c_str"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/c_str/#c_str","text":"Filetype: MATLAB\u00ae function Synopsis: eja function to read C-style null-terminated strings (strips everything past the first null)","title":"c_str"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/c_str/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/mread/","text":"mread Filetype: MATLAB\u00ae function Synopsis: mread: eja (almost) drop-in replacement for fread for reading uint8 arrays dependencies: c_str.m Attributes nInputs : 4 nOutputs : 2","title":"mread"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/mread/#mread","text":"Filetype: MATLAB\u00ae function Synopsis: mread: eja (almost) drop-in replacement for fread for reading uint8 arrays dependencies: c_str.m","title":"mread"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/mread/#attributes","text":"nInputs : 4 nOutputs : 2","title":"Attributes"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/parse_mrprot/","text":"parse_mrprot Filetype: MATLAB\u00ae function Synopsis: parse mrprot (text) structure E. Auerbach, CMRR, Univ. of Minnesota, 2013 Attributes nInputs : 1 nOutputs : 1","title":"parse_mrprot"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/parse_mrprot/#parse_mrprot","text":"Filetype: MATLAB\u00ae function Synopsis: parse mrprot (text) structure E. Auerbach, CMRR, Univ. of Minnesota, 2013","title":"parse_mrprot"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/parse_mrprot/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/parse_siemens_shadow/","text":"parse_siemens_shadow Filetype: MATLAB\u00ae function Synopsis: [img, ser, mrprot] = parse_siemens_shadow(dcm, debugOutput=false) function to parse siemens numaris 4 shadow data returns three structs with image, series header, mrprot info does not work with arrayed dcm() dependencies: parse_mrprot.m c_str.m mread.m E. Auerbach, CMRR, Univ. of Minnesota, 2013 Update::20180409::ryan.topfer@polymtl.ca : Optional fast output for nargout == 1 OR 2, since parsing mrprot apparently takes an order of magnitude longer (~1s per dicom file). Only applies to dicom images* (not SPEC) Attributes nInputs : -1 nOutputs : 3","title":"parse_siemens_shadow"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/parse_siemens_shadow/#parse_siemens_shadow","text":"Filetype: MATLAB\u00ae function Synopsis: [img, ser, mrprot] = parse_siemens_shadow(dcm, debugOutput=false) function to parse siemens numaris 4 shadow data returns three structs with image, series header, mrprot info does not work with arrayed dcm() dependencies: parse_mrprot.m c_str.m mread.m E. Auerbach, CMRR, Univ. of Minnesota, 2013 Update::20180409::ryan.topfer@polymtl.ca : Optional fast output for nargout == 1 OR 2, since parsing mrprot apparently takes an order of magnitude longer (~1s per dicom file). Only applies to dicom images* (not SPEC)","title":"parse_siemens_shadow"},{"location":"3_contributing/api_documentation/external/parse-dicom/src/matlab/parse_siemens_shadow/#attributes","text":"nInputs : -1 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/external/stoploop/stoploop/","text":"stoploop Filetype: MATLAB\u00ae function Synopsis: - creates stop button to have a user interrupt a loop FS = STOPLOOP creates a message box window and returns a structure FS that holds two functions, called FS.Stop and FS.Clear. The function FS.Stop() will return true, if the OK button has been clicked (or the message box has been removed), so that a loop can be interrupted. The function FS.Clear() can be used to remove the message box, if a loop has ended without user interruption. FS = STOPLOOP(STR) uses the string STR to display instead of the default 'Stop the Loop'. Example: tic ; % We will measure elapsed time in a loop % Set up the stop box: FS = stoploop({'Stop me before', '5 seconds have elapsed'}) ; % Display elapsed time fprintf('\\nSTOPLOOP: elapsed time (s): %5.2f\\n',toc) % start the loop while(~FS.Stop() && toc < 5), % Check if the loop has to be stopped fprintf('%c',repmat(8,6,1)) ; % clear up previous time fprintf('%5.2f\\n',toc) ; % display elapsed time end FS.Clear() ; % Clear up the box clear FS ; % this structure has no use anymore Notes: - The function call F.Stop() issues a drawnow command. - The function call F.Clear() does nothing when the message box already has been cleared. See also MSGBOX, KEYBOARD, DBSTOP, WHILE, FOR GETKEYNOW, GETKEYWAIT, GETKEY (on the File Exchange) Folders named stoploop external/stoploop Attributes nInputs : 1 nOutputs : 1","title":"stoploop"},{"location":"3_contributing/api_documentation/external/stoploop/stoploop/#stoploop","text":"Filetype: MATLAB\u00ae function Synopsis: - creates stop button to have a user interrupt a loop FS = STOPLOOP creates a message box window and returns a structure FS that holds two functions, called FS.Stop and FS.Clear. The function FS.Stop() will return true, if the OK button has been clicked (or the message box has been removed), so that a loop can be interrupted. The function FS.Clear() can be used to remove the message box, if a loop has ended without user interruption. FS = STOPLOOP(STR) uses the string STR to display instead of the default 'Stop the Loop'. Example: tic ; % We will measure elapsed time in a loop % Set up the stop box: FS = stoploop({'Stop me before', '5 seconds have elapsed'}) ; % Display elapsed time fprintf('\\nSTOPLOOP: elapsed time (s): %5.2f\\n',toc) % start the loop while(~FS.Stop() && toc < 5), % Check if the loop has to be stopped fprintf('%c',repmat(8,6,1)) ; % clear up previous time fprintf('%5.2f\\n',toc) ; % display elapsed time end FS.Clear() ; % Clear up the box clear FS ; % this structure has no use anymore Notes: - The function call F.Stop() issues a drawnow command. - The function call F.Clear() does nothing when the message box already has been cleared. See also MSGBOX, KEYBOARD, DBSTOP, WHILE, FOR GETKEYNOW, GETKEYWAIT, GETKEY (on the File Exchange) Folders named stoploop external/stoploop","title":"stoploop"},{"location":"3_contributing/api_documentation/external/stoploop/stoploop/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/external/sunwrap/sunwrap/","text":"sunwrap Filetype: MATLAB\u00ae function Synopsis: Magnitude-sorted List, Multi-clustering Phase Unwrapping Algorithm sunwrap(complexImage, relativeMagnitudeThreshold) This file contains the reference implementation of the magnitude-sorted list, multi-clustering phase unwrapping algorithm published in the journal 'Magnetic Resonance in Medicine' by Florian Maier et al. in 2014. The algorithm was implemented to unwrap the phase of magnetic resonance images used for temperature imaging. The input 'complexImage' needs to be an 1D, 2D, or 3D complex matrix. Additionally, the variable 'relativeMagnitudeThreshold' can be defined in the interval [0,1]. The algorithm calculcates the actual threshold based on the maximum magnitude value in the image and this ratio. The algorithm returns a double matrix containing the unwrapped phase values in rad. This algorithm was designed and implemented by Florian Maier. Copyright (c) 2014 The University of Texas M. D. Anderson Cancer Center Folders named sunwrap external/sunwrap Attributes nInputs : 2 nOutputs : 1","title":"sunwrap"},{"location":"3_contributing/api_documentation/external/sunwrap/sunwrap/#sunwrap","text":"Filetype: MATLAB\u00ae function Synopsis: Magnitude-sorted List, Multi-clustering Phase Unwrapping Algorithm sunwrap(complexImage, relativeMagnitudeThreshold) This file contains the reference implementation of the magnitude-sorted list, multi-clustering phase unwrapping algorithm published in the journal 'Magnetic Resonance in Medicine' by Florian Maier et al. in 2014. The algorithm was implemented to unwrap the phase of magnetic resonance images used for temperature imaging. The input 'complexImage' needs to be an 1D, 2D, or 3D complex matrix. Additionally, the variable 'relativeMagnitudeThreshold' can be defined in the interval [0,1]. The algorithm calculcates the actual threshold based on the maximum magnitude value in the image and this ratio. The algorithm returns a double matrix containing the unwrapped phase values in rad. This algorithm was designed and implemented by Florian Maier. Copyright (c) 2014 The University of Texas M. D. Anderson Cancer Center Folders named sunwrap external/sunwrap","title":"sunwrap"},{"location":"3_contributing/api_documentation/external/sunwrap/sunwrap/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/assignifempty/","text":"assignifempty Filetype: MATLAB\u00ae function Synopsis: Assigns values to object or struct fields when empty [StructObjOut] = ASSIGNIFEMPTY( StructObjIn, fieldName, x ) [StructObjOut] = ASSIGNIFEMPTY( StructObjIn, Assignments ) ASSIGNIFEMPTY( StructObjIn, fieldName, x ) Calls MYISFIELDFILLED to check if the data struct or object StructObjIn has a non-empty field called fieldName and returns StructObjOut: a copy of the input StructObjIn, wherein fieldName is assigned the value of x if and only if the entry was non-existent or empty. [StructObjOut] = ASSIGNIFEMPTY( StructObjIn, Assignments ) Assignments is a struct or object possessing all the fields/properties that are to be assigned (copied) to StructObjOut. This is equivalent to making repeated calls to ASSIGNIFEMPTY() with multiple fieldNames and x-values. e.g. StructObjIn.w1 = 'Hello' ; Assignments.w2 = 'World' ; Assignments.w3 = '!' ; StructObjOut = assignifempty( StructObjIn, Assignments ) ; display( StructObjOut ) ; StructObjOut = w1: 'Hello' w2: 'World' w3: '!' Attributes nInputs : -2 nOutputs : 1","title":"assignifempty"},{"location":"3_contributing/api_documentation/misc/assignifempty/#assignifempty","text":"Filetype: MATLAB\u00ae function Synopsis: Assigns values to object or struct fields when empty [StructObjOut] = ASSIGNIFEMPTY( StructObjIn, fieldName, x ) [StructObjOut] = ASSIGNIFEMPTY( StructObjIn, Assignments ) ASSIGNIFEMPTY( StructObjIn, fieldName, x ) Calls MYISFIELDFILLED to check if the data struct or object StructObjIn has a non-empty field called fieldName and returns StructObjOut: a copy of the input StructObjIn, wherein fieldName is assigned the value of x if and only if the entry was non-existent or empty. [StructObjOut] = ASSIGNIFEMPTY( StructObjIn, Assignments ) Assignments is a struct or object possessing all the fields/properties that are to be assigned (copied) to StructObjOut. This is equivalent to making repeated calls to ASSIGNIFEMPTY() with multiple fieldNames and x-values. e.g. StructObjIn.w1 = 'Hello' ; Assignments.w2 = 'World' ; Assignments.w3 = '!' ; StructObjOut = assignifempty( StructObjIn, Assignments ) ; display( StructObjOut ) ; StructObjOut = w1: 'Hello' w2: 'World' w3: '!'","title":"assignifempty"},{"location":"3_contributing/api_documentation/misc/assignifempty/#attributes","text":"nInputs : -2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/bet/","text":"bet Filetype: MATLAB\u00ae function Synopsis: - brain extraction tool calls on BET of FSL package Syntax BET(Mag) BET(Mag, Options) Description (see BET man page) Mask = BET(Mag) returns binary brain mask based on (single-echo) 3D magnitude input Mask, f = BET(Mag, Options) also returns additional fractional intensity threshold Mask, f, skull = BET(Mag, Options) also returns binary mask of skull (might not be useful) The following Option-fields are supported voxelSize default: [1 1 1] (isotropic) f \"fractional intensity threshold\" default: 0.5 2013 topfer@ualberta.ca Attributes nInputs : 2 nOutputs : 3","title":"bet"},{"location":"3_contributing/api_documentation/misc/bet/#bet","text":"Filetype: MATLAB\u00ae function Synopsis: - brain extraction tool calls on BET of FSL package Syntax BET(Mag) BET(Mag, Options) Description (see BET man page) Mask = BET(Mag) returns binary brain mask based on (single-echo) 3D magnitude input Mask, f = BET(Mag, Options) also returns additional fractional intensity threshold Mask, f, skull = BET(Mag, Options) also returns binary mask of skull (might not be useful) The following Option-fields are supported voxelSize default: [1 1 1] (isotropic) f \"fractional intensity threshold\" default: 0.5 2013 topfer@ualberta.ca","title":"bet"},{"location":"3_contributing/api_documentation/misc/bet/#attributes","text":"nInputs : 2 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/cgls/","text":"cgls Filetype: MATLAB\u00ae function Synopsis: Conjugate gradient for least-squares problems Ax = b ...... TODO documentation fix self-adjoint conditional Attributes nInputs : 4 nOutputs : 1","title":"cgls"},{"location":"3_contributing/api_documentation/misc/cgls/#cgls","text":"Filetype: MATLAB\u00ae function Synopsis: Conjugate gradient for least-squares problems Ax = b ...... TODO documentation fix self-adjoint conditional","title":"cgls"},{"location":"3_contributing/api_documentation/misc/cgls/#attributes","text":"nInputs : 4 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/createdifferenceoperators/","text":"createdifferenceoperators Filetype: MATLAB\u00ae function Synopsis: CREATEDIFFERENCEOPERATORS Returns sparse (\"central difference\") matrices Dx, Dy, & Dz that act as partial differential operators in row, column, and slice directions respectively. Syntax [Dx, Dy, Dz] = CREATEDIFFERENCEOPERATORS( gridSize, gridSpacing, order ) Input gridSize Actual 3D size of the vector the differential operators will ultimately be applied to (i.e. gridSize = [nRows nColumns nSlices] ) gridSpacing distance b/tw lattice points [dx dy dz] order == 1 1st order fwd differences e.g. Dx*b + Dy*b + Dz*b = gradient of b == 2 2nd order central differences e.g. Dx*b + Dy*b + Dz*b = Laplacian of b 2014 topfer@ualberta.ca Attributes nInputs : 3 nOutputs : 3","title":"createdifferenceoperators"},{"location":"3_contributing/api_documentation/misc/createdifferenceoperators/#createdifferenceoperators","text":"Filetype: MATLAB\u00ae function Synopsis: CREATEDIFFERENCEOPERATORS Returns sparse (\"central difference\") matrices Dx, Dy, & Dz that act as partial differential operators in row, column, and slice directions respectively. Syntax [Dx, Dy, Dz] = CREATEDIFFERENCEOPERATORS( gridSize, gridSpacing, order ) Input gridSize Actual 3D size of the vector the differential operators will ultimately be applied to (i.e. gridSize = [nRows nColumns nSlices] ) gridSpacing distance b/tw lattice points [dx dy dz] order == 1 1st order fwd differences e.g. Dx*b + Dy*b + Dz*b = gradient of b == 2 2nd order central differences e.g. Dx*b + Dy*b + Dz*b = Laplacian of b 2014 topfer@ualberta.ca","title":"createdifferenceoperators"},{"location":"3_contributing/api_documentation/misc/createdifferenceoperators/#attributes","text":"nInputs : 3 nOutputs : 3","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/createellipsoid/","text":"createellipsoid Filetype: MATLAB\u00ae function Synopsis: CREATEELLIPSOID Creates ellipsoidal region (cells == 1) within an otherwise 0 array Syntax CREATEELLIPSOID(gridDimensions, radii) CREATEELLIPSOID(gridDimensions, radii, offset) Description ellipsoid = CREATEELLIPSOID(gridDimensions, radii) returns an array of size gridDimensions with an ellipsoid defined by radii at the center ellipsoid =CREATEELLIPSOID(gridDimensions, radii, offset) center of the ellipsoid is offset all inputs may be single scalars or 3 element vectors (a scalar will treat every direction the same: scalarValue *[ 1 1 1 ] ) gridDimensions should consist of odd numbers Attributes nInputs : 3 nOutputs : 1","title":"createellipsoid"},{"location":"3_contributing/api_documentation/misc/createellipsoid/#createellipsoid","text":"Filetype: MATLAB\u00ae function Synopsis: CREATEELLIPSOID Creates ellipsoidal region (cells == 1) within an otherwise 0 array Syntax CREATEELLIPSOID(gridDimensions, radii) CREATEELLIPSOID(gridDimensions, radii, offset) Description ellipsoid = CREATEELLIPSOID(gridDimensions, radii) returns an array of size gridDimensions with an ellipsoid defined by radii at the center ellipsoid =CREATEELLIPSOID(gridDimensions, radii, offset) center of the ellipsoid is offset all inputs may be single scalars or 3 element vectors (a scalar will treat every direction the same: scalarValue *[ 1 1 1 ] ) gridDimensions should consist of odd numbers","title":"createellipsoid"},{"location":"3_contributing/api_documentation/misc/createellipsoid/#attributes","text":"nInputs : 3 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/croparray/","text":"croparray Filetype: MATLAB\u00ae function Synopsis: returns cropped/central portion of 3D array Syntax B = croparray( A, desiredSize ) returns central portion of 3D array A: data outside 'desiredSize' is trimmed away. see also PADARRAY( ) ========================================================================= Updated::20170210::ryan.topfer@polymtl.ca ========================================================================= Attributes nInputs : 2 nOutputs : 1","title":"croparray"},{"location":"3_contributing/api_documentation/misc/croparray/#croparray","text":"Filetype: MATLAB\u00ae function Synopsis: returns cropped/central portion of 3D array Syntax B = croparray( A, desiredSize ) returns central portion of 3D array A: data outside 'desiredSize' is trimmed away. see also PADARRAY( ) ========================================================================= Updated::20170210::ryan.topfer@polymtl.ca =========================================================================","title":"croparray"},{"location":"3_contributing/api_documentation/misc/croparray/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/dilater/","text":"dilater Filetype: MATLAB\u00ae function Synopsis: dilates a 3D binary mask by 'R' DILATER convolves binary input image ROI with an ellipsoid defined by radius (or radii) R to return an expanded ROI. Syntax dilatedRoi = DILATER( roi, R) Description dilatedRoi = RILATER(ROI,R) returns ROI dilated by R. If R is a single scalar, every dimension is dilated by R. If R is a 3-component vector [Rx Ry Rz], each dimension is then dilated by its corresponding R value. see also SHAVER( ) ========================================================================= Updated::20170210::ryan.topfer@polymtl.ca ========================================================================= Attributes nInputs : 2 nOutputs : 1","title":"dilater"},{"location":"3_contributing/api_documentation/misc/dilater/#dilater","text":"Filetype: MATLAB\u00ae function Synopsis: dilates a 3D binary mask by 'R' DILATER convolves binary input image ROI with an ellipsoid defined by radius (or radii) R to return an expanded ROI. Syntax dilatedRoi = DILATER( roi, R) Description dilatedRoi = RILATER(ROI,R) returns ROI dilated by R. If R is a single scalar, every dimension is dilated by R. If R is a 3-component vector [Rx Ry Rz], each dimension is then dilated by its corresponding R value. see also SHAVER( ) ========================================================================= Updated::20170210::ryan.topfer@polymtl.ca =========================================================================","title":"dilater"},{"location":"3_contributing/api_documentation/misc/dilater/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/fftc/","text":"fftc Filetype: MATLAB\u00ae function Synopsis: n-d fft for centered data Syntax F = FFTC( A ) Returns FFT of array A after applying the correct fftshifts Attributes nInputs : 1 nOutputs : 1","title":"fftc"},{"location":"3_contributing/api_documentation/misc/fftc/#fftc","text":"Filetype: MATLAB\u00ae function Synopsis: n-d fft for centered data Syntax F = FFTC( A ) Returns FFT of array A after applying the correct fftshifts","title":"fftc"},{"location":"3_contributing/api_documentation/misc/fftc/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/fslview/","text":"fslview Filetype: MATLAB\u00ae function Synopsis: view 3d array in fslview Syntax fslview( img ) fslview( img1, Parameters ) fslview( img1, Parameters, img2, img3, ... ) Description creates temporary nifti conversion of img and passes it to fslview Parameters (object) to fslview input (see manual 'man fslview') The following Parameters fields are supported .voxelSize (3-component vector) default: [1 1 1] ; .l (color map: Full list avaible in FSLView GUI) (e.g. one of: Greyscale, Red-Yellow, Blue-Lightblue, Red, Green, Blue, Yellow, Pink, Hot, Cool, Copper, ...) default: Parameters.l = 'Greyscale' .b (brightness) if scalar: brightness = [-Abs|.b|,+Abs|.b|] if 2 component vector: brightness = [.b(1), .b(2)] default: brightness = [min(img), max(img)] ========================================================================= Ryan Topfer 2012 topfer@ualberta.ca Attributes nInputs : -3 nOutputs : 0","title":"fslview"},{"location":"3_contributing/api_documentation/misc/fslview/#fslview","text":"Filetype: MATLAB\u00ae function Synopsis: view 3d array in fslview Syntax fslview( img ) fslview( img1, Parameters ) fslview( img1, Parameters, img2, img3, ... ) Description creates temporary nifti conversion of img and passes it to fslview Parameters (object) to fslview input (see manual 'man fslview') The following Parameters fields are supported .voxelSize (3-component vector) default: [1 1 1] ; .l (color map: Full list avaible in FSLView GUI) (e.g. one of: Greyscale, Red-Yellow, Blue-Lightblue, Red, Green, Blue, Yellow, Pink, Hot, Cool, Copper, ...) default: Parameters.l = 'Greyscale' .b (brightness) if scalar: brightness = [-Abs|.b|,+Abs|.b|] if 2 component vector: brightness = [.b(1), .b(2)] default: brightness = [min(img), max(img)] ========================================================================= Ryan Topfer 2012 topfer@ualberta.ca","title":"fslview"},{"location":"3_contributing/api_documentation/misc/fslview/#attributes","text":"nInputs : -3 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/getfilecreationtime/","text":"getfilecreationtime Filetype: MATLAB\u00ae function Synopsis: Query system to return file creation time-stamp creationTime = GETFILECREATIONTIME( filename ) Returned creationTime is a string formated as : yyyymmddHHMMSS NOTE: Implementation only supports UNIX/LINUX TODO: Add support for other operating systems! Attributes nInputs : 1 nOutputs : 1","title":"getfilecreationtime"},{"location":"3_contributing/api_documentation/misc/getfilecreationtime/#getfilecreationtime","text":"Filetype: MATLAB\u00ae function Synopsis: Query system to return file creation time-stamp creationTime = GETFILECREATIONTIME( filename ) Returned creationTime is a string formated as : yyyymmddHHMMSS NOTE: Implementation only supports UNIX/LINUX TODO: Add support for other operating systems!","title":"getfilecreationtime"},{"location":"3_contributing/api_documentation/misc/getfilecreationtime/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/ifftc/","text":"ifftc Filetype: MATLAB\u00ae function Synopsis: inverse FFT for centered data Syntax A = IFFTS( F ) Returns IFFT of array F after applying the correct ifftshifts Attributes nInputs : 1 nOutputs : 1","title":"ifftc"},{"location":"3_contributing/api_documentation/misc/ifftc/#ifftc","text":"Filetype: MATLAB\u00ae function Synopsis: inverse FFT for centered data Syntax A = IFFTS( F ) Returns IFFT of array F after applying the correct ifftshifts","title":"ifftc"},{"location":"3_contributing/api_documentation/misc/ifftc/#attributes","text":"nInputs : 1 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/isOctave/","text":"isOctave Filetype: MATLAB\u00ae function Synopsis: https://stackoverflow.com/a/9838357 https://stackoverflow.com/a/9838357 Attributes nInputs : 0 nOutputs : 1","title":"isOctave"},{"location":"3_contributing/api_documentation/misc/isOctave/#isoctave","text":"Filetype: MATLAB\u00ae function Synopsis: https://stackoverflow.com/a/9838357 https://stackoverflow.com/a/9838357","title":"isOctave"},{"location":"3_contributing/api_documentation/misc/isOctave/#attributes","text":"nInputs : 0 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/lapunwrap/","text":"lapunwrap Filetype: MATLAB\u00ae function Synopsis: phase unwrapping using Laplacian operator LAPUNWRAP returns unwrapped phase array object Syntax LAPUNWRAP(rawPhase) LAPUNWRAP(rawPhase,Options) Description UnwrappedPhaseObj = LAPUNWRAP(rawPhase,[Options]) returns object with identical fields to the input data object. The following Option-fields are supported voxelSize default: [1 1 1] isotropic Based on Schofield & Zhu \"Fast phase unwrapping algorithm for interferometric applications\" Optics Letters 2003 Attributes nInputs : 2 nOutputs : 1","title":"lapunwrap"},{"location":"3_contributing/api_documentation/misc/lapunwrap/#lapunwrap","text":"Filetype: MATLAB\u00ae function Synopsis: phase unwrapping using Laplacian operator LAPUNWRAP returns unwrapped phase array object Syntax LAPUNWRAP(rawPhase) LAPUNWRAP(rawPhase,Options) Description UnwrappedPhaseObj = LAPUNWRAP(rawPhase,[Options]) returns object with identical fields to the input data object. The following Option-fields are supported voxelSize default: [1 1 1] isotropic Based on Schofield & Zhu \"Fast phase unwrapping algorithm for interferometric applications\" Optics Letters 2003","title":"lapunwrap"},{"location":"3_contributing/api_documentation/misc/lapunwrap/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/makekspace/","text":"makekspace Filetype: MATLAB\u00ae function Synopsis: produces 3D array of k-space coordinates MAKEKSPACE returns K(kx,ky,kz) Syntax MAKEKSPACE(gridDimensionVector) MAKEKSPACE(gridDimensionVector,Options) Description K = MAKEKSPACE(gridDimensionVector,Options) returns k-space coordinate array The following Option-fields are supported .voxelSize k-space step size becomes dK = 2pi*(Options.gridDimensionVector .* voxelSize)^-1 default = [1 1 1] Attributes nInputs : 2 nOutputs : 1","title":"makekspace"},{"location":"3_contributing/api_documentation/misc/makekspace/#makekspace","text":"Filetype: MATLAB\u00ae function Synopsis: produces 3D array of k-space coordinates MAKEKSPACE returns K(kx,ky,kz) Syntax MAKEKSPACE(gridDimensionVector) MAKEKSPACE(gridDimensionVector,Options) Description K = MAKEKSPACE(gridDimensionVector,Options) returns k-space coordinate array The following Option-fields are supported .voxelSize k-space step size becomes dK = 2pi*(Options.gridDimensionVector .* voxelSize)^-1 default = [1 1 1]","title":"makekspace"},{"location":"3_contributing/api_documentation/misc/makekspace/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/makeodd/","text":"makeodd Filetype: MATLAB\u00ae function Synopsis: returns dataArray with odd dimensions Syntax A = MAKEODD(A) A = MAKEODD(A, option) A = MAKEODD(A, option, gridDimensionVector) ; returns array A with odd dimensions. option if 'isPadding', even dimensions are padded with a slice of zeros (default: even dimensions have a slice shaved off) if 'isUndoing', odd dimensions are padded with a slice of zeros (default: make ODD!) gridDimensionVector specifies final array size (default: minimum change from original size such that 'option' is satisfied) Attributes nInputs : 3 nOutputs : 1","title":"makeodd"},{"location":"3_contributing/api_documentation/misc/makeodd/#makeodd","text":"Filetype: MATLAB\u00ae function Synopsis: returns dataArray with odd dimensions Syntax A = MAKEODD(A) A = MAKEODD(A, option) A = MAKEODD(A, option, gridDimensionVector) ; returns array A with odd dimensions. option if 'isPadding', even dimensions are padded with a slice of zeros (default: even dimensions have a slice shaved off) if 'isUndoing', odd dimensions are padded with a slice of zeros (default: make ODD!) gridDimensionVector specifies final array size (default: minimum change from original size such that 'option' is satisfied)","title":"makeodd"},{"location":"3_contributing/api_documentation/misc/makeodd/#attributes","text":"nInputs : 3 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/myisfieldfilled/","text":"myisfieldfilled Filetype: MATLAB\u00ae function Synopsis: Check if field of struct or object exists AND is non-empty isFieldFilled = MYISFIELDFILLED( StructObjIn, fieldName ) StructObjIn is a structure, object, or an array of structures to search fieldName is the name of the field for which the function searches -> Returns TRUE if fieldName exists AND is the field is filled (non-empty) -> Returns FALSE otherwise MYISFIELDFILLED wraps to MYISFIELD( ) and is equivalent to isFieldFilled = myisfield( StructObjIn, fieldName ) && ~isempty( StructObjIn(1).(fieldName) ) See also: MYISFIELD, ASSIGNIFEMPTY Attributes nInputs : 2 nOutputs : 1","title":"myisfieldfilled"},{"location":"3_contributing/api_documentation/misc/myisfieldfilled/#myisfieldfilled","text":"Filetype: MATLAB\u00ae function Synopsis: Check if field of struct or object exists AND is non-empty isFieldFilled = MYISFIELDFILLED( StructObjIn, fieldName ) StructObjIn is a structure, object, or an array of structures to search fieldName is the name of the field for which the function searches -> Returns TRUE if fieldName exists AND is the field is filled (non-empty) -> Returns FALSE otherwise MYISFIELDFILLED wraps to MYISFIELD( ) and is equivalent to isFieldFilled = myisfield( StructObjIn, fieldName ) && ~isempty( StructObjIn(1).(fieldName) ) See also: MYISFIELD, ASSIGNIFEMPTY","title":"myisfieldfilled"},{"location":"3_contributing/api_documentation/misc/myisfieldfilled/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/nii/","text":"nii Filetype: MATLAB\u00ae function Synopsis: NII NII Syntax NII(A) NII(A,Options) ....................... Description NII calls the make_nii() and save_nii() functions of the NifTI toolbox. However the toolbox seems to reverse read/phase-encode (column/row) order compared with that of the original image (DICOM). NII then first swaps the rows & columns such that there is no apparent rotation after writing to file with save_nii(). ....................... Input A data array being saved as nifti Options object with possible fields: .voxelSize (default: [1 1 1]) .filename (without or without .nii extension) (default: './tmp.nii') TODO DOCUMENTATION Attributes nInputs : 2 nOutputs : 1","title":"nii"},{"location":"3_contributing/api_documentation/misc/nii/#nii","text":"Filetype: MATLAB\u00ae function Synopsis: NII NII Syntax NII(A) NII(A,Options) ....................... Description NII calls the make_nii() and save_nii() functions of the NifTI toolbox. However the toolbox seems to reverse read/phase-encode (column/row) order compared with that of the original image (DICOM). NII then first swaps the rows & columns such that there is no apparent rotation after writing to file with save_nii(). ....................... Input A data array being saved as nifti Options object with possible fields: .voxelSize (default: [1 1 1]) .filename (without or without .nii extension) (default: './tmp.nii') TODO DOCUMENTATION","title":"nii"},{"location":"3_contributing/api_documentation/misc/nii/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/prelude/","text":"prelude Filetype: MATLAB\u00ae function Synopsis: PRELUDE PRELUDE calls FSL Prelude unwrappedPhase = PRELUDE( rawPhase, mag ) unwrappedPhase = PRELUDE( rawPhase, mag, Options ) ....................... rawPhase: 3d array of the wrapped phase values mag: 3d array of the corresponding magnitude data ....................... The following Option-fields are supported .voxelSize default: [1 1 1] .path2UnwrappedPhase default: 'unwrappedPhase.nii' temporarily created in the same directory as the raw phase input, however it is subsequently deleted (assumption being the user wants the unwrapped phase returned merely as a matlab array). .mask .isUnwrappingIn2D default: true .isSavingNiftis default: false ....................... topfer@ualberta.ca 2014 Attributes nInputs : 3 nOutputs : 1","title":"prelude"},{"location":"3_contributing/api_documentation/misc/prelude/#prelude","text":"Filetype: MATLAB\u00ae function Synopsis: PRELUDE PRELUDE calls FSL Prelude unwrappedPhase = PRELUDE( rawPhase, mag ) unwrappedPhase = PRELUDE( rawPhase, mag, Options ) ....................... rawPhase: 3d array of the wrapped phase values mag: 3d array of the corresponding magnitude data ....................... The following Option-fields are supported .voxelSize default: [1 1 1] .path2UnwrappedPhase default: 'unwrappedPhase.nii' temporarily created in the same directory as the raw phase input, however it is subsequently deleted (assumption being the user wants the unwrapped phase returned merely as a matlab array). .mask .isUnwrappingIn2D default: true .isSavingNiftis default: false ....................... topfer@ualberta.ca 2014","title":"prelude"},{"location":"3_contributing/api_documentation/misc/prelude/#attributes","text":"nInputs : 3 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/resharp/","text":"resharp Filetype: MATLAB\u00ae function Synopsis: [LSF,MASK_ERO] = RESHARP(TFS,MASK,VOX,KER_RAD,TIK_REG) LFS : local field shift after background removal MASK_ERO : eroded mask after convolution TFS : input total field shift MASK : binary mask defining the brain ROI VOX : voxel size (mm), e.g. [1,1,1] for isotropic KER_RAD : radius of convolution kernel (mm), e.g. 4 TIK_REG : Tikhonov regularization parameter, e.g. 5e-4 Method is described in the paper: Sun, H. and Wilman, A. H. (2013), Background field removal using spherical mean value filtering and Tikhonov regularization. Magn Reson Med. doi: 10.1002/mrm.24765 Attributes nInputs : 5 nOutputs : 4","title":"resharp"},{"location":"3_contributing/api_documentation/misc/resharp/#resharp","text":"Filetype: MATLAB\u00ae function Synopsis: [LSF,MASK_ERO] = RESHARP(TFS,MASK,VOX,KER_RAD,TIK_REG) LFS : local field shift after background removal MASK_ERO : eroded mask after convolution TFS : input total field shift MASK : binary mask defining the brain ROI VOX : voxel size (mm), e.g. [1,1,1] for isotropic KER_RAD : radius of convolution kernel (mm), e.g. 4 TIK_REG : Tikhonov regularization parameter, e.g. 5e-4 Method is described in the paper: Sun, H. and Wilman, A. H. (2013), Background field removal using spherical mean value filtering and Tikhonov regularization. Magn Reson Med. doi: 10.1002/mrm.24765","title":"resharp"},{"location":"3_contributing/api_documentation/misc/resharp/#attributes","text":"nInputs : 5 nOutputs : 4","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/savefigure/","text":"savefigure Filetype: MATLAB\u00ae function Synopsis: Write image (2d array) to .pnd file using the 'export_fig' tool Params = savefigure( img, Params ) Returns the employed Parameters \u2014 a struct for which the following fields are supported as optional inputs (defaults in square brackets): .filename ['.tmp'] .colormap ['gray'] .scaling [ [min(img) max(img)] ] .magnification [1] .isColorbar [false] .isBackgroundTransparent [false] Attributes nInputs : 2 nOutputs : 1","title":"savefigure"},{"location":"3_contributing/api_documentation/misc/savefigure/#savefigure","text":"Filetype: MATLAB\u00ae function Synopsis: Write image (2d array) to .pnd file using the 'export_fig' tool Params = savefigure( img, Params ) Returns the employed Parameters \u2014 a struct for which the following fields are supported as optional inputs (defaults in square brackets): .filename ['.tmp'] .colormap ['gray'] .scaling [ [min(img) max(img)] ] .magnification [1] .isColorbar [false] .isBackgroundTransparent [false]","title":"savefigure"},{"location":"3_contributing/api_documentation/misc/savefigure/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/shaver/","text":"shaver Filetype: MATLAB\u00ae function Synopsis: shaves a 3D binary mask by 'R' SHAVER convolves binary input image ROI with an ellipsoid defined by radius (or radii) R to return a contracted version of ROI Syntax ROIshaved = SHAVER(ROI,R) Description ROIshaved = SHAVER(ROI,R) returns ROI eroded by R. If R is a single scalar, every dimension is eroded by R. If R is a 3-component vector [Rx Ry Rz], each dimension is then eroded by its corresponding R value. see also DILATER( ) ========================================================================= Updated::20170210::ryan.topfer@polymtl.ca ========================================================================= Attributes nInputs : 2 nOutputs : 1","title":"shaver"},{"location":"3_contributing/api_documentation/misc/shaver/#shaver","text":"Filetype: MATLAB\u00ae function Synopsis: shaves a 3D binary mask by 'R' SHAVER convolves binary input image ROI with an ellipsoid defined by radius (or radii) R to return a contracted version of ROI Syntax ROIshaved = SHAVER(ROI,R) Description ROIshaved = SHAVER(ROI,R) returns ROI eroded by R. If R is a single scalar, every dimension is eroded by R. If R is a 3-component vector [Rx Ry Rz], each dimension is then eroded by its corresponding R value. see also DILATER( ) ========================================================================= Updated::20170210::ryan.topfer@polymtl.ca =========================================================================","title":"shaver"},{"location":"3_contributing/api_documentation/misc/shaver/#attributes","text":"nInputs : 2 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/shimbindir/","text":"shimbindir Filetype: MATLAB\u00ae function Synopsis: Returns binary directory of shim reference maps as a string shimDir = SHIMBINDIR( ) ; by default, shimDir = '~/Matlab/shimReferenceMaps/' If you want to store the binaries in a different directory, replace the corresponding entry in this function with the appropriate directory. Attributes nInputs : 0 nOutputs : 1","title":"shimbindir"},{"location":"3_contributing/api_documentation/misc/shimbindir/#shimbindir","text":"Filetype: MATLAB\u00ae function Synopsis: Returns binary directory of shim reference maps as a string shimDir = SHIMBINDIR( ) ; by default, shimDir = '~/Matlab/shimReferenceMaps/' If you want to store the binaries in a different directory, replace the corresponding entry in this function with the appropriate directory.","title":"shimbindir"},{"location":"3_contributing/api_documentation/misc/shimbindir/#attributes","text":"nInputs : 0 nOutputs : 1","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/sortdicoms/","text":"sortdicoms Filetype: MATLAB\u00ae function Synopsis: Arrange unsorted DICOMs into subdirectories according to acquisition series [] = sortdicoms( unsortedDir ) [] = sortdicoms( unsortedDir, sortedDir ) [] = sortdicoms( unsortedDir, sortedDir, isCopying ) Copies and renames .dcm or .IMA images within unsortedDir into subdirectories based on the image headers. sortedDir is the destination parent folder where series-/scan-specific subdirectories will be created if they do not already exist. When called without a second argument, sortedDir = [unsortedDir '/sorted'] by default. To move rather than copy the files, call the function with the third argument isCopying = 0 (or false ). NOTE This function is used to organize images transfered via Siemens 'real-time' socket protocol, by which DICOMs with abstruse filenames are transfered immediately upon reconstruction into a single directory (irrespective of acquisition series/scan). Attributes nInputs : 3 nOutputs : 0","title":"sortdicoms"},{"location":"3_contributing/api_documentation/misc/sortdicoms/#sortdicoms","text":"Filetype: MATLAB\u00ae function Synopsis: Arrange unsorted DICOMs into subdirectories according to acquisition series [] = sortdicoms( unsortedDir ) [] = sortdicoms( unsortedDir, sortedDir ) [] = sortdicoms( unsortedDir, sortedDir, isCopying ) Copies and renames .dcm or .IMA images within unsortedDir into subdirectories based on the image headers. sortedDir is the destination parent folder where series-/scan-specific subdirectories will be created if they do not already exist. When called without a second argument, sortedDir = [unsortedDir '/sorted'] by default. To move rather than copy the files, call the function with the third argument isCopying = 0 (or false ). NOTE This function is used to organize images transfered via Siemens 'real-time' socket protocol, by which DICOMs with abstruse filenames are transfered immediately upon reconstruction into a single directory (irrespective of acquisition series/scan).","title":"sortdicoms"},{"location":"3_contributing/api_documentation/misc/sortdicoms/#attributes","text":"nInputs : 3 nOutputs : 0","title":"Attributes"},{"location":"3_contributing/api_documentation/misc/unwrap3d/","text":"unwrap3d Filetype: MATLAB\u00ae function Synopsis: UNWRAP3D UNWRAP3D calls a 3D path-based unwrapper (Abdul-Rahman et al 2007) unwrappedPhase = UNWRAP3D( rawPhase, mask ) unwrappedPhase = UNWRAP3D( rawPhase, mask, Options ) ....................... rawPhase: 3d (double) array of wrapped phase mask: 3d (binary) array demarking region (of reliable raw phase measurements) to be unwrapped ....................... The following Option-fields are supported .path2UnwrappedPhase default: './unwrappedPhase.bin' .isSavingBinaries The following files are created in the dir of path2UnwrappedPhase: rawPhase.bin [float32], unwrappedPhase.bin [float32], mask.bin [uint8] default: false .bin files deleted. Assumption being the user simply wants the unwrapped phase returned as a matlab array. ....................... topfer@ualberta.ca 2015 Attributes nInputs : 3 nOutputs : 1","title":"unwrap3d"},{"location":"3_contributing/api_documentation/misc/unwrap3d/#unwrap3d","text":"Filetype: MATLAB\u00ae function Synopsis: UNWRAP3D UNWRAP3D calls a 3D path-based unwrapper (Abdul-Rahman et al 2007) unwrappedPhase = UNWRAP3D( rawPhase, mask ) unwrappedPhase = UNWRAP3D( rawPhase, mask, Options ) ....................... rawPhase: 3d (double) array of wrapped phase mask: 3d (binary) array demarking region (of reliable raw phase measurements) to be unwrapped ....................... The following Option-fields are supported .path2UnwrappedPhase default: './unwrappedPhase.bin' .isSavingBinaries The following files are created in the dir of path2UnwrappedPhase: rawPhase.bin [float32], unwrappedPhase.bin [float32], mask.bin [uint8] default: false .bin files deleted. Assumption being the user simply wants the unwrapped phase returned as a matlab array. ....................... topfer@ualberta.ca 2015","title":"unwrap3d"},{"location":"3_contributing/api_documentation/misc/unwrap3d/#attributes","text":"nInputs : 3 nOutputs : 1","title":"Attributes"},{"location":"4_about/license/","text":"License and warranty This software is distributed under the following license . THIS SOFTWARE MAY NOT BE USED FOR MEDICAL DIAGNOSIS AS IT IS NOT SANCTIONED BY AUTHORITIES SUCH AS HEALTH CANADA AND THE FOOD AND DRUG ADMINISTRATION. By using this software, you indemnify the General Hospital Corporation (Boston, MA) and Ecole Polytechnique (Montreal, QC) from any liability arising from use of this software. Installation and use of the software shall be construed as consent to waive any future right to take legal action against the above-mentioned parties for any damages related to the use of the software, whether for the software's intended applications or otherwise.","title":"License and warranty"},{"location":"4_about/license/#license-and-warranty","text":"This software is distributed under the following license . THIS SOFTWARE MAY NOT BE USED FOR MEDICAL DIAGNOSIS AS IT IS NOT SANCTIONED BY AUTHORITIES SUCH AS HEALTH CANADA AND THE FOOD AND DRUG ADMINISTRATION. By using this software, you indemnify the General Hospital Corporation (Boston, MA) and Ecole Polytechnique (Montreal, QC) from any liability arising from use of this software. Installation and use of the software shall be construed as consent to waive any future right to take legal action against the above-mentioned parties for any damages related to the use of the software, whether for the software's intended applications or otherwise.","title":"License and warranty"},{"location":"5_other-ressources/hardware/assembly/","text":"Assembly","title":"Assembly"},{"location":"5_other-ressources/hardware/assembly/#assembly","text":"","title":"Assembly"},{"location":"5_other-ressources/hardware/description/","text":"Description of harware with amplifiers","title":"Description of harware with amplifiers"},{"location":"5_other-ressources/hardware/description/#description-of-harware-with-amplifiers","text":"","title":"Description of harware with amplifiers"}]}